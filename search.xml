<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/03/01/shi-xi/"/>
      <url>/2022/03/01/shi-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="项目">项目</h2><p>当需要设置的样式很多时设置className而不是直接操作style。</p><p>三十所时频数据项目主要是研究所做了一个数据加密的一个项目，需要我们对这个数据进行一个显示，前端主要是使用了vue3+elementui+echarts实现的，</p><p>由于研究所不能联网，所以做的是一些本地开发，也不部署到云服务器上面去，这里主要是学习到了一些与django后台对接的方法不同于其他，要在其根目录下找到template文件夹放在里面，</p><p>做过一个有websocket的小demo</p><p>网络理政中心项目主要是对网络理政中心的大屏温度进行监控，房间里通过传感器对电流，电压进行显示，防止出现温度过高，电流过载。项目主要分为数据概览显示了当前监控的传感器具体情况，设备管理模块，对设备的基本信息做了表单呈现，数据监控模块可以温度历史数据，报警管理主要是对设备出现报警的具体内容进行呈现，用户管理是呈现当前用户的一些信息，其中如果是管理员的话可以对成员信息进行增删改，不是的就不行，最后是日志管理，可以看最新的日志，也可以查询某段时间的。最后是大屏实时数据的可视化模块，主要是对大屏数据进行一个热力图的实时的展示还有一些其他的信息。</p><p>技术主要是主要是采用了vue+elementui+echarts来做的，其中某些elementui没有的一些图标，比如一些传感器图标，报警图标。所以使用了阿里的图标库的图标，项目搭建完后部署在了nginx服务器上。</p><p>在项目部署过程中，因为要提前部署到甲方提供的服务器上，所以发现要对整个代码都需要进行加密，以前一直觉得前端代码在webpack打包以后应该算是加密状态，后来了解到有一些反编译的手段可以吧前端代码反编译出来，所以对加密这一块做了一些了解，刚开始的时候连接到UglifyJsPlugin对代码有代码压缩及混淆功能，可以对代码进行压缩，变量、函数名替换为简单字母，降低了源码的可读性，一定程度上达到了加密的目的，但我调整了一些参数后去对比了加密了的打包文件和没有加密的发现差别很小，所以查询了一些资料，发现可以使用 <code>webpack-obfuscator</code> 来给代码增加随机废代码段、字符编码转义等方法可以使构建代码完全混淆，实现无法恢复源码甚至无法阅读的目的。同时又发现这个插件对webpack3不支持了，于是又兜兜转转去吧webpack升级了一下，调整了一下打包参数才实现了这个功能。</p><p>还有一个复杂的地方在于在最初的设想的时候，想对这个热力图的每一块进行捕捉，然后返回这块屏幕的具体信息。这里调用了echarts的api作用相当于对图中某一块的点击做了一个监听得到有个params参数，对这个参数做处理得到我们具体点位坐标，由于查询得到的信息要呈现在另外一个页面里面，于是对这个点击生成的变量做了一个watch变量监听，然后调用具体函数，在通过这个函数把这个变量放到了vuex中。同时在这个呈现设备信息的页面做了一个对vuex中这个变量的watch监听，然后再通过ajax调用后端具体接口得到这个设备的信息</p><p>项目优化：做过页面的自适应使用的是淘宝的lib-flexible（根节点会根据页面视口变化而变化font-size大小。）和px2rem插件(我们通过配置基准，实现将px自动换算成rem，)，同时吧项目中所有的style设置成className。</p><p>在打包项目是，发现打包后终端会显示一些包文件过大，于是在stactic文件中定位到具体的文件，查看代码，发现是echarts是通过本地的包文件来使用的，然后改为了在index.html中cdn的资源引用方式。</p><h4 id="权限问题">权限问题</h4><h2 id="面试题">面试题</h2><p>《JavaScript 高级程序设计》《CSS 权威指南》</p><p>学习路径：学习HTML，然后学习了css，学习了js的基础，然后不想哄学习CSS，然后学习vue框架，ajax，elementuicss框架，echars，vuex，vue-router，一些插件的使用，websocket，webpack，nginx，nodejs，mysql，spring，</p><h3 id="一些对比">一些对比</h3><h4 id="说一下使用Jquery和使用vue的区别">说一下使用Jquery和使用vue的区别</h4><p><strong>Jquery</strong>是对<strong>繁琐的Dom操作进行了封装</strong>，同时也在里面封装了兼容浏览器的处理方式，更方便开发人员选取和操作DOM对象，在这里，<strong>视图和数据是耦合在一起的</strong>，这样不利于复杂业务逻辑的开发；</p><p>而vue解耦了视图和数据，将Dom相关操作完全封装在了内部，通过数据来驱动视图，它只关心数据的变化，将开发人员<strong>从繁琐复杂的Dom操作中解放了出来</strong>，能够更加专注于前端业务逻辑的实现。</p><h3 id="HTML">HTML</h3><h4 id="link和-impor区别">link和@impor区别</h4><pre class="language-none"><code class="language-none">1、link是html的标签，不仅可以加载css还可以定义Rss , rel连接属性；@import是css的语法规则，只能引入样式；2、加载页面时，link是同时加载的，@impor是页面加载完后才加载3、link没有兼容性的问题，而@import只在较高版本的浏览器才可以识别4、link可以通过js插入操作dom，@import 不可以！</code></pre><h4 id="图片懒加载">图片懒加载</h4><pre class="language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 由于识别不了data-src属性，所以不知道去哪儿下载， --&gt;    &lt;img data-src="1.gif"&gt;    &lt;img data-src="2.gif"&gt;    &lt;img data-src="3.gif"&gt;    &lt;script&gt;        const images = document.querySelector('img')        const callback = entries =&gt;{            entries.forEach(entry =&gt; {                // isIntersecting表示是否进入到可视区域，true时代表此次触发回调函数时观察到了图片                if(entry.isIntersecting) {                    // target代表目标元素                    const image = entry.target;                    // 获取相应的图片属性                    const data_src = image.getAttribute('data-src')                    // 修改为可见的src属性                    image.setAtrribute('src', data_src)                    // 已经观察过了，取消observer观察动作                    observe.unobserve(image)                    console.log("触发")                }            });        }        const observe = new IntersectionObserver(callback);        // 开始观察每一张图片        images.forEach(image=&gt;{            observe.observe(image);        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="css">css</h3><h4 id="水平垂直居中">水平垂直居中</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- &lt;script&gt;        // width - viewport的宽度 height - viewport的高度        // initial-scale - 初始的缩放比例        // minimum-scale - 允许用户缩放到的最小比例        // maximum-scale - 允许用户缩放到的最大比例        // user-scalable - 用户是否可以手动缩放        // 实现0.5px的线      &lt;meta name="viewport"content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/&gt;    &lt;/script&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         我是内容我是内容我是内容我我是内容我是内容我是内容        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token comment">/* text-align与line-hight*/</span><span class="token comment">/* .child{    text-align:center;    line-height:200px;    width: 500px;    height: 200px;    background: #80ff80;    font-size: 20px} */</span><span class="token comment">/*父类中 display: flex;justify-content: center;align-items: center;*/</span><span class="token comment">/* .parent{  height: 300px;  border: 3px solid red;  display: flex;  justify-content: center;  align-items: center;}.child{  border: 3px solid green;  width: 300px;} */</span><span class="token comment">/*相对，绝对  top: 50%;left: 50%;transform: translate(-50%,-50%);  */</span><span class="token comment">/* .parent{  height: 300px;  border: 3px solid red;  position: relative;}.child{  position: absolute;  top: 50%;  left: 50%;  transform: translate(-50%,-50%);} */</span><span class="token comment">/*相对，绝对   margin: auto;top: 0;bottom: 0;left: 0;right: 0;  */</span><span class="token comment">/* .parent{  height: 600px;  border: 1px solid red;  position: relative;}.child{  width: 300px;  height: 200px;  border: 1px solid green;  position: absolute;  margin: auto;  top: 0;  bottom: 0;  left: 0;  right: 0;} */</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id=""></h5><h4 id="三栏布局">三栏布局</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></code></pre><pre class="language-none"><code class="language-none">.left{          background-color: #ffb;          float: left;          width: 200px;      }      .right{          background-color: #f65;          float: right;          width: 200px;      }      .main{          background-color: #ccc;          overflow: hidden;      }</code></pre><h4 id="PNG">PNG</h4><p>PNG8格式图片的颜色模式是：（索引）颜色，在修改前要先更改颜色模式为RGB颜色。</p><h4 id="font-12px-2">font:12px/2</h4><p>已知这样一段HTML:</p><p class="a"></p>,应用这样一段css： .a{font:12px/2 arial;},则这个p元素的line-height的值是(24)px.<br>分析：font:12px/2 这是缩写形式，font-size为12px，line-height位font-size的2倍，24px。<p></p><h4 id="CSS选择器优先级">CSS选择器优先级</h4><blockquote><p>不同级别：！important（在样式属性后不加“;”，在!important后加分号）&gt;行内样式&gt;ID选择器&gt;Class选择器&gt;标签&gt;通配符</p></blockquote><h6 id="相同级别：">相同级别：</h6><blockquote><p>（1）同一级别中后写的会覆盖先写的样式<br>（2）选择器约分</p></blockquote><p>**CSS优先级：是由四个级别和各级别出现次数决定的<br>四个级别：行内样式，ID选择器，Class选择器，标签<br>每个规则对应一个初始值0,0,0,0<br>若是 行内选择符，则加1、0、0、0</p><p>若是 ID选择符，则加0、1、0、0</p><p>若是 类选择符/属性选择符/伪类选择符，则分别加0、0、1、0</p><p>若是 元素选择符/伪元素选择符，则分别加0、0、0、1</p><p>算法：将每条规则中，选择符对应的数相加后得到的”四位数“，从左到右进行比较，大的优先级越高。**</p><p><strong>注意：</strong><br>①、!important的优先级是最高的，但出现冲突时则需比较”四位数“;</p><p>②、优先级相同时，则采用就近原则，选择最后出现的样式;</p><p>③、继承得来的属性，其优先级最低;</p><p>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p><p>css选择器使用强烈建议采用低权重原则，利于充分发挥css的继承性，复用性，模块化、组件化。</p><h4 id="盒子模型">盒子模型</h4><ul><li><strong>argin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><p>标准盒子模型的<strong>width 和 height 指的是内容区域</strong>的宽度和高度和IE盒子模型的，<strong>width 和 height 指的是内容区域+border+padding</strong>的宽度和高度。</p><p><strong>标准盒子模型和IE盒子模型(怪异盒子模型)</strong>，怪异盒子模型通过  box-sizing: border-box;来触发</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202250923354.png" alt="image-20220225092327102"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202250923901.png" alt="image-20220225092332787"></p><p><strong>面试真题：</strong></p><p>4、已知这样一段HTML，</p><div class="a"><div class="b"></div></div>，如果应用了这样一段css，<p></p><p>.a{width:100px;padding:10px;box-sizing:border-box;}<br>.b{width:100%;height:10px;background-color:red}<br>1<br>2<br>那么红色区域的宽度为：B</p><p>A. 90px<br>B. 80px<br>C. 110px<br>D. 100px</p><p>分析：box-sizing:border-box;是怪异盒模型，border、padding不会撑开盒子的大小。默认是content-box，标准盒模型,border、padding会撑开盒子的大小.所以b的宽度就是100-10x2=80px。<br><strong>一些基础知识例子</strong></p><p>会用小属性层叠大属性。</p><p>padding:(上、右、下、左)（顺时针方向，用空格隔开。margin的道理也是一样的）</p><p>如果只写了三个值，则顺序为：上、右、下。左和右一样。</p><p>如果只写了两个值，padding: 30px 40px;则顺序等价于：30px 40px 30px 40px;</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/image-20220222231830403.png" alt="image-20220222231830403"></p><p>border</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/image-20220222232607059.png" alt="image-20220222232607059"></p><h4 id="BFC块级格式化上下文">BFC块级格式化上下文</h4><p>BFC，就是一个与世隔绝的独立区域，不会互相影响</p><p>每一个BFC区域只包括其子元素，不包括其子元素的子元素。(这1点比较容易理解)</p><p>每一个BFC区域都是独立隔绝的,互不影响!(这点不太好理解，但是后续会使用代码验证)</p><p><strong>触发BFC的条件</strong></p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><p>满足任一即可</p><p><strong>解决外边距的塌陷问题(垂直塌陷)</strong>，<strong>包含塌陷</strong>，<strong>清除浮动</strong></p><h4 id="如何判断当前是否在iframe中"><strong>如何判断当前是否在iframe中</strong></h4><pre class="language-none"><code class="language-none">// 1if (self.frameElement &amp;&amp; self.frameElement.tagName == "IFRAME") {　　alert('在iframe中');}// 2if (window.frames.length != parent.frames.length) {　　alert('在iframe中');}// 3if (self != top) { 　　alert('在iframe中');}说明：三种方式都是根据当前的窗口层级进行判断，以上是针对有 &lt;frameset&gt; 或者 &lt;iframe&gt; 的页面，self.frameElement 可以获取到当前的 iframe 节点（如果有的话），否则为null 解释：window、top、parent、self 之间的联系和区别window ： 当前窗口top: 顶层窗口，针对有很多层的iframeparent: 父级窗口，即当前窗口的上一层窗口self: 当前窗口，和window、window.self  等价</code></pre><h4 id="响应式布局总结">响应式布局总结</h4><pre class="language-none"><code class="language-none">//  采用淘宝的lib-flexible的库,来做屏幕自适应处理. npm i lib-flexible -S// 在项目中写css时会自动将rem转化为px,需要安装px2rem这个工具,安装:  npm i px2rem-loader -D  const loaders = [cssLoader, px2remLoader];  // main.js中imoort，在index.html中加入下面的  import  'lib-flexible' &lt;meta name='viewport' content='width=device-width , initial-scale=1.0'&gt;</code></pre><h4 id="移动端适配的几种方案">移动端适配的几种方案</h4><p>早期网页设计采用<strong>静态布局</strong>，通过<code>&lt;meta&gt;</code>标签中的<code>applicable-device</code>应用设备标识识别移动设备，即<code>&lt;meta name = 'applicable-device' content = 'mobile'&gt;</code>，在<code>&lt;meta&gt;</code>标签中的<code>viewport</code>标签中设置<code>width</code>，通过<code>js</code>动态修改标签的<code>initial-scale</code>使得页面等比缩放，刚好占满整个屏幕。之前阅读过文章中有提到静态布局中页面各个元素采用<code>px</code>为单位，这种方案实现简单，不存在兼容性问题，但用户体验很不友好。</p><p>后面出现<strong>流式布局</strong>，使用百分比<code>%</code>定义宽度，高度使用<code>px</code>固定，根据可视区域大小实时进行尺寸调整，通常使用<code>max-width/min-width</code>控制尺寸范围过大或者过小。这种方案实现比较简单，但在大屏手机或横竖屏切换场景下可能会导致页面元素被拉伸变形，字体大小无法随屏幕大小发生变化。</p><p>顺应不同页面字体大小展现问题，出现了<strong>弹性布局</strong>。这种布局方案下，包裹文字的元素的尺寸采用<code>em/rem</code>为单位，页面主要划分区域的尺寸依据情况使用<code>px</code>、百分数或者<code>em/rem</code>。如一些高校的网站 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.jlu.edu.cn%2F">jlu</a>，页面的主要划分区域使用<code>px</code>和百分比，包裹文字的元素和文字采用<code>em</code>。</p><p>上面的这几种方案下，页面元素的大小按照屏幕分辨率进行适配调整，但是整体布局不变，对于<strong>响应式web设计</strong>，网页布局会随着访问它的视口及设备的不同呈现不同的样式，在实现上可能会以上多种方案的结合，同时搭配 <strong>媒体查询</strong> 技术使用，使得一个页面在多个终端 (PC, mobile, pad) 呈现满意效果，如 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmashable.com%2F">mashable</a> 。</p><p>思路</p><ol><li>写页面时，按照设计稿写固定宽度，最后再统一缩放处理，在不同手机上都能用</li><li>按照设计稿的标准开发页面，在手机上部分内容根据屏幕宽度等比缩放，部分内容按需要变化，需要缩放的元素使用 rem, vw 相对单位，不需要缩放的使用 px</li><li>固定尺寸+弹性布局，不需要缩放</li></ol><h5 id="展开说说">展开说说</h5><h5 id="viewport-适配"><strong>viewport 适配</strong></h5><p><img src="https://pic2.zhimg.com/80/v2-e8f89ae102c6b739d9510630ccff5081_720w.jpg" alt="img"></p><p>根据设计稿标准（750px 宽度）开发页面，写完后页面及元素自动缩小，适配 375 宽度的屏幕</p><p>在 head 里设置如下代码</p><pre class="language-text" data-language="text"><code class="language-text">&lt;meta name="viewport" content="width=750,initial-scale=0.5"&gt;</code></pre><p>initial-scale = 屏幕的宽度 / 设计稿的宽度，为了适配其他屏幕，需要动态的设置 initial-scale 的值：</p><pre class="language-none"><code class="language-none">&lt;head&gt;  &lt;script&gt;    const WIDTH = 750    const mobileAdapter = () =&gt; {      let scale = screen.width / WIDTH      let content = `width=${WIDTH}, initial-scale=${scale}, maximum-scale=${scale}, minimum-scale=${scale}`      let meta = document.querySelector('meta[name=viewport]')      if (!meta) {        meta = document.createElement('meta')        meta.setAttribute('name', 'viewport')        document.head.appendChild(meta)      }      meta.setAttribute('content',content)    }    mobileAdapter()    window.onorientationchange = mobileAdapter //屏幕翻转时再次执行  &lt;/script&gt;&lt;/head&gt;</code></pre><p>缺点就是边线问题，不同尺寸下，边线的粗细是不一样的（等比缩放后），全部元素都是等比缩放，实际显示效果可能不太好</p><h5 id="vw-适配（部分等比缩放）"><strong>vw 适配（部分等比缩放）</strong></h5><ol><li>开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标注是基于此宽度标注）</li><li>开始开发，对设计稿的标注进行转换，把px换成vw。比如页面元素字体标注的大小是32px，换成vw为 (100/750)*32 vw</li><li>对于需要等比缩放的元素，CSS使用转换后的单位</li><li>对于不需要缩放的元素，比如边框阴影，使用固定单位px</li></ol><p>关于换算，为了开发方便，利用自定义属性，CSS变量</p><pre class="language-none"><code class="language-none">&lt;head&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1"&gt;  &lt;script&gt;    const WIDTH = 750    //:root { --width: 0.133333 } 1像素等于多少 vw    document.documentElement.style.setProperty('--width', (100 / WIDTH))   &lt;/script&gt;&lt;/head&gt;</code></pre><p>注意此时，meta 里就不要去设置缩放了</p><p>业务代码里就可以写</p><pre class="language-text" data-language="text"><code class="language-text">header {  font-size: calc(28vw * var(--width))}</code></pre><p><strong>实现了按需缩放</strong></p><h5 id="rem-适配"><strong>rem 适配</strong></h5><ol><li>开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标是基于此宽度标注）</li><li>开始开发，对设计稿的标注进行转换</li><li>对于需要等比缩放的元素，CSS使用转换后的单位</li><li>对于不需要缩放的元素，比如边框阴影，使用固定单位px</li></ol><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202251030048.png" alt="image-20220225103024885"></p><p>假设设计稿的某个字体大小是 40px, 手机屏幕上的字体大小应为 420/750*40 = 22.4px (体验好)，换算成 rem（相对于 html 根节点，假设 html 的 font-size = 100px,）则这个字体大小为 0.224 rem</p><p>写样式时，对应的字体设置为 0.224 rem 即可，其他元素尺寸也做换算…</p><p>但是有问题</p><p>举个 ，设计稿的标注 是40px，写页面时还得去做计算，很麻烦（全部都要计算）</p><p>能不能规定一下，看到 40px ,就应该写 40/100 = 0.4 rem,这样看到就知道写多少了（不用计算），此时的 html 的 font-size 就不能是 100px 了，应该为 (420*100)/750 = 56px，100为我们要规定的那个参数</p><p>根据不同屏幕宽度，设置 html 的 font-size 值</p><pre class="language-text" data-language="text"><code class="language-text">&lt;head&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1"&gt;  &lt;script&gt;    const WIDTH = 750 //设计稿尺寸    const setView = () =&gt; {      document.documentElement.style.fontSize = (100 * screen.width / WIDTH) + 'px'    }    window.onorientationchange = setView    setView()  &lt;/script&gt;&lt;/head&gt;</code></pre><p>对于需要等比缩放的元素，CSS使用转换后的单位</p><pre class="language-text" data-language="text"><code class="language-text">header {  font-size: .28rem;}</code></pre><p>对于不需要缩放的元素，比如边框阴影，使用固定单位px</p><pre class="language-text" data-language="text"><code class="language-text">header &gt; span.active {  color: #fff;  border-bottom: 2px solid rgba(255, 255, 255, 0.3);}</code></pre><p>假设 html 的 font size = 1px 的话，就可以写 28 rem 了，更方便了，但是浏览器对字体大小有限制，设为 1px 的话，在浏览器中是失效的，会以 12px（或者其他值） 做一个计算 , 就会得到一个很夸张的结果，所以可以把 html 写的大一些</p><p>使用 sass 库时</p><p>JS 处理还是一样的，但看着好看些</p><pre class="language-text" data-language="text"><code class="language-text">@function px2rem($px) {  @return $px * 1rem / 100;}header {  font-size: px2rem(28);}</code></pre><p>以上的三种适配方案，都是<strong>等比缩放</strong>，放到 ipad 上时（设计稿以手机屏幕设计的），页面元素会很大很丑，有些场景下，并不需要页面整体缩放（viewport 自动处理的也很好了），所以有时只需要合理的布局即可。</p><h5 id="弹性盒适配（合理布局）"><strong>弹性盒适配（合理布局）</strong></h5><pre class="language-text" data-language="text"><code class="language-text">&lt;meta name="viewport" content="width=device-width"&gt;</code></pre><p>使用 flex 布局</p><pre class="language-text" data-language="text"><code class="language-text">section {  display: flex;}</code></pre><p>总结一下，什么样的页面需要做适配（等比缩放）呢</p><ul><li>页面中的布局是栅格化的</li></ul><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202251031497.png" alt="image-20220225103139102"></p><p>换了屏幕后，到底有多宽多高很难去做设置，整体的都需要改变，所以需要整体的缩放</p><ul><li><p>头屏大图，宽度自适应，高度固定的话，对于不同的屏幕，形状就会发生改变（放到ipad上就变成长条了），宽度变化后，高度也要保持等比例变化</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202251032820.png" alt="image-20220225103225694"></p></li></ul><p>以上所有的适配都是**宽度的适配，**但是在某些场景下，也会出现高度的适配</p><p>比如大屏，需要适配很多的电视尺寸，要求撑满屏幕，不能有滚动条，此时若换个屏幕</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202251033268.png" alt="image-20220225103304113"></p><p>此时需要考虑小元素用 vh, 宽和高都用 vh 去表示，中间的大块去自适应，这就做到了大屏的适配，屏幕变小了，整体变小了（体验更好），中间这块撑满了屏幕</p><p>对于更复杂的场景，需要更灵活考虑，没有一种适配方式可以囊括所有场景。</p><h5 id="基于媒体查询的响应式设计">基于媒体查询的响应式设计</h5><p><strong>响应式设计</strong> 使得一个网站同时适配 <strong>多种设备</strong> 和 <strong>多个屏幕</strong>，让网站的布局和功能随用户的使用环境（屏幕大小、输出方式、设备/浏览器能力而变化），使其视觉合理，交互方式符合习惯。如使得内容区块可伸缩与自由排布，边距适应页面尺寸，图片适应比例变化，能够自动隐藏/部分显示内容，能自动折叠导航和菜单。</p><h4 id="原理">原理</h4><blockquote><p>主要实现是通过 <strong>媒体查询</strong>，通过给不同分辨率的设备编写不同的样式实现响应式布局，用于解决不同设备不同分辨率之间兼容问题，一般是指PC、平板、手机设备之间较大的分辨率差异。实现上不局限于具体的方案，通常结合了 <strong>流式布局</strong> <code>+</code> <strong>弹性布局</strong> 方案。比如给小屏幕手机设置<code>@2x</code>图，为大屏手机设置<code>@3x</code>图</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">@media only screen <span class="token function">and</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">375</span>px</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    样式<span class="token number">1</span><span class="token punctuation">}</span>@media only screen <span class="token function">and</span> <span class="token punctuation">(</span><span class="token parameter">min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">750</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>    样式<span class="token number">2</span><span class="token punctuation">}</span></code></pre><h4 id="优势">优势</h4><blockquote><p>能够使网页在不同设备、不同分辨率屏幕上呈现合理布局，不仅仅是样式伸缩变换</p></blockquote><h4 id="不足">不足</h4><blockquote><ul><li>要匹配足够多的设备与屏幕，一个web页面需要多个设计方案，工作量比较大<br>…</li><li>通过媒体查询技术需要设置一定量的断点，到达某个断点前后的页面发生显著变化，用户体验不太友好</li></ul></blockquote><pre class="language-none"><code class="language-none">当创建一个响应式网站，或者非响应式网站变成响应式的时候，首先要关注元素的布局。我在创建响应式布局的时候习惯先写非响应式布局，页面固定宽度大小，我觉得这个对在座的各位没有任何难度。如果完成了非响应式那么我在去添加媒体查询（Media Query)和响应式代码。这种操作更容易实现响应式特性。1.布局及设置meta标签当你完成当你已经完成了无响应的网站，做的第一件事是在你的 HTML 页面，粘贴下面的代码到标签之间。大多数移动浏览器将HTML页面放大为宽的视图（viewport）以符合屏幕分辨率。你可以使用视图的meta标签来进行重置。下面的视图标签告诉浏览器，使用设备的宽度作为视图宽度并禁止初始的缩放。在标签里加入这个meta标签。&lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"&gt;    &lt;!-- width=device-width ：表示宽度是设备屏幕的宽度    initial-scale=1.0：表示初始的缩放比例    minimum-scale=0.5：表示最小的缩放比例    maximum-scale=2.0：表示最大的缩放比例    user-scalable=yes：表示用户是否可以调整缩放比例 --&gt;    [1]（user-scalable = no 属性能够解决 iPad 切换横屏之后触摸才能回到具体尺寸的问题。 ）2.通过媒体查询来设置样式media querymedia query 是响应式设计的核心，它能够和浏览器进行沟通，告诉浏览器页面如何呈现，假如一个终端的分辨率小于980px，那么可以这样写    @media screen and (max-width:980px){         #head { … }         #content { … }         #footer { … }    }这里面的样式会覆盖掉之前所定义的样式。3.设置多种视图宽度假如我们要兼容ipad和iphone视图，我们可以这样设置：/** iPad **/@media only screen and (min-width: 768px) and (max-width: 1024px) {}/** iPhone **/@media only screen and (min-width: 320px) and (max-width: 767px) {}ps:@media screen 和 @media screen only的区别:only用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。一些注意的宽度需要使用百分比    #head { width: 100% }    #content { width: 50%; }2.处理图片缩放的方法简单的解决方法可以使用百分比，但这样不友好，会放大或者缩小图片。那么可以尝试给图片指定的最大宽度为百分比。假如图片超过了，就缩小。假如图片小了，就原尺寸输出。 img { width: auto; max-width: 100%; }</code></pre><h4 id="类名冲突怎么解决？">类名冲突怎么解决？</h4><pre class="language-none"><code class="language-none">使用css-loader来处理css文件，它就实现了css module的思想（css-loader使用在webpack常用插件中有讲述）。要启用css module，需要将css-loader的配置modules设置为true。css module原理非常简单，css-loader会将样式中的类名进行转换，转换为一个唯一的hash值。由于hash值是根据模块路径和类名生成的，因此，不同的css模块，哪怕具有相同的类名，转换后的hash值也不一样。使用css-loader来处理css文件，它就实现了css module的思想（css-loader使用在webpack常用插件中有讲述）。要启用css module，需要将css-loader的配置modules设置为true。因此css-loader使用css module后，源代码的类名和最终生成的类名是不一样的，而开发者只知道自己写的源代码中的类名，并不知道最终的类名是什么，css-loader会导出二者的对应关系，但还包括了很多其他信息。而style-loader就是去除其他信息，仅暴露类名和对应生成的hash值因为css-loader转换css代码后，交给style-loader进习性处理，sytle-loader是用一段js代码，将样式加到style文件中。而我们通常更需要的是生成一个css文件。于是就有了库mini-css-extract-plugin，这个库提供了一个plugin和一个loader：plugin：负责生成css文件loader：负责记录要生成的css文件的内容，同时导出开启css-module后的样式对象</code></pre><h4 id="面试题-2">面试题</h4><ol><li>下列浏览器对应的hack方式正确的有：A<br>A. IE6: _property:value<br>B. IE6/7/8: *property:value<br>C. IE8: *property:value<br>D. IE9: property:value\9</li></ol><p>分析：这道题考察的是css hack。css hack的目的就是使你的css代码兼容不同的浏览器，一般有两种方式，条件注释法、类内属性注释法。 本题显然是运用的类内属性注释法 ： _ ie6识别 * ie6/7识别 \9 ie6-10都能识别。</p><ol start="2"><li>css实现单行文本超出显示….<br>overflow:hidden;<br>text-overflow:ellipsis;<br>white-space: nowrap;</li><li></li></ol><h3 id="js基础">js基础</h3><h4 id="MVVM">MVVM</h4><p><strong>如何理解MVVM？</strong></p><p>MVVM是一种基于前端开发的架构模式，它起源于后端MVC框架，是为了适应日渐复杂的前端业务而生。</p><p>因为后端MVC模式并不完全适合前端场景，所以前端开拓者们将MVC中的C - Controller，变形为VM - ViewModel。</p><p>VM在MVVM模式中相当于一座桥梁，解耦了视图和数据，同时又连接着视图和数据。视图通过事件绑定的方式改变数据，数据通过数据绑定的方式改变视图，它们都是通过VM来进行交互的。</p><p>MVC:model是数据模型，View 是视图；Controller 是用来控制Model的读取、存储，以及如何在 View上 展示数据，更新数据的逻辑控制器。View接收用户的输入操作，传递给Controller进行业务逻辑处理，Model实现数据持久化，并将结果反馈给View，完成一次MVC模式。目前常见的 iOS 和 Android 开发，SDK 和与其搭配的 IDE 工具都是默认以 MVC 的方式来使用。缺点：每次数据更新之后，都需要操作dom, 影响开发效率;</p><p>没有办法独立开发，必须等接口做好了才能往下开发。前端太过依赖于后台</p><p>MVVM将“数据模型数据双向绑定”的思想作为核心，因此在View和Model之间没有联系，通过ViewModel进行交互，而且Model和ViewModel之间的交互是双向的，因此视图的数据的变化会同时修改数据源，而数据源数据的变化也会立即反应到View上。使用MVC的 目的 就是 将M和V的代码分离</p><p><strong>为什么会出来MVVM</strong>？</p><ul><li>开发者在代码中大量调用相同的 DOM API, 处理繁琐 ，操作冗余，使得代码难以维护。</li><li>大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验。</li><li>当 Model 频繁发生变化，开发者需要主动更新到View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到Model 中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。</li></ul><h4 id="vue没有完全遵循MVVM模式的原因">vue没有完全遵循MVVM模式的原因</h4><p>Vue.js 可以说是MVVM 架构的最佳实践，VUE并没有完全遵循MVVM，专注于 MVVM 中的 ViewModel，不仅做到了数据双向绑定，而且也是一款相对比较轻量级的JS 库，API 简洁，很容易上手</p><p>原因一: mvvm是指 “模型-视图-视图模型”, 应该是让"模型"和"视图"实现完全的解耦, 但是vue中提供了一个属性: ref, 通过ref可以拿到dom对象，通过ref直接去操作视图。这一点上，违背了mvvm;</p><p>原因二: 如下图, 结构上, “数据层"包含在了"数据模型层”, 这两个部分没有完全独立出来</p><p><img src="https://pic3.zhimg.com/80/v2-1212d374015876d55c9b3dca99ecdfba_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-aec1cf60636ed9526caac95aff78fa47_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-a22011409fa3dbac0332bca9ee4c108f_720w.jpg" alt="img"></p><h4 id="一些基础">一些基础</h4><p>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。<em>array1</em>.concat(<em>array2</em>,<em>array3</em>,…,<em>arrayX</em>)</p><h4 id="style的display-和visibility区别">style的display 和visibility区别</h4><p>JavaScript中的 <strong>visibility</strong> 属性也用于隐藏元素。 <strong>style.display</strong> 和 <strong>style.visibility</strong> 之间的区别是使用 <strong>visibility：隐藏</strong>标签时不可见，但已分配空间。使用 <strong>显示：无</strong>，标签也不可见，但页面上没有分配空间。</p><h4 id="数据类型">数据类型</h4><p>javascript没有整型变量这个概念，变量可以被赋值为任何类型的值。数值类型只有Number，不区分整数、浮点、长整等，直接赋值为一个整数即可。如果使用过程中必须用到整数，可以通过Math.round(number)，parseInt(string)等函数取整，再使用。</p><h5 id="0-1-0-2-0-3">0.1+0.2 !=0.3</h5><p>因为计算机中数字是以多位二进制的方式来存储的，在JS中数字采用的<code>IEEE 754</code>的双精度标准进行存，像0.5在二进制位中就是0.1，0.375是1/4+1/8就是0.011，只有能表示为x/2^n的数能被整除，才能有限表示，，其余小数都是以近似值得方式存在的。所以像0.1这样的数值用二进制表示你就会发现无法整除，最后算下来会是 0.000110011…由于存储空间有限，最后计算机会舍弃后面的数值，所以我们最后就只能得到一个近似值。0.1和0.2都是近似表示的，在他们相加的时候，两个近似值进行了计算，导致最后得到的值是0.30000000000000004，此时对于JS来说，其不够近似于0.3，于是就出现了0.1 + 0.2 != 0.3 这个现象。</p><p>最常用的方法就是将浮点数转化成整数计算。因为整数都是可以精确表示的。</p><pre class="language-none"><code class="language-none">1：parseFloat((0.1 + 0.2).toFixed(10)2：四舍五入法：Number(0.1+0.2).toFixed(2)3：Number.EPSILON 实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。Number.EPSILON=(function(){   //解决兼容性问题        return Number.EPSILON?Number.EPSILON:Math.pow(2,-52);})();function numbersequal(a,b){     return Math.abs(a-b)&lt;Number.EPSILON; } var a=0.1+0.2, b=0.3; console.log(numbersequal(a,b)); //这里就为true了 4：把计算数字 提升 10 的N次方 倍 再 除以 10的N次方。N&gt;1.</code></pre><h4 id="undefined">undefined</h4><p>以声明，未赋值</p><p>方法的返回值</p><p>对象上某个没有的值</p><h4 id="js中arguments">js中arguments</h4><p>其实Javascript并没有重载函数的功能，但是Arguments对象能够模拟重载。Javascrip中每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式"[]"引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。</p><h4 id="和-的区别">=,==和===的区别</h4><ul><li>=是赋值的意思，是让左边的值等于右边的值，比如：var a=1;那么现在alert(a)就是1，当然右边可以是变量，如：var a=1; var b也是1;</li><li>==是判断等于的意思，返回的是一个布尔值，如：alert(1==1);将返回true，因为1等于1，如果 alert(1==‘1’);也返回true，虽说后面的1是字符串类型，但是==是不判断类型的，所以还是true，如果：alert(1==‘2’)就是false了，因为1不等于2;</li><li>===也是判断的，但是它要比==判断的严谨一点，它的判断必须什么都相等，比如说类型，值;如： alert(1===1);将返回true，因为它们都是1，而且都是数字</li><li>类型，如果：alert(1===‘1’);将返回false，因为前面的1是数字类型，后面的1是字符串类型。</li></ul><p><strong>面试题</strong></p><p>以下表达式中返回结果是true的有：ABC</p><p>A. false == ‘0’<br>B. ‘123’ ==123<br>C. new String(‘123’) == ‘123’<br>D.null == false</p><h4 id="数组的splice方法">数组的splice方法</h4><p>splice(start,deleteCnt,args) 中的start表示开始操作下标，deleteCnt表示从开始下标开始（包括该元素)要删除的元素个数，删除操作返回删除的元素。args表示用来替换删除掉的那些元素（可以有多个参数)，start和deleteCnt必须为数字，如果不是数字尝试转换，转换失败当做0来处理。splice必须至少有一个start元素，否则不做任何操作。deleteCnt不存在表示删除start及后面的全部元素（IE下，取0不做删除)。start可以为负数，表示从数组右边结尾处开始计算。deleteCnt如果为负数不做删除，因为不可能删除负个元素。</p><h5 id="splice-方法和slice-方法">splice()方法和slice()方法</h5><p><strong>slice(start,end) 返回你选择的某段数组元素，不会修改原数组</strong></p><p>**①：**start表示从何处开始选取，end表示从何处开始结束选取，表示一个选取的范围</p><p>**②：**start可以为负数，此时它规定从数组尾部开始算起的位置。也就是-1 ，指最后一个元素，-2 指倒数第二个元素，以此类推</p><p>③：**end如果没有被指定参数，数组会包含从 start 到最后一个数组元素的所有元素</p><p>​④：slice()方法不会修改数组本身，而是返回所选取范围的数组元素。如果想删除数组中的某一个元素，需要使用splice()</p><p>**splice()定义：**从数组中添加或删除元素，然后返回被删除的数组元素，会修改原数组</p><pre class="language-none"><code class="language-none">var oldArr3=[1,2];oldArr3.splice(1,1)–&gt;2(从下标1 开始删除1个元素，即删除2，所以删除后oldArr3–&gt;[1])oldArr3.splice(-1,0,3)–&gt;”"(从下标-1即2元素开始删除0个元素，然后添加元素3，所以操作后oldArr3–&gt;[1,3,2])</code></pre><p>splice(index，howmany，i**tem1,…,itemX)</p><p>**①：**index表示从什么位置开始添加或删除数组元素</p><p>**②：**howmany表示删除的元素数量，如果为0，则表示不删除数组元素</p><p><strong>③：i</strong>tem1,…,itemX表示新增的数组元素</p><p>④：**splice()方法会改变原始数组</p><h4 id="数组和对象的遍历">数组和对象的遍历</h4><h5 id="数组遍历-for-forEach-map-for…of">数组遍历(for,forEach,map,for…of)</h5><p><strong>1，普通for循环，经常用的数组遍历</strong></p><pre class="language-none"><code class="language-none">var arr = [1,2,0,3,9]; for ( var i = 0; i &lt;arr.length; i++){    console.log(arr[i]);}</code></pre><p><strong>2，优化版for循环:</strong></p><p>使用变量，将长度缓存起来，避免重复获取长度，数组很大时优化效果明显</p><pre class="language-none"><code class="language-none">for(var j = 0,len = arr.length; j &lt; len; j++){    console.log(arr[j]);}</code></pre><p><strong>3，forEach，数组自带的循环，主要功能是遍历数组</strong></p><p>arr.forEach(function(value,i){<br>　　console.log(‘forEach遍历:’+i+‘–’+value);</p><p>})</p><p>forEach这种方法也有一个小缺陷：你不能使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break">break</a>语句中断循环，也不能使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return">return</a>语句返回到外层函数。</p><p><strong>4,map遍历，map即是 “映射”的意思 用法与 forEach 相似</strong></p><pre class="language-none"><code class="language-none">arr.map(function(value,index){    console.log('map遍历:'+index+'--'+value);});</code></pre><p>map遍历支持使用return语句，支持return返回值</p><pre class="language-none"><code class="language-none">var temp=arr.map(function(val,index){  console.log(val);    return val*val           })console.log(temp);  </code></pre><p>forEach、map都是ECMA5新增数组的方法，所以ie9以下的浏览器还不支持</p><p><strong>5，for-of遍历</strong></p><p>for…of为ES6新增的方法，主要来遍历可迭代的对象（包括Array, Map, Set, arguments等），它主要用来获取对象的属性值，而for…in主要获取对象的属性名。</p><p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码">](javascript:void(0);)</p><pre class="language-none"><code class="language-none">var arr1 = [1, 2, 3]for (let i of arr1){    console.log(i)}// 遍历普通对象报错var obj2 = {fname:1, name2:22}for(let val of obj2){    console.log(val)}</code></pre><p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码">](javascript:void(0);)</p><ul><li>for-of这个方法避开了for-in循环的所有缺陷</li><li>它可以正确响应break、continue和return语句</li></ul><p>for-of循环支持数组，还支持类对象(例如DOM <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList">NodeList对象</a>)，字符串，map对象，set对象</p><p>for -of遍历数组，遍历的结果是数组的值</p><p>for-of不适合遍历普通对象，但可以通过Array.from()方法转换为类数组或可迭代对象</p><h5 id="对象遍历">对象遍历</h5><p>1，Object.keys()遍历对象</p><p>1.1，在实际开发中，我们有时需要知道对象的所有属性,Object.keys()，传入对象，返回属性名并放在数组里<br>var obj = {‘a’:‘123’,‘b’:‘345’}<br>console.log(Object.keys(obj))<br>// [“a”, “b”]<br>1.2，Object.keys().forEach() 遍历对象，把对象的属性名转成数组，可与数组遍历结合使用<br>复制代码<br>var person = {<br>name: ‘hhh’,<br>age:‘20’,<br>sex:‘男’,<br>home:‘china’<br>}</p><pre><code>var keys = Object.keys(person).forEach((e) =&gt;{    console.log('person', e, ':', person[e])})// Object.keys 遍历对象，把对象的属性名转成数组，可与数组遍历结合使用var keys2 = Object.keys(person)console.log(keys2)//  ["name", "age", "sex", "home"]</code></pre><p>复制代码</p><p>2，for-in遍历对象</p><p>for…in遍历对象，它遍历的是属性名<br>会遍历实例的属性，还会遍历整个原型链，这可能不是你所期望的结果，然后从性能角度上看Object.keys会更优。<br>复制代码<br>var obj = {‘a’:‘123’,‘b’:‘345’}<br>for (let key in obj){<br>console.log(key ,obj[key])<br>}<br>// a 123<br>// b 345<br>复制代码<br>for-in是为遍历对象而设计的，不适用于遍历数组。</p><p>遍历数组的缺点：for-in遍历的index值"0",“1”,"2"等是字符串</p><pre class="language-none"><code class="language-none">for (var index in arr){    console.log(arr[index]);    console.log(index);}</code></pre><p>for-in遍历，会把属性名排序</p><p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码">](javascript:void(0);)</p><pre class="language-none"><code class="language-none">let obj2 = {b:2, a:'11', 1:'ok'}for (let key in obj2) {    console.log(key)}// 1// b// a</code></pre><p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码">](javascript:void(0);)</p><p>for…in总结：</p><p><strong>1、for in遍历对象时，会遍历实例的属性+还遍历原型中可枚举的属性</strong></p><p><strong>2、for in不适合遍历数组，遍历数组遍历的是下标，下标类型是 字符串</strong></p><p><strong>3，for in遍历会以任意顺序遍历对象的属性名</strong></p><h4 id="for…in-和for…-of">for…in 和for… of</h4><p>for-in是ES5标准，遍历的是key（可遍历对象、数组或字符串的key）；for-of是ES6标准，遍历的是value（可遍历对象、数组或字符串的value）</p><pre class="language-none"><code class="language-none">for (var key in myObject) {　　if（myObject.hasOwnProperty(key)){　　　　console.log(key);　　}}</code></pre><p><strong>所以for-in更适合遍历对象，通常是建议不要使用for-in遍历数组</strong>。</p><p><strong>for-of循环</strong></p><p>for-of可以简单、正确地遍历数组（不遍历原型method和name）。</p><pre class="language-none"><code class="language-none">var myArray = [1, 2, 4, 5, 6, 7];myArray.name = "数组";myArray.getName = function() { return this.name; }for (var value of myArray) {    console.log(value);}</code></pre><p>区别总结</p><p>简单总结就是，for in遍历的是数组的索引（即键名），而for of遍历的是数组元素值。</p><p>for-in总是得到对象的key或数组、字符串的下标。</p><p>for-of总是得到对象的value或数组、字符串的值，另外还可以用于遍历Map和Set。</p><pre class="language-none"><code class="language-none">var set = new Set();set.add("a").add("b").add("d").add("c");// 遍历Setfor (let s of set) {    console.log(s);}var map = new Map();map.set("a", 1).set("b", 2).set(999, 3);// 遍历Mapfor(let [k, v] of map) {    console.log(k, v);}</code></pre><h4 id="Symbol">Symbol</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203030131326.png" alt="image-20220303013157858"></p><h4 id="对象数组去重">对象数组去重</h4><p>去除数组中所有对象的相同的一个键值</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> tempArr1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'apple'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'pen'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'book'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'mouse'</span><span class="token punctuation">}</span><span class="token punctuation">]</span> tempArr1 <span class="token operator">=</span>  tempArr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">// id等于自身的就返回后，再通过index判断是不是同一项</span>    <span class="token keyword">return</span> tempArr1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item1</span> <span class="token operator">=&gt;</span>item1<span class="token punctuation">.</span>id<span class="token operator">==</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="数组扁平化：">数组扁平化：</h4><pre class="language-none"><code class="language-none"></code></pre><h4 id="深拷贝和浅拷贝，实现深拷贝">深拷贝和浅拷贝，实现深拷贝</h4><p>浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，所以当一个对象发生变化时，另一个对象随之改变；</p><p>深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；</p><p>区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；</p><h5 id="深拷贝实现的方法">深拷贝实现的方法</h5><pre class="language-none"><code class="language-none">objClone = JSON.parse(JSON.stringfy(obj))</code></pre><p>JSON.parse()：JSON-&gt;JS。JSON.stringfy()：JS-&gt;JSON</p><h5 id="实现一个深拷贝">实现一个深拷贝</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// let objClone = obj.constructor === Array ? []:{}</span>　　<span class="token keyword">let</span> objClone <span class="token operator">=</span>  Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>　　　　<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　　　<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　　　　　objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　　　<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>　　　　　　　　objClone<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>　　　　　　<span class="token punctuation">}</span>　　　　<span class="token punctuation">}</span>　　<span class="token keyword">return</span> objClone<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="JSON格式">JSON格式</h5><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203030040673.png" alt="image-20220303004032328"></p><p>null，十进制数字，双引号的值，true，false，数组，对象。undefined,NaN,Infinity，大写都不行</p><h4 id="判断是一个数组还是一个对象">判断是一个数组还是一个对象</h4><p>instanceof，Arrray.isArray()</p><pre class="language-none"><code class="language-none">var arr = []arr instanceof Array // true</code></pre><h4 id="typeof和instanceof区别">typeof和instanceof区别</h4><p>typeof用于检测基本类型，当他检测引用类型array和object时，得到的都是“object”。因此，我们需要instanceof。</p><p>instanceof用于检测引用类型，它可以区分出array和object。其内部是通过原型链来实现的，比如 arr1 instanceof Array ，他会在arr1的原型链上查找，这里只查找一层，arr1.<strong>proto</strong> == Array.prototype，返回true。</p><h4 id="var-const-let的区别">var,const,let的区别</h4><p>总结：</p><p>var存在声明提升，变量覆盖的·问题，同时它没有块级作用域</p><p>const一旦声明必须赋值,不能使用null占位；声明后不能再修改 ；如果声明的是复合类型数据，可以修改其属性，支持let的其它属性</p><p>let有块级作用域，，函数内部使用let定义后，对函数外部无影响。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>ES6相关面试题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// var let const</span>      <span class="token comment">// 1. 声明提升 =&gt; 先上车后买票</span>    <span class="token comment">//   console.log(num)  // undefined</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span>      <span class="token comment">// 2. 变量覆盖 =&gt; 套牌车</span>      <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">12</span>      <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">34</span>    <span class="token comment">//   console.log(num1) // 34</span>    <span class="token comment">//   var obj = {}  </span>    <span class="token comment">//   obj = ''</span>    <span class="token comment">// 3. 没有块级作用域 =&gt; 红杏出墙</span>    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">// console.log(i)</span>    <span class="token punctuation">}</span>    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 1. const声明之后必须赋值 否则就报错</span>    <span class="token comment">// 2. 定义的值不能修改，否则报错</span>    <span class="token comment">// 3. 支持let的其它属性</span>        <span class="token keyword">const</span> <span class="token constant">DEMO</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token comment">// demo = 456</span>    <span class="token comment">// console.log(demo)</span>    <span class="token comment">// 解构相关</span>    <span class="token comment">// let a = 1;</span>    <span class="token comment">// let b = 2;</span>    <span class="token comment">// [a, b] = [b, a]</span>    <span class="token comment">// console.log(a, b)</span>        <span class="token comment">// let arr = [12, 43, 23, 12, 43, 55]</span>    <span class="token comment">// let item = [...new Set(arr)]</span>    <span class="token comment">// console.log(item)</span>    <span class="token comment">// 标杆 =&gt; 构造函数同步执行</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// .then() 异步执行</span>    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="经典题">经典题</h5><pre class="language-none"><code class="language-none">以下代码执行后a、b的值分别是（c）var a=0;var b=false || a++;A、1,1B、0,0C、1,0D、0，false分析：在运算过程中，首先js 会将 &amp;&amp; 或|| 两边的值转成Boolean 类型，然后再算值 ，&amp;&amp;运算如果返回true，则取后面的值，如果|| 返回true,则取前面的值 。而其中数值转换成boolean 的规则 是：对象、非零整数、非空字符串返回true,其它为false ;在本题中a++结果是0，a是1。||两边都为false,所以结果也就是false。按照上面所说的如果||返回true,则取前面的值。所以b的值就取后面的值0，故选c。</code></pre><h4 id="对象继承">对象继承</h4><h5 id="Object-create">Object.create</h5><p>已知var obj = Object.create({a:1}),则obj.hasOwnproperty(‘a’)返回的结果是：(false).</p><p>分析：Object.create(proto [, propertiesObject ]) 是E5中提出的一种新的对象创建方式，第一个参数是要继承的原型，如果不是一个子函数，可以传一个null，第二个参数是对象的属性描述符，这个参数是可选的。hasOwnproperty方法是判断一个属性是否是定义在对象本身，如果是则返回true，否则返回false。很显然obj是在原型的基础上创建的。</p><h4 id="作用域">作用域</h4><p>作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p><p><strong>编程语言作用域</strong></p><ol><li>静态作用域（由程序定义的位置决定）</li><li>动态作用域（由程序运行的时刻决定）</li></ol><p><strong>javascript的作用域：</strong></p><p>在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p><ol><li>全局作用域：在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：</li></ol><p>（1）最外层函数和在最外层函数外面定义的变量拥有全局作用域</p><p>​（2）所有末定义直接赋值的变量自动声明为拥有全局作用域</p><p>​（3）所有window对象的属性拥有全局作用域</p><p>2.局部作用域：局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部</p><p><strong>因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。</strong></p><ol><li>Js使用词法作用域（静态作用域）；</li><li>Js没有块级作用域；</li><li>ES5中使用词法环境管理静态作用域。</li></ol><p>js的预定义机制：就是js解释器会先对var定义的变量进行初始化，应该说只是起了定义的作用但并没赋值。</p><pre class="language-none"><code class="language-none">实例1：var value = 1;function foo() {    console.log(value);}function bar() {    var value = 2;    foo();}bar(); //1// 结果是 ???假设JavaScript采用静态作用域，让我们分析下执行过程：执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。假设JavaScript采用动态作用域，让我们分析下执行过程：执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。var foo=1; function bar( ) {   foo = 10;} bar( ); alert(foo);// 10// 实例2：var x = "globol value"; var getValue = function(){ alert(x);   var x = "local value"; alert(x);     }getValue();运行的结果是：undefined/local value// 实例3：var x=10;  function foo(){   alert(x);   var x=20;//无论x的值为多少，最后结果都是undefined  }  function bar(){   foo();  }  bar()；      console.log(a) // undefined  var a = 0  function fun(num1,num2) {  console.log(a) // undefined  var a = num1+num2  console.log(a) // 30  }  fun(10,20)  console.log(a) // 0</code></pre><h4 id="作用域链">作用域链</h4><p>JavaScript里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JavaScript引擎访问的内部属性。其中一个内部属性是[[Scope]]，，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p><p>当一个函数创建后，它的作用域链会被创建此函数的作用域中可访问的数据对象（如全局对象）填充。</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203010946677.png" alt="image-20220301094634370"></p><p>执行此函数时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。</p><p>这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端，当运行期上下文被销毁，活动对象也随之销毁。新的作用域链如下图所示：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203010948419.png" alt="image-20220301094840147"></p><p>在函数执行过程中，**每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。**该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。</p><h5 id="代码优化">代码优化</h5><p>分析：从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在<strong>编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。</strong></p><p>函数每次执行时对应的运行期上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个运行期上下文，当函数执行完毕，执行上下文会被销毁。每一个运行期上下文都和一个作用域链关联。一般情况下，在运行期上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。</p><h5 id="改变作用域链-with-catch">改变作用域链(with/catch)</h5><p>with语句是对象的快捷应用方式，用来避免书写重复代码。当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。</p><p>另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。请注意，一旦catch语句执行完毕，作用域链机会返回到之前的状态。try-catch语句在代码调试和异常处理中非常有用，因此不建议完全避免。你可以通过优化代码来减少catch语句对性能的影响。一个很好的模式是将错误委托给一个函数处理。优化后的代码，handleError方法是catch子句中唯一执行的代码。该函数接收异常对象作为参数，这样你可以更加灵活和统一的处理错误。由于只执行一条语句，且没有局部变量的访问，作用域链的临时改变就不会影响代码性能了。</p><h4 id="函数">函数</h4><p><a href="https://so.csdn.net/so/search?q=function&amp;spm=1001.2101.3001.7020">function</a> 这个关键字，既可以当做<strong>语句</strong>，也可以当做<strong>表达式</strong></p><pre class="language-none"><code class="language-none">//语句function fn() {};//表达式var fn = function (){};var id = 'GLOBAL';</code></pre><h5 id="立即执行函数">立即执行函数</h5><ol><li></li></ol><pre class="language-none"><code class="language-none">//立即执行函数的两种写法//第一种：用括号把整个函数定义和调用包裹起来(function(){ //function body}())//第二种：用括号把函数定义包裹起来，后面再加括号(function (){ //function body})()</code></pre><p>2.<strong>立即执行函数</strong>原理</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202250041598.png" alt="image-20220225004131435"></p><p>立即执行函数一般也写成匿名函数，匿名函数写法为function(){/…/}，所谓匿名函数，就是使用function关键字声明一个函数，但未给函数命名，倘若需要传值，直接将参数写到括号内即可。</p><p>将它赋予一个变量则创建函数表达式，赋予一个事件则成为事件处理程序等。但是需要注意的是匿名函数不能单独使用，否则会js语法报错，至少要用()包裹起来。</p><p>了解了立即函数的原理，就可以再扩展出其他的写法：</p><pre class="language-none"><code class="language-none">(function foo(){console.log("Hello World!")}())//用括号把整个表达式包起来,正常执行(function foo(){console.log("Hello World!")})()//用括号把函数包起来，正常执行!function foo(){console.log("Hello World!")}()//使用！，求反，这里只想通过语法检查。+function foo(){console.log("Hello World!")}()//使用+，正常执行-function foo(){console.log("Hello World!")}()//使用-，正常执行~function foo(){console.log("Hello World!")}()//使用~，正常执行void function foo(){console.log("Hello World!")}()//使用void，正常执行new function foo(){console.log("Hello World!")}()//使用new，正常执行</code></pre><p>3.立即执行函数的作用</p><blockquote><p>【一句话总结】立即执行函数会形成一个单独的作用域，我们可以封装一些临时变量或者局部变量，避免污染全局变量。</p></blockquote><p>4.与立即执行函数相关的面试题：</p><pre class="language-none"><code class="language-none">&lt;body&gt;    &lt;ul id="list"&gt;        &lt;li&gt;公司简介&lt;/li&gt;        &lt;li&gt;联系我们&lt;/li&gt;        &lt;li&gt;营销网络&lt;/li&gt;    &lt;/ul&gt;    &lt;script&gt;       var list = document.getElementById("list");      var li = list.children;      for(var i = 0 ;i&lt;li.length;i++){        li[i].onclick=function(){          alert(i);  // 结果总是3.而不是0，1，2        }      }     &lt;/script&gt;  &lt;/body&gt;为什么alert总是3? 因为i是贯穿整个作用域的，而不是给每一个li分配一个i,点击事件使异步，用户一定是在for运行完了以后，才点击，此时i已经变成3了。那么怎么解决这个问题呢，可以用立即执行函数，给每个li创建一个独立的作用域,在立即执行函数执行的时候，i的值从0到2，对应三个立即执行函数，这3个立即执行函数里边的j分别是0，1，2所以就能正常输出了，看下边例子：&lt;body&gt;    &lt;ul id="list"&gt;        &lt;li&gt;公司简介&lt;/li&gt;        &lt;li&gt;联系我们&lt;/li&gt;        &lt;li&gt;营销网络&lt;/li&gt;    &lt;/ul&gt;    &lt;script&gt;       var list = document.getElementById("list");      var li = list.children;      for(var i = 0 ;i&lt;li.length;i++){       ( function(j){            li[j].onclick = function(){              alert(j);          })(i); 把实参i赋值给形参j        }      }     &lt;/script&gt;  &lt;/body&gt;也可以使用ES6的块级作用域解决整个问题&lt;body&gt;    &lt;ul id="list"&gt;        &lt;li&gt;公司简介&lt;/li&gt;        &lt;li&gt;联系我们&lt;/li&gt;        &lt;li&gt;营销网络&lt;/li&gt;    &lt;/ul&gt;    &lt;script&gt;       var list = document.getElementById("list");      var li = list.children;      for(let i = 0 ;i&lt;li.length;i++){        li[i].onclick=function(){          alert(i);  // 结果是0，1，2        }      }     &lt;/script&gt;  &lt;/body&gt;</code></pre><p>5、立即执行函数使用的场景<br>1、你的代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等。<br>2、所有的这些工作只需要执行一次，比如只需要显示一个时间。<br>3、但是这些代码也需要一些临时的变量，但是初始化过程结束之后，就再也不会被用到，如果将这些变量作为全局变量，不是一个好的注意，我们可以用立即执行函数——去将我们所有的代码包裹在它的局部作用域中，不会让任何变量泄露成全局变量，看如下代码：<br><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202250047304.png" alt="image-20220225004702922"></p><p>比如上面的代码，如果没有被包裹在立即执行函数中，那么临时变量todaydom,days,today,year,month,date,day,msg都将成为全局变量（初始化代码遗留的产物）。用立即执行函数之后，这些变量都不会在全局变量中存在，以后也不会其他地方使用，有效的避免了污染全局变量。</p><p>6、立即执行函数的参数</p><pre class="language-none"><code class="language-none">(function(j){//代码中可以使用j})(i)</code></pre><p>如果立即执行函数中需要全局变量，全局变量会被作为一个参数传递给立即执行函数（上例中的i就是一个全局变量，i代表的是实参，j是i在立即执行函数中的形参）。</p><p>7、立即执行函数的返回值<br>像其他函数一样，立即执行函数也可以有返回值。除了可以返回基本类型值以外，立即执行函数也能返回任何类型的值，比如对象，函数。<br><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202250048024.png" alt="image-20220225004808915"></p><p>上例中立即执行函数的返回值被赋值给了一个变量result，这个函数简单的返回了res的值，这个值事先被计算并被存储在立即执行行数的闭包中。<br>在五中，如果在以后的代码中我需要msg这个值，我也可以返回一个包含msg的对象，方便在以后代码中使用（这样五中的一些临时变量也没有暴露在外面）。</p><p>8、总结立即执行函数有哪些作用？<br>1、改变变量的作用域（创建一个独立的作用域）上面试题例子<br>改变变量i的作用域，把全局变量i以参数的形式传递到立即执行函数中，在立即执行函数中定义变量i的形参变量j，变量j就是在立即执行函数的作用域中。（给每个li创建了一个作用域块，点击的时候寻找自由变量j，在立即执行块中找到）</p><p>2、封装临时变量</p><p>在7小点的代码中，可以封装临时变量，避免全局变量的污染。也可以返回一个在全局中需要的变量（用return）。</p><h4 id="Promise">Promise</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/image-20220223115123511.png" alt="image-20220223115123511"></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 面试题：异步同步执行</span>    <span class="token comment">//1 标杆 =&gt; 构造函数同步执行</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// .then() 异步执行</span>    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 1243</span><span class="token comment">// Promise 新建后立即执行，所以首先输出的是1，2。然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。</span>    <span class="token comment">//2 构造函数 执行一次</span>    <span class="token comment">// then可以多次调用</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'once'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 'once' 'success' 'success'</span></code></pre><p>.prototype…prototype.then()—如果只有一个函数则表示只有成功回调才会执行then中的方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果只有一个函数则表示只有成功回调才会执行then中的方法</span><span class="token comment">// then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// success</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// failure</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 采用链式的then</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/post/1.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">post</span> <span class="token operator">=&gt;</span> <span class="token function">getJSON</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>commentURL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">comments</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolved: "</span><span class="token punctuation">,</span> comments<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"rejected: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一个then方法指定的回调函数，返回的是另一个Promise对象。</span><span class="token comment">// 第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。</span><span class="token comment">// 如果变为resolved，就调用funcA，如果状态变为rejected，就调用funcB。</span></code></pre><p>.prototype.catch()</p><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ok</span><span class="token comment">// 上面代码中，Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</span></code></pre><p>.prototype.finally()—<code>finally</code>方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。<code>finally</code>本质上是<code>then</code>方法的特例。</p><p>all()—<code>Promise.all</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p>​— 只有p1、p2、p3的状态都变成fulfilled，有一个被rejected，p的状态就变成rejected</p><p>​— 如果作为参数的 Promise 实例，自己定义了<code>catch</code>方法，那么它一旦被<code>rejected</code>，并不会触发<code>Promise.all()</code>的<code>catch</code>方法。（该实例执行完<code>catch</code>(更像是捕获了这个rejected)方法后，也会变成<code>resolved</code>）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// p的状态由p1、p2、p3决定，分成两种情况。</span><span class="token comment">//（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</span><span class="token comment">// （2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</span><span class="token comment">// 下面是一个具体的例子。</span><span class="token comment">// 生成一个Promise对象的数组</span><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'/post/'</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">".json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["hello", Error: 报错了]</span>上面代码中，p1会resolved，p2首先会rejected，但是p2有自己的catch方法，该方法返回的是一个新的 Promise 实例，p2指向的实际上是这个实例。该实例执行完catch方法后，也会变成resolved，导致Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法参数里面的两个实例都会resolved，因此会调用then方法指定的回调函数，而不会调用catch方法指定的回调函数。<span class="token comment">// 如果p2没有自己的catch方法，就会调用Promise.all()的catch方法。</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Error: 报错了</span></code></pre><p>Promise.any() ：任意一个 promise 被 resolve ，就会立即被 resolve ，并且 resolve 的是第一个正确结果，只有所有的 promise 都 reject 时才会 reject 所有的失败信息</p><p>race()—将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p>​—只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p><pre class="language-none"><code class="language-none">// 如果指定时间内没有获得结果，就将 Promise 的状态变为reject，否则变为resolve。const p = Promise.race([  fetch('/resource-that-may-take-a-while'),  new Promise(function (resolve, reject) {    setTimeout(() =&gt; reject(new Error('request timeout')), 5000)  })]);p.then(console.log).catch(console.error);// 上面代码中，如果 5 秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。</code></pre><p>.resolve()—将现有对象转为 Promise 对象</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token comment">// 等价于</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>（<span class="token number">1</span>）参数是一个 Promise 实例如果参数是 Promise 实例，那么Promise<span class="token punctuation">.</span>resolve将不做任何修改、原封不动地返回这个实例。（<span class="token number">2</span>）参数是一个thenable对象thenable对象指的是具有then方法的对象，比如下面这个对象。<span class="token keyword">let</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span>resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。<span class="token keyword">let</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>thenable<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 42</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出 <span class="token number">42</span>。（<span class="token number">3</span>）参数不是具有then方法的对象，或根本就不是对象如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise<span class="token punctuation">.</span>resolve方法返回一个新的 Promise 对象，状态为resolved。<span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello</span>上面代码生成一个新的 Promise 对象的实例p。由于字符串Hello不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是resolved，所以回调函数会立即执行。Promise<span class="token punctuation">.</span>resolve方法的参数，会同时传给回调函数。（<span class="token number">4</span>）不带有任何参数Promise<span class="token punctuation">.</span>resolve方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise<span class="token punctuation">.</span>resolve方法。<span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// one</span><span class="token comment">// two</span><span class="token comment">// three</span><span class="token function">上面代码中，setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>在下一轮“事件循环”开始时执行，Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在本轮“事件循环”结束时执行，console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span>则是立即执行，因此最先输出。</code></pre><p>reject()—返回一个新的 Promise 实例，该实例的状态为<code>rejected</code>。</p><pre class="language-none"><code class="language-none">const p = Promise.reject('出错了');// 等同于const p = new Promise((resolve, reject) =&gt; reject('出错了'))p.then(null, function (s) {  console.log(s)});// 出错了上面代码生成一个 Promise 对象的实例p，状态为rejected，回调函数会立即执行。注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。const thenable = {  then(resolve, reject) {    reject('出错了');  }};Promise.reject(thenable).catch(e =&gt; {  console.log(e === thenable)})// true上面代码中，Promise.reject方法的参数是一个thenable对象，执行以后，后面catch方法的参数不是reject抛出的“出错了”这个字符串，而是thenable对象。</code></pre><p>try()</p><p>那么有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用<code>async</code>函数来写。</p><pre class="language-none"><code class="language-none">(async () =&gt; f())().then(...).catch(...)</code></pre><p>第二种写法是使用<code>new Promise()</code>。。。</p><pre class="language-none"><code class="language-none">const f = () =&gt; console.log('now');(  () =&gt; new Promise(    resolve =&gt; resolve(f())  ))();console.log('next');// now// next</code></pre><p>事实上，<code>Promise.try</code>就是模拟<code>try</code>代码块，就像<code>promise.catch</code>模拟的是<code>catch</code>代码块。</p><h4 id="手写Promise">手写Promise</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简单版本</span><span class="token comment">// 链式调用版</span></code></pre><h4 id="fetch和ajax的区别">fetch和ajax的区别</h4><p>fetch是xhr的替代品。<br>ajax利用XMLHttpRequest对象来请求数据。</p><h5 id="原生的ajax">原生的ajax</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error:::'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"demo.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"MyHeader"</span><span class="token punctuation">,</span> <span class="token string">"MyValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>注意点：<span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法接收一个参数，作为请求主体发送的数据。如果不需要发送数据最好传入<span class="token keyword">null</span>，因为参数对有些浏览器来说是必须的<span class="token function">必须在调用open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>之前指定onreadystatechange事件处理程序才能确保跨浏览器 兼容性<span class="token function">要成功发送请求头部信息，必须在调用open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">方法之后且调用send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">方法之前调用setRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>fetch 是全局量 window 的一个方法。特点：</p><p>fetch是基于promise实现的，也可以结合async/await。<br>fetch请求默认是不带cookie的，需要设置fetch（URL，{credentials:’include’})<br>Credentials的三种参数：omit（从不发送cookie），same-origin（同源发送），include（始终发送）<br>服务器返回400、500 状态码时并不会reject，只有网络出错导致请求不能完成时，fetch才会被reject<br>所有版本的 IE 均不支持原生 Fetch</p><h4 id="跨域问题">跨域问题</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">由于浏览器的同源策略会导致跨域，同源策略又分为一：<span class="token constant">DOM</span>同源策略：禁止对不同源页面的<span class="token constant">DOM</span>进行操作，主要是不同域名的ifram是限制互相访问的二：xmlHttpRequest同源策略：禁止使用<span class="token constant">XHR</span>对象向不同源的服务器地址发起http请求，只要域名  协议  端口有一个不同都被当做不同的域之间的请求，即跨域请求解决方式：<span class="token number">1</span>、<span class="token constant">CORS</span>跨域资源共享   后端需要设置Access<span class="token operator">--</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span><span class="token boolean">true</span><span class="token number">2</span>、<span class="token constant">JSONP</span>。利用<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>标签不发生跨域的特点，在服务器链接的参数中加入callback回调函数，通过这个回调函数获取服务端要传来的值。只能用于<span class="token constant">GET</span>请求。<span class="token number">3</span>、 nginx代理跨域，设置代理服务器转发。这种方式实际上还是同源。因为服务器之间的通信不存在跨域的问题，所以可以设置一个与客户端同源的代理服务器作为中间人。（代理是设置哪一项）<span class="token number">4</span>、nodejs中间件代理跨域<span class="token number">5</span>、WebSokect协跨域<span class="token number">6</span>、window<span class="token punctuation">.</span>name<span class="token operator">+</span>ifram跨域</code></pre><h4 id="jsonp原理">jsonp原理</h4><p><strong>jsonp</strong>的核心则是动态添加<script>标签来调用<strong>服务器</strong>提供的<strong>js脚本</strong>。只支持GET方法</p><p>通过动态添加script标签，利用其中的src属性并不被同源策略所约束，向src属性中添加查询参数和callback回调函数作为参数，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据进行传递，实现服务器端向客户端通信。</p><h4 id="this指向问题">this指向问题</h4><h5 id="this-永远指向最后调用它的那个对象"><strong>this 永远指向最后调用它的那个对象</strong></h5><p>手写this指向的区别</p><pre class="language-none"><code class="language-none">console.log(this) &#x2F;&#x2F; windowfunction a() &#123;    console.log(this)&#125;a()&#x2F;&#x2F; windowlet b &#x3D; 1let o &#x3D; &#123;    b:2,    fn1: function() &#123;        console.log(this.b) &#x2F;&#x2F; 2    &#125;,    c:&#123;        b:3,        fn2:function() &#123;            console.log(this.b) &#x2F;&#x2F; 3        &#125;    &#125;&#125;o.fn1()o.c.fn2()&#x2F;&#x2F; let id &#x3D; 66 &#x2F;&#x2F; 不会挂到window&#x2F;&#x2F; var定义的变量会直接挂载到window上var id &#x3D; 66;function fn5()&#123;    &#x2F;&#x2F; 1. 箭头函数没有作用域 &#x3D;&gt; 没有this    setTimeout(() &#x3D;&gt; &#123;        console.log(this.id) &#x2F;&#x2F; window    &#125;, 500)&#125;&#x2F;&#x2F; fn5(&#123;id: 21&#125;)fn5.call(&#123;id: 21&#125;)&#x2F;&#x2F; call, apply, bind&#x2F;&#x2F; call, apply 传参的不同 改变 + 执行&#x2F;&#x2F; bind() 只改变this的指向，不会执行</code></pre><h5 id="怎么改变-this-的指向">怎么改变 this 的指向</h5><ul><li>使用 ES6 的箭头函数</li><li>在函数内部使用 <code>_this = this</code></li><li>使用 <code>apply</code>、<code>call</code>、<code>bind</code></li><li>new 实例化一个对象</li></ul><h5 id="箭头函数的this">箭头函数的this</h5><p>箭头函数的this会继承父执行上下文里面的this</p><p>如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</p><h5 id="this-this">_this = this</h5><p>先将调用这个函数的对象保存在变量 <code>_this</code> 中，然后在函数中都使用这个 <code>_this</code>，这样 <code>_this</code> 就不会改变了。</p><h4 id="setTimeout的this">setTimeout的this</h4><p>在setInterval和setTimeout中传入函数时，函数中的this会指向window对象，这是由于setTimeout或者setInterval调用的代码，是运行在与其所在函数完全分离的执行环境上。 这就会导致这些代码中包含的 this 关键字会指向 window (或全局)对象，但是在setTimeout或者setInterval中传入的不是函数时，this则指向当前对象</p><h5 id="bind、call和apply">bind、call和apply</h5><p>相同点：都可以改变this指向</p><p>区别：</p><p>bind不调用函数，返回一个新的函数，只有一个参数，指明this的指向<br>call会直接调用函数，call只有一个参数，指明this的指向<br>apply有两个参数，第二个参数一般为数组，apply将数组展开传给函数</p><h4 id="Object">Object</h4><h5 id="hasOwnProperty方法">hasOwnProperty方法</h5><p>hasOwnProperty() 方法会返回一个<a href="https://so.csdn.net/so/search?q=%E5%B8%83%E5%B0%94&amp;spm=1001.2101.3001.7020">布尔</a>值，指示对象自身属性中（非继承属性）是否具有指定的属性，</p><p>无法通过obj.hasOwnProperty(prop)判断继承属性</p><pre class="language-none"><code class="language-none">obj&#x3D; new Object();obj.name &#x3D; &#39;刘家军&#39;;const a &#x3D; obj.hasOwnProperty(&#39;name&#39;);console.log(a); &#x2F;&#x2F; trueconst b &#x3D; obj.hasOwnProperty(&#39;toString&#39;);console.log(b); &#x2F;&#x2F; falseconst c &#x3D; obj.hasOwnProperty(&#39;hasOwnProperty&#39;);console.log(c); &#x2F;&#x2F; false</code></pre><p>如果要判断继承属性，通过<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%9E%8B%E9%93%BE&amp;spm=1001.2101.3001.7020">原型链</a>prototype判断</p><pre class="language-none"><code class="language-none">const d &#x3D; Object.prototype.hasOwnProperty(&#39;toString&#39;)console.log(d); &#x2F;&#x2F; trueconst e &#x3D; String.prototype.hasOwnProperty(&#39;split&#39;)console.log(e); &#x2F;&#x2F; true</code></pre><h4 id="原型与原型链">原型与原型链</h4><h5 id="prototype和-proto-的关系">prototype和__proto__的关系</h5><p>所有的对象都拥有_ proto _属性，它指向构造函数的prototype原型对象，最后指向Object.prototype(Object是一个原生函数，所有的对象都是Object的实例)。</p><p>所有的函数都同时拥有_ proto <em>和prototype属性，</em></p><p><em>函数的</em> _ proto _指向自己的函数实现，</p><p>函数的prototype是一个对象，所以函数的prototype也有_ proto _属性，指向Object.prototype。</p><p>Object.prototype._ proto _指向null（原型链的终点指向null）。</p><h5 id="构造函数、原型、实例的关系">构造函数、原型、实例的关系</h5><pre class="language-none"><code class="language-none">构造函数中有一个prototype指针指向原型，原型中也有一个constructor指针指向构造函数。实例中有一个内部属性__proto__指向原型。查找方式是一层一层查找，直至顶层。Object.prototype</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先创建一个person1的空对象，然后把person1通过__proto__指向原型对象，指向构造函数中的代码，person1就获得了一个叫做name的属性，</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 1</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">welcome</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>welcome<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Smiley'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 9</span>person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token comment">// 每一个javascript对象(除null外)创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型中“继承”属性。</span><span class="token comment">// 从当前实例属性去查找，如果找了就返回，否则顺着原型链一层一层往上面找</span><span class="token comment">// 直到找到null为止，如果找到null都没有找到，报错，属性报undefine，方法报错</span><span class="token keyword">var</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  n<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  m<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1、undefined、2、3</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'a'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">var</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 放在自己的私有属性了</span> b1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'change'</span> b1<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'a'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">// ["green", "yellow", "black"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'change' </span></code></pre><p><img src="https://pic4.zhimg.com/80/v2-109c6159bd3523658b1f5bfc48acc47f_720w.jpg" alt="img"></p><p>一个新的对象有私有的属性，也有原型的属性</p><h5 id="使用new这个关键字的时候，JS编译器会做四件事情">使用new这个关键字的时候，JS编译器会做四件事情</h5><ol><li>创建一个新的空的对象</li><li>把这个对象链接到原型对象上，将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>如果这个函数有返回值，则返回；否则，就会默认返回新对象</li></ol><p>常规函数默认返回undefined，构造函数默认返回</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * new的过程文字描述：1.创建一个空对象 obj;2.将空对象的隐式原型（proto）指向构造函数的prototype。3.使用 call 改变 this 的指向4.如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。new 关键词执行之后总是会返回一个对象，要么是实例对象，要么是 return 语句指定的对象。 */</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi！我是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建空对象</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 隐式原型</span>  <span class="token comment">// 处理参数列表。参数列表包含了类和构造函数的参数</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>  <span class="token keyword">let</span> fn <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 将空对象的隐式原型（proto）指向构造函数的prototype。</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype  <span class="token comment">// 通过call改变this的指向</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token comment">// 返回</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="闭包">闭包</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 闭包是什么？—— 方法里返回一个方法</span>        <span class="token comment">// function a()&#123;</span>        <span class="token comment">//     let a1 = 1;</span>        <span class="token comment">//     return function()&#123;</span>        <span class="token comment">//         return a1</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// 2. 闭包存在的意义？</span>        <span class="token comment">// 2.1 延长变量的生命周期  </span>        <span class="token comment">// 2.2 创建私有环境</span><span class="token comment">// 为什么</span>        <span class="token comment">// 会生成一份临时的变量对象AO，存方法和局部变量，方法执行完b就回收了</span>        let a <span class="token operator">=</span> <span class="token string">'小明'</span>        function <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            let b <span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment">// console.log(a)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// console.log(b)</span><span class="token comment">// 作用域链：就近原则</span>        <span class="token comment">// let name = "小明"</span>        <span class="token comment">// function fn2()&#123;</span>        <span class="token comment">//     // let name = "小白"</span>        <span class="token comment">//     function fn3()&#123;</span>        <span class="token comment">//         // let name = "小红"</span>        <span class="token comment">//         console.log(name)</span>        <span class="token comment">//     &#125;</span>        <span class="token comment">//     fn3()</span>        <span class="token comment">// &#125;</span>        <span class="token comment">// fn2()</span><span class="token comment">// 全局对象可能会污染其他的局部变量，不会被垃圾回收机制回收</span><span class="token comment">// 闭包会常驻内存 => 慎用闭包</span></code></pre><p>key值得作用是什么？可以用数组的下表代替吗？</p><p>提供给dom唯一的值（让虚拟dom高效更新），不建议（1，多个数组，2，数组的增删的操作）</p><h5 id="data-为甚是一个函数？">data()为甚是一个函数？</h5><p>​     // 闭包 =&gt; 每一个组件都有自己的私有作用域，确保各组件数据不会相互干扰</p><p>​     // 纯对象 =&gt; 干扰 let obj = {}</p><h4 id="防抖节流">防抖节流</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>        <span class="token punctuation">.</span>box<span class="token punctuation">&#123;</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> green<span class="token punctuation">;</span>            width<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            height<span class="token operator">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>深入js防抖与节流<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>input placeholder<span class="token operator">=</span><span class="token string">"请输入电话"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">// 防抖 =>固定的时间内， 事件只允许发生一次</span>        <span class="token keyword">let</span> telInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>        telInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token function">antiShake</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 防抖封装</span>        <span class="token keyword">function</span> <span class="token function">antiShake</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> timeOut <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> contex <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">let</span> args <span class="token operator">=</span> arguments                <span class="token keyword">if</span><span class="token punctuation">(</span>timeOut<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeOut<span class="token punctuation">)</span>                timeOut <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>contex<span class="token punctuation">,</span>args<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发起请求'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 节流 => 一定时间内的多个事情合为一个</span>        <span class="token comment">// 应用场景 => 1. 提交表单  2. 高频监听事件</span>        <span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span>        box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> contex <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">let</span> args <span class="token operator">=</span> arguments                <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">func</span><span class="token punctuation">(</span>contex<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 通过时间戳</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="内存泄漏及导致的原因及解决办法">内存泄漏及导致的原因及解决办法</h4><p>不再用到的内存，没有及时释放，就叫做内存泄漏。</p><p>常见的导致内存泄露的原因有： 1；意外的全局变量 2；被遗忘的计时器或回调函数 3；脱离文档的DOM的引用 4；闭包</p><h5 id="解决办法">解决办法</h5><p>有addListener就得有removeListener。在mounted的时候注册的监听，在beforeDestroy时候销毁。</p><h4 id="垃圾回收机制">垃圾回收机制</h4><p>标记清除</p><p>垃圾回收机制在运行的时候会给存储在内存中的所有变量都加上标记(可以是任何标记方式)，然后，它会去掉处在环境中的变量 及被环境中的变量引用的变量标记(闭包)。而在此之后剩下的带有标记的变量被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后垃圾回收机制到下一个周期运行时，将释放这些变量的内存，回收它们所占用的空间。</p><p>引用计数</p><p>记录每个对象被引用的次数，每次新建对象、赋值引用和删除引用的同时更新计数器，如果计数器值为0则直接回收内存。</p><p>引用计数（reference counting）。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是 1。如果同一个值又被赋给另一个变量，则该值的引用次数加 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 1。当这个值的引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。</p><p>引用计数策略有一个很严重的问题：<strong>循环引用。</strong><br>如果对象 A 中包含一个指针指向对象 B，而对象 B 中也包含一个指针指向对象 A。那么这两个对象引用次数都是 2，但实际上已经可以回收了。若这种函数被反复多次调用，会导致大量内存得不到回收。</p><h4 id="堆内存和栈内存">堆内存和栈内存</h4><p>栈内存：存放基本数据类型String、Number、undefined、Boolean、null</p><p>堆内存：存放引用类型Object、Array、Function、Date、RegExp、包装类型（Boolean、Number、String）</p><h4 id="什么是事件委托（事件代理），事件委托有哪些优点？">什么是事件委托（事件代理），事件委托有哪些优点？</h4><p>事件委托就是将事件绑定到父元素上，根据事件的冒泡，当子元素处理事件时会自动触发父元素的事件。通过判断事件对象event的target可以找到时间实际发生的子元素。</p><p>优点：提高性能、动态监听。提高性能是因为减少了事件监听的数量，动态监听是指当增加一个子元素时，该子元素自动拥有父级元素上绑定的事件。</p><p>举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。</p><h4 id="作用域、作用域链">作用域、作用域链</h4><p>js没有块作用域，只有函数作用域。函数内部的函数可以访问到外函数中的变量，他们都可以访问到全局作用域中的变量，全局执行环境的变量对象始终是作用域链中的最后一个对象。</p><p>es6中的let、const可以达到块级作用域的效果。、</p><h4 id="冒泡和捕获">冒泡和捕获</h4><p>冒泡是从内向外，捕获是从外向内。<br>冒泡一般会在讲事件委托的时候提到。</p><h4 id="模块化">模块化</h4><h5 id="CommonJs">CommonJs</h5><p>用于后端node和前端webpack</p><p>接口：module.exports和require</p><p>特点：</p><p>模块输出的是一个值的拷贝，模块是运行时加载，同步加载<br>CommonJS 模块的顶层this指向当前模块<br>AMD（Asynchronous Module Definition，异步模块定义）<br>浏览器端模块化开发的规范，require.js为AMD规范的实现<br>接口：define、require、config<br>特点：异步加载，不阻塞页面的加载，能并行加载多个模块，但是不能按需加载，必须提前加载所需依赖</p><h5 id="ES6-module">ES6 module</h5><p>接口：import、export、export default<br>内嵌在网页中的用法：</p><pre class="language-none"><code class="language-none">&lt;script type&#x3D;&quot;module&quot;&gt;  import utils from &quot;.&#x2F;utils.js&quot;;  &#x2F;&#x2F; other code&lt;&#x2F;script&gt;</code></pre><p>此时不能用file协议，否则会报跨域的错误<br>特点：</p><p>ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this<br>自动采用严格模式&quot;use strict&quot;。须遵循严格模式的要求<br>ES6 模块的设计思想是尽量的静态化，编译时加载”或者静态加载，编译时输出接口<br>ES6 模块export、import命令可以出现在模块的任何位置，但是必须处于模块顶层。如果处于块级作用域内，就会报错<br>ES6模块输出的是值的引用</p><p>Tree-Shaking<br>介绍：消除无用的代码，减少js包的大小，从而减少页面的加载时间。</p><p>原理：找到有用的代码打包进去。依赖es6的module模块，tree shaking会分析文件项目里具体哪些代码被引入了，哪些没有引入，然后将真正引入的代码打包进去，最后没有使用到的代码自然就不会存在了。</p><h4 id="require和import的区别">require和import的区别</h4><p>require 和 import 分别是不同模块化规范下引入模块的语句</p><p>出现的时间、地点不同</p><p>不同端(客户端/服务器)的使用限制：CommonJS 模块化方案 require/exports 是为服务器端开发设计的。在浏览器端，因为其<strong>异步加载脚本文件</strong>的特性，CommonJS 规范无法正常加载。</p><p>require/exports 是运行时动态加载，import/export 是静态编译</p><p>require/exports 输出的是一个值的拷贝，import/export 模块输出的是值的引用</p><p>用法不一致：import/export 不能对引入模块重新赋值/定义，ES6 模块可以在 import 引用语句前使用模块，CommonJS 则需要先引用后使用。import/export 只能在模块顶层使用，不能在函数、判断语句等代码块之中引用；require/exports 可以。是否采用严格模式：import/export 导出的模块默认调用严格模式，require/exports 默认不使用严格模式，可以自定义是否使用严格模式。 例如</p><h4 id="js的事件执行机制">js的事件执行机制</h4><p>Event Loop和宏任务微任务</p><pre class="language-none"><code class="language-none">js是一个单线程语言，所以所有的任务只能排队一个一个去做，这样效率明显很低。所以event loop就是为解决这个问题而提出的。在主程序中，分为两个线程，一个运行程序本身，称作主线程，另一个负责主线程和其它线程进行通信（主要是I&#x2F;O操作），被称作event loop线程在运行程序的时候，当遇到I&#x2F;O操作的时候，主线程就让Event loop 线程通知相应的I&#x2F;O模块去执行，然后主线程接着执行之后的代码，等到I&#x2F;O结束后，event loop线程再把运行结果交给主线程，然后主线程再执行相应的回调，整个任务结束。宏任务 微任务宏任务（macro-task）：一般是 JS 引擎和宿主环境发生通信产生的回调任务，比如 setTimeout，setInterval 是浏览器进行计时的，其中回调函数的执行时间需要浏览器通知到 JS 引擎，网络模块, I&#x2F;O处理的通信回调也是。包含有 setTimeout，setInterval，DOM事件回调，ajax请求结束后的回调，整体 script 代码，setImmediate。微任务（micro-task）：一般是宏任务在线程中执行时产生的回调，如 Promise，process.nextTick，Object.observe(已废弃)， MutationObserver（DOM监听），这些都是 JS 引擎自身可以监听到回调。常见的宏任务有：setTimeout setTimeInterval常见的微任务有：&quot;MutationObserver、Promise.then(或.reject) 以及以 Promise 为基础开发的其他技术(比如fetch API), 还包括 V8 的垃圾回收过程&quot;上面我们了解了宏任务与微任务的分类，那么为什么我们要将其分为宏任务与微任务呢？主要是因为其添加到事件循环中的任务队列的机制不同。在事件循环中，任务一般都是由宏任务开始执行的（JS代码的加载执行），在宏任务的执行过程中，可能会产生新的宏任务和微任务，这时候宏任务（如ajax回调）会被添加到任务队列的末尾等待事件循环机制执行，而微任务则会被添加到当前任务队列的前端，也是等待事件循环机制的执行。其中相同类型的宏任务或微任务会按照回调的先后顺序进行排序，而不同任务类型的任务会有一定的优先级，按照不同类型任务区分宏任务优先级，主代码块 &gt; setImmediate &gt; MessageChannel &gt; setTimeout &#x2F; setInterval微任务优先级，process.nextTick &gt; Promise &gt; MutationObservernextTickprocess.nextTick 是一个独立于 eventLoop 的任务队列。在每一个 eventLoop 阶段完成后会去检查这个队列，如果里面有任务，会让这部分任务优先于微任务执行。</code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F;主线程直接执行console.log(&#39;1&#39;);&#x2F;&#x2F;丢到宏事件队列中setTimeout(function() &#123;    console.log(&#39;2&#39;);    process.nextTick(function() &#123;        console.log(&#39;3&#39;);    &#125;)    new Promise(function(resolve) &#123;        console.log(&#39;4&#39;);        resolve();    &#125;).then(function() &#123;        console.log(&#39;5&#39;)    &#125;)&#125;)&#x2F;&#x2F;微事件1process.nextTick(function() &#123;    console.log(&#39;6&#39;);&#125;)&#x2F;&#x2F;主线程直接执行new Promise(function(resolve) &#123;    console.log(&#39;7&#39;);    resolve();&#125;).then(function() &#123;    &#x2F;&#x2F;微事件2    console.log(&#39;8&#39;)&#125;)&#x2F;&#x2F;丢到宏事件队列中setTimeout(function() &#123;    console.log(&#39;9&#39;);    process.nextTick(function() &#123;        console.log(&#39;10&#39;);    &#125;)    new Promise(function(resolve) &#123;        console.log(&#39;11&#39;);        resolve();    &#125;).then(function() &#123;        console.log(&#39;12&#39;)    &#125;)&#125;)• 首先浏览器执行js进入第一个宏任务进入主线程, 直接打印console.log(&#39;1&#39;)• 遇到 setTimeout  分发到宏任务Event Queue中• 遇到 process.nextTick 丢到微任务Event Queue中• 遇到 Promise， new Promise 直接执行 输出 console.log(&#39;7&#39;);• 执行then 被分发到微任务Event Queue中•第一轮宏任务执行结束，开始执行微任务 打印 6,8•第一轮微任务执行完毕，执行第二轮宏事件，执行setTimeout•先执行主线程宏任务，在执行微任务，打印&#39;2,4,3,5&#39;•在执行第二个setTimeout,同理打印 ‘9,11,10,12’•整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。以上是在浏览器环境下执行的数据，只作为宏任务和微任务的分析，我在node环境下测试打印出来的顺序为：1，7，6，8，2，4，9，11，3，10，5，12。node环境执行结果和浏览器执行结果不一致的原因是：浏览器的Event loop是在HTML5中定义的规范，而node中则由libuv库实现。libuv库流程大体分为6个阶段：timers，I&#x2F;O callbacks，idle、prepare，poll，check，close callbacks，和浏览器的microtask，macrotask那一套有区别。</code></pre><h3 id="Nodejs">Nodejs</h3><h4 id="js的事件执行机制：">js的事件执行机制：</h4><h4 id="EventLoop">EventLoop</h4><p>在程序中设置两个线程：一个负责程序本身的运行，称为&quot;主线程&quot;；另一个负责主线程与其他进程（主要是各种I/O操作）的通信，被称为&quot;Event Loop线程&quot;（可以译为&quot;消息线程&quot;）。每当遇到I/O的时候，主线程就让Event Loop线程去通知相应的I/O程序，然后接着往后运行，所以不存在等待时间。等到I/O程序完成操作，Event Loop线程再把结果返回主线程。主线程就调用事先设定的回调函数，完成整个任务。由于多出了空闲时间，所以主线程得以运行更多的任务，这就提高了效率。这种运行方式称为&quot;<a href="https://en.wikipedia.org/wiki/Asynchronous_I/O">异步模式</a>&quot;（asynchronous I/O）或&quot;非堵塞模式&quot;（non-blocking mode）。</p><h5 id="三大关键阶段">三大关键阶段</h5><ol><li>timer：执行定时器时，如 setTimeout、setInterval，在 timers 阶段执行</li><li>poll：异步操作，比如文件I/O，网络I/O等，通过’data’、 'connect’等事件通知 JS 主线程并执行回调的，此阶段就是 poll 轮询阶段</li><li>check：这是一个比较简单的阶段，直接执行 setImmdiate 的回调。</li></ol><p>注意，若 2 阶段结束后，当前存在到时间的定时器，那么拿出来执行，eventLoop 将再回到 timer 阶段</p><h5 id="阶段流程概述">阶段流程概述</h5><ul><li>timers: 本阶段执行已经安排的 setTimeout() 和 setInterval() 的回调函数</li><li>IO / callbacks: 执行 I/O 异常的回调，如TCP 连接遇到 ECONNREFUSED</li><li>idle, prepare: 仅系统内部使用，只是表达空闲、预备状态(第2阶段结束，poll 未触发之前)</li><li>poll: 检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数），node 将在此处阻塞。</li><li>check: setImmediate() 回调函数在这里执行.</li><li>close callbacks: 一些准备关闭的回调函数，如：socket.on(‘close’, …)</li></ul><p>在每次运行的事件循环之间，Node.js 检查它是否在等待任何异步 I/O 或计时器，如果没有的话，则关闭干净。</p><h4 id="相关面试题">相关面试题</h4><pre class="language-text" data-language="text"><code class="language-text">console.log('start')setTimeout(() => &#123;  console.log('setTimeout')&#125;, 0)new Promise((resolve) => &#123;  console.log('promise')  resolve()&#125;)  .then(() => &#123;    console.log('then1')  &#125;)  .then(() => &#123;    console.log('then2')  &#125;)console.log('end')</code></pre><p>结果为：</p><pre class="language-text" data-language="text"><code class="language-text">start promiseendthen1then2setTimeout</code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F; setTimeout1setTimeout(() &#x3D;&gt; &#123;  console.log(1)  new Promise((resolve) &#x3D;&gt; &#123;    resolve()  &#x2F;&#x2F; Promise1  &#125;).then(() &#x3D;&gt; &#123;    console.log(2)  &#125;);&#125;)&#x2F;&#x2F; setTimeout2setTimeout(() &#x3D;&gt; &#123;  console.log(3)&#125;)new Promise((resolve) &#x3D;&gt; &#123;  console.log(4)  resolve()  console.log(5)&#x2F;&#x2F; Promise2&#125;).then(() &#x3D;&gt; &#123;  console.log(6)&#125;)console.log(7)new Promise((resolve) &#x3D;&gt; &#123;  resolve()&#x2F;&#x2F; Promise3&#125;).then(() &#x3D;&gt; &#123;  console.log(8)&#125;)</code></pre><p><img src="https://img2020.cnblogs.com/blog/1027993/202005/1027993-20200517201508564-925237420.png" alt="img"></p><p>分析出了任务队列后，我们就可以轻松得到打印顺序了</p><p>首先执行宏任务，按照从上至下的执行顺序依次打印 4 5 7</p><p>接着按照任务队列的先后顺序执行异步任务，依次打印 6 8 1 2 3</p><h4 id="JS为什么要区分微任务和宏任务">JS为什么要区分微任务和宏任务</h4><pre class="language-none"><code class="language-none">为了插队。一个Event Loop， Microtask 是在 Macrotask 之后调用，Microtask 会在下一个Event Loop 之前执行调用完，并且其中会将 Microtask 执行当中新注册的 Microtask 一并调用执行完，然后才开始下一次 Event loop，所以如果有新的 Macrotask 就需要一直等待，等到上一个 Event loop 当中 Microtask 被清空为止。由此可见， 我们可以在下一次 Event loop 之前进行插队。如果不区分 Microtask 和 Macrotask，那就无法在下一次 Event loop 之前进行插队，其中新注册的任务得等到下一个 Macrotask 完成之后才能进行，这中间可能你需要的状态就无法在下一个 Macrotask 中得到同步。状态的同步对于视图来说至关重要，这也就牵扯到了为什么 javascript 是单线程的原因所在</code></pre><h4 id="js为什么是单线程，有什么好处？">js为什么是单线程，有什么好处？</h4><p>js最初被设计用在浏览器中，假如js是多线程的，当第一个线程上的js与第二个线程上的js同时对一个dom进行操作时，这个dom就不知道该执行哪个线程上的指令。</p><h3 id="ES6">ES6</h3><h4 id="解构">解构</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token constant">ES6</span>相关面试题<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 解构相关</span>    <span class="token comment">// let a = 1;</span>    <span class="token comment">// let b = 2;</span>    <span class="token comment">// [a, b] = [b, a]</span>    <span class="token comment">// console.log(a, b)</span>        <span class="token comment">// let arr = [12, 43, 23, 12, 43, 55]</span>    <span class="token comment">// let item = [...new Set(arr)]</span>    <span class="token comment">// console.log(item)</span>    <span class="token comment">// 标杆 => 构造函数同步执行</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// .then() 异步执行</span>    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">// 构造函数 执行一次</span>    <span class="token comment">// then可以多次调用</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'conce'</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h4 id="proxy">proxy</h4><p><a href="https://so.csdn.net/so/search?q=Proxy&amp;spm=1001.2101.3001.7020">Proxy</a> 是 ES6 中新增的功能，可以用来自定义对象中的操作</p><p>每次获取proxy，这个proxy就会返回对data的深拷贝，而要对data中的属性进行增删查等操作，也是直接对proxy下手就行。通过对整个对象的代理，就避免了访问之前要明确data中有什么属性的这一个过程。这样就实现了一个解耦合的过程，避免了直接操作data对象。基本的使用示例如下。</p><h4 id="箭头函数与普通函数的区别">箭头函数与普通函数的区别</h4><p>1.普通函数作为对象的方法调用时，<code>this</code>指向它所属的对象。箭头函数中的<code>this</code>就<strong>永远指向</strong>它定义时所处的全局执行环境中的<code>this</code></p><p>2…call()/.apply()/.bind()无法改变箭头函数中this的指向。</p><p>3.箭头函数不能作为构造函数使用（原因：① JS内部首先会先生成一个对象；② 再把函数中的this指向该对象；③ 然后执行构造函数中的语句；④ 最终返回该对象实例。但是！！因为箭头函数没有自己的<code>this</code>，）</p><p>4.箭头函数没有自己的arguments，<strong>可以在箭头函数中使用rest参数代替arguments对象，来访问箭头函数的参数列表！！</strong></p><p>5.<strong>箭头函数没有原型prototype</strong></p><p>6.箭头函数不能用作Generator函数，不能使用yeild关键字</p><p>拓展：</p><h5 id="arguments">arguments</h5><p>因为arguments这个对象不能显式创建。arguments对象只有函数开始时才可用。</p><p>虽然arguments对象并不是一个数组（类数组），但是访问单个参数的方式与访问数组元素的方式相同</p><p><strong>arguments还有属性callee，length和迭代器Symbol。</strong></p><p><strong>callee</strong> 属性是 <strong>arguments</strong> 对象的一个成员，仅当相关函数正在执行时才可用。<strong>callee</strong> 属性的初始值就是正被执行的** Function** 对象。实现匿名的递归函数。</p><h5 id="rest运算符和spread操作符">rest运算符和spread操作符</h5><p>rest运算符用于获得传递给函数的参数列表，是一个数组。spread操作符主要用于数组构造和解构，以及在调用时将数组填入函数参数。</p><p>应用</p><pre class="language-none"><code class="language-none">let arrs1 &#x3D; [&#39;aa&#39;, &#39;bb&#39;];let arrs2 &#x3D; [&#39;cc&#39;, &#39;dd&#39;];&#x2F;&#x2F; 合并数组let arrs &#x3D; [...arrs1, ...arrs2];console.log(arrs); &#x2F;&#x2F; [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;dd&#39;]&#x2F;&#x2F; 析构数组let param1, param2;[param1, ...param2] &#x3D; arrs1;console.log(param1); &#x2F;&#x2F; aaconsole.log(param2); &#x2F;&#x2F; [&#39;bb&#39;]把类数组对象转换成数组，function testFunc() &#123;   &#x2F;&#x2F; 转换成数组   var toArray &#x3D; [...arguments];   console.log(toArray); &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;]   toArray.push(&#39;11&#39;);   &#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;11&#39;]   console.log(toArray); &#125;; &#x2F;&#x2F; 函数调用 testFunc(&#39;a&#39;, &#39;b&#39;);数组的深度拷贝var arr1 &#x3D; [1, 2];var arr2 &#x3D; arr1;arr1.push(3);console.log(arr1); &#x2F;&#x2F; [1, 2, 3]console.log(arr2); &#x2F;&#x2F; [1, 2, 3] 字符串转数组 var str &#x3D; &#39;kongzhi&#39;;var arr &#x3D; [...str];console.log(arr); &#x2F;&#x2F; [&quot;k&quot;, &quot;o&quot;, &quot;n&quot;, &quot;g&quot;, &quot;z&quot;, &quot;h&quot;, &quot;i&quot;]解构赋值&#x2F;&#x2F; 解构数组var arr &#x3D; [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;];let [a1, a2, a3] &#x3D; arr;console.log(a1); &#x2F;&#x2F; aaconsole.log(a2); &#x2F;&#x2F; bbconsole.log(a3); &#x2F;&#x2F; cc&#x2F;&#x2F; 对象解构var o &#x3D; &#123;a: 1, b: 2&#125;;var &#123;a, b&#125; &#x3D; o;console.log(a);  &#x2F;&#x2F; 1console.log(b);  &#x2F;&#x2F; 2</code></pre><h3 id="Vue">Vue</h3><h4 id="vue的三要素有哪些？"><strong>vue的三要素有哪些？</strong></h4><p>响应式、模板引擎、渲染。</p><p>渲染数据最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值。</p><h4 id="Vue-常用指令">Vue 常用指令</h4><p>使用了 vue 的指令后，表达式是 JS 表达式，变量是 VUE 实例中的数据属性。</p><pre class="language-none"><code class="language-none">v-if指令：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。v-show指令v-else指令v-for指令：：基于一个数组渲染一个列表v-model:让表单元素和数据实现双向绑定（映射关系）v-bind指绑定属性，注意冒号后面跟标签的属性，属性后面的等号指向数据，它可以简写为 :class, :href。用于响应地更新 HTML 特性。 是单向绑定，它在绑定文本时，当data中的数据发生变化时，页面中的数据也相应改变，但页面中的数据改变不会影响到data。v-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听&lt;a&gt;元素的点击事件：Vue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。v-text指令主要是防止页面首次加载时 &#123;&#123;&#125;&#125; 出现在页面上。将对象中数据变量值显示在绑定的标签内容上。computed：计算属性用来监听多个数据，每次页面加载，计算属性中的函数立即执行，但是只要原数据不被修改，那么，就不会触发重新计算，计算属性会使用计算后的缓存结果，只当原数据修改时，才会重新计算并将结果缓存起来。计算属性的计算结果可以当做data中的数据一样使用。计算属性用来监听多个属性，我们也可以使用它来监听一个属性，但是页面加载即执行计算并不符合我们的需求，如何只在数据被修改后出发相应事件，vue提供给我们的是watch，即侦听属性。vue提供给我们$refs来获取DOM元素</code></pre><h4 id="Model-View-VM">Model View VM</h4><p>Model 是数据, data<br>View 是模板<br>VM 是 vm = new Vue();</p><p>VM 用来连接数据和视图, 视图的输入框绑定了v-model, 用户输入后会改变data;</p><p>Model改变也会同步视图更新相关的依赖, 双向绑定就是vm起了作用</p><p><img src="https://oscimg.oschina.net/oscnet/bf38a328257bc88e39ee2887f9fc0d41b62.jpg" alt="bf38a328257bc88e39ee2887f9fc0d41b62.jpg"></p><h4 id="vue中ref的作用">vue中ref的作用</h4><p>本页面获取dom元素，获取子组件中的data，调用子组件中的方法</p><h4 id="vue的生命周期">vue的生命周期</h4><pre class="language-bash" data-language="bash"><code class="language-bash">Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。用户使用new Vue<span class="token punctuation">(</span><span class="token punctuation">)</span>新建一个vue实例，或父实例实例化子组件，确认组件的父子组件关系，将父组件的自定义事件传递给子组件，提供将render函数转化为vnode的方法beforeCreate: vue元素的挂载元素el和数据都为undefined，还未初始化；created：vue实例的数据对象data有了，el还没有；beforeMount：vue实例的<span class="token variable">$el</span>和data都初始化了，但是还挂载在之前的虚拟dom节点上，data.message还未替换；mounted：vue实例挂载完成，data.message成功渲染。更新前后：data变化时会触发beforeUpdate和updated方法；销毁前后：beforeDestory和destoryed，在执行destoryed方法后，对data的改变不会触发周期函数，说明vue实例已经解除了事件监听以及dom绑定，但是dom结构依然存在；vue生命周期的作用：他的生命周期中有多个事件钩子，让我们控制整个vue实例的过程时更容易形成良好的逻辑。生命周期钩子的一些使用方法：beforeCreate：loading事件，在加载实例时触发。created：初始化完成事件，异步请求。mounted：挂载元素，获取dom节点uptaded：对数据统一处理beforeDestory：确认事件停止。nextTick：更新数据后立即操作dom。</code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203021107080.png" alt="image-20220302110747389"></p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期"></p><h5 id="vue父子组件加载的时候周期执行顺序？">vue父子组件加载的时候周期执行顺序？</h5><p>父-&gt;父-&gt;父beforeMount</p><p>子-&gt;子mounted-&gt;父mounted</p><p>父组件挂载到vue实例上之前，必须确保子组件挂载到父组件上</p><h4 id="vue的渲染过程">vue的渲染过程</h4><h4 id="computed和watch的区别">computed和watch的区别</h4><pre class="language-vue" data-language="vue"><code class="language-vue">computed计算结果并返回，只有当被计算的属性发生改变时才会触发（即：计算属性的结果会被缓存，除非依赖的响应属性变化才会重新及孙）watch 监听某一个值，当被监听的值发生变化时，执行相关操作。（与computed的区别是，watch更加适用于监听某一个值得变化，并做对应操作，比如请求后太接口等。而computed适用于计算已有的值并返回结果。）监听简单数据类型：data()&#123;      return&#123;        &#39;first&#39;:2      &#125;    &#125;,    watch:&#123;      first()&#123;        console.log(this.first)      &#125;    &#125;,</code></pre><h4 id="json和xml数据的区别">json和xml数据的区别</h4><p>重轻，带宽，交互，数据描述性。</p><pre class="language-none"><code class="language-none">1、数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。。2、数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。3、数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互4、数据描述方面：json对数据的描述性比xml较差5、xml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。</code></pre><h4 id="v-show-和v-if">v-show 和v-if</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token parameter"><span class="token keyword">if</span>：不满足条件，不会渲染dom</span> <span class="token operator">=></span> 单次判断 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> v<span class="token operator">-</span><span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token parameter">隐藏dom</span> <span class="token operator">=></span> 多次切换<span class="token punctuation">,</span>（不能用于权限操作）<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"val == 1"</span><span class="token operator">></span>按钮一<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"val == 2"</span><span class="token operator">></span>按钮二<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"type"</span><span class="token operator">></span>type为<span class="token boolean">true</span>显示<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeType()"</span><span class="token operator">></span>改变type<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>v<span class="token operator">-</span><span class="token keyword">if</span>判断是否加载，可以减轻服务器的压力，在需要时加载<span class="token punctuation">,</span>但有更高的切换开销<span class="token punctuation">;</span>v<span class="token operator">-</span>show调整<span class="token constant">DOM</span>元素的<span class="token constant">CSS</span>的dispaly属性，可以使客户端操作更加流畅，但有更高的初始渲染开销。如果需要非常频繁地切换，则使用 v<span class="token operator">-</span>show 较好；如果在运行时条件很少改变，则使用 v<span class="token operator">-</span><span class="token keyword">if</span> 较好。v<span class="token operator">-</span><span class="token keyword">if</span>底层采用的是appendChild来实现的，v<span class="token operator">-</span>show通过样式的display控制标签的显示，正因为实现方式上面有差异，导致了他们的加载速度方面产生了差异；加载性能：v<span class="token operator">-</span><span class="token keyword">if</span>加载速度更快，v<span class="token operator">-</span>show加载速度慢切换开销：v<span class="token operator">-</span><span class="token keyword">if</span>切换开销大，v<span class="token operator">-</span>show切换开销小v<span class="token operator">-</span><span class="token keyword">if</span>是惰性的，它是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。v<span class="token operator">-</span>show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 <span class="token constant">CSS</span> 进行切换。一般来说，v<span class="token operator">-</span><span class="token keyword">if</span>有更高的切换开销，而v<span class="token operator">-</span>show有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用v<span class="token operator">-</span>show较好，如果在运行时条件很少改变，则使用v<span class="token operator">-</span><span class="token keyword">if</span>较好。</code></pre><h4 id="vue中如何解析模板？"><strong>vue中如何解析模板？</strong></h4><p>**<br>1、模板是什么？**</p><p>模板的本质是字符串，最开始是以字符串形式存在的，</p><p>它与html格式相似，却又存在很大区别，html是静态的，而模板中因为存在着一些循环、判断等逻辑，所以它是可以动态展示数据的，</p><p>模板最终还需要转换成html，以便显示。</p><p><strong>2、render函数</strong></p><p>因为字符串并不能处理逻辑，也因为模板需要转换成html渲染出来，这些都需要js来完成，</p><p>所以需要先将模板转换成js代码，这写需要通过一个js函数（render函数）来处理的。</p><p><img src="https://img2018.cnblogs.com/blog/1699448/201908/1699448-20190829164839823-1275201676.png" alt="img"></p><p>render函数解析：</p><p>​      ①模板中所有信息都包含在了render函数中</p><p>​      ②this即 vm</p><p>​      ③price即 this.price， 即 vm.price， 即data中的price</p><p>​      ④_c即 this._c，即 vm._c</p><h4 id="v-model双向数据绑定">v-model双向数据绑定</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>v-model原理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 1. 双向数据绑定 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入名字<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    显示值：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 劫持一个对象</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 取值，搜集，数据被操作了，可以获取到</span>            <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"取值"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"设置值"</span><span class="token punctuation">)</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// 获取键盘弹起事件</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"keyup"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// event</span>            obj<span class="token punctuation">.</span>username <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="vue是如何监听到data的每个属性变化的？"><strong>vue是如何监听到data的每个属性变化的？</strong></h4><p>通过**Object.defineProperty()**方法实现，<strong>Object.defineProperty()</strong> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</p><p>它接收的第三个参数中含有两个函数，分别是set()和get()，在这两个函数中就可以添加自定义的监听逻辑，从而达到监听数据变化的目的。</p><p>vue通过遍历data属性，在遍历函数中，利用**Object.defineProperty()**将每一个data属性绑定在vue对象上，同时添加监听逻辑，这样vue就可以监听到data属性的变化。</p><pre class="language-none"><code class="language-none">var vm&#x3D; &#123;&#125;;var data &#x3D; &#123;    name:&#39;zhangsan&#39;,    age:20&#125;;var key;for(key in data)&#123;    (function(key)&#123; &#x2F;&#x2F; 命中闭包，保证key的独立空间        Object.defineProperty(vm, key, &#123;            get:funtion()&#123;                &#x2F;&#x2F; 此处可写监听逻辑                return data[key];            &#125;,            set:function(newVal)&#123;                &#x2F;&#x2F; 此处可写监听逻辑                data[key] &#x3D; newVal;            &#125;        &#125;)    &#125;)(key)&#125;</code></pre><h4 id="虚拟dom-》真实dom（dispatch-算法）">虚拟dom=》真实dom（dispatch()算法）</h4><p>虚拟dom，vue2.0才有，跨平台特性：本质js对象，</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.初始化patch(container, vnode)  虚拟dom-->真实dom</span><span class="token comment">// 2.更新 update(vnode, newVnode)</span><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 虚拟dom组成三要素</span>    <span class="token keyword">let</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag     <span class="token comment">// 目标元素 ul</span>    <span class="token keyword">let</span> attrs <span class="token operator">=</span> vnode<span class="token punctuation">.</span>attrs <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 属性</span>    <span class="token keyword">let</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment">// 子节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 1.创建对应的dom</span>    <span class="token keyword">let</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>    <span class="token keyword">let</span> attrName    <span class="token comment">// 给dom添加属性</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>attrName <span class="token keyword">in</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>attrs<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> attrs<span class="token punctuation">[</span>attrName<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将子元素添加到目标之上</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">childVnode</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        elem<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>childVnode<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> elem<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 现有节点</span>    <span class="token keyword">let</span> newChildren <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 新节点</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">childrenVnode<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">// 循环每一项</span>        <span class="token keyword">let</span> newChildrenVnode  <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment">// 第一层没有变化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>childrenVnode <span class="token operator">===</span> newChildrenVnode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 深层次对比=>递归</span>            <span class="token function">updateChildren</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">,</span> newChildrenVnode<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 两个tag不一样</span>            <span class="token function">replaceNode</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">,</span> newChildrenVnode<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>虚拟dom是如何提升Vue渲染速度？将原来的直接操作dom（对浏览器的性能影响较大），变成js对象的操作（执行效率上的问题，对性能影响很小）</code></pre><h4 id="订阅发布模式">订阅发布模式</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 订阅器模型</span><span class="token keyword">let</span> Dep <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    clientList<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 容器</span>    <span class="token comment">// 添加订阅</span>    <span class="token function-variable function">listen</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 有没有数据</span>        <span class="token comment">// 短路表达式  fn:附送消息</span>        <span class="token comment">// true就直接出括号，false继续执行</span>        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 发布</span>    <span class="token function-variable function">trigger</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>            fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 如果没有这个人，这个人没有关注任何消息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 数据劫持</span><span class="token keyword">let</span> <span class="token function-variable function">dataHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> datakey<span class="token punctuation">,</span> selector <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> datakey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 取值</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"取值"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"设置值"</span><span class="token punctuation">)</span>            value <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token comment">// 发布,告诉目标对象并把新值传过去</span>            Dep<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 订阅</span>    Dep<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="数据的可观测（data-具体）">数据的可观测（data()具体）</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// Vue原理分析(四) ———— 变化侦测</span><span class="token comment">// data() &#123;&#125;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 数组的逻辑</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 对象的逻辑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// &#123;name: '小明', age: 18&#125;</span>        <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 循环 让对象的每一个属性都变成可观测的</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arguments.length为函数实参个数,这里相当于少声明了一个val(简单方法)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 对象的某个值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 递归</span>        <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        enumerable<span class="token operator">:</span>  <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 可枚举</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 可改变</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性被读取了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span> val        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性被修改了,新值为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newVal<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>            val <span class="token operator">=</span> newVal        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="nextTick">$nextTick()</h4><pre class="language-none"><code class="language-none">$nextTick()dom更新之后延迟回调A &#x3D;&gt; BB要加载到A中来$nextTick(&#123; this.$refs.b.dn()&#125;)</code></pre><h4 id="单页与多页的区别及优缺点">单页与多页的区别及优缺点</h4><pre class="language-none"><code class="language-none">单页应用(SPA): 只有一个主页面的应用组件 &#x3D;&gt; 页面片段跳转 &#x3D;&gt; 刷新局部资源场景 &#x3D;&gt; PC端优点：a. 体验好，快b. 改动内容，不用加载整个页面c. 前后端分离d. 效果可以很炫酷缺点：a. 不利于SEOb. 初次加载比较慢c. 页面复杂度很高多页应用：整页刷新</code></pre><h4 id="v-if与v-for">v-if与v-for</h4><p>v-for优先级 &gt; v-if</p><h4 id="Vue-router与location-href有什么区别">Vue-router与location.href有什么区别?</h4><p>location.href: 简单方便，刷新页面（跳外链）<br>Vue-router: 实现了按需加载，减少了dom消耗 （内部页面）<br>Vue-router =&gt; js原生history</p><h4 id="params和query">params和query</h4><p>params：<br>name引入<br><a href="http://this.$route.parms.xxx">this.$route.parms.xxx</a><br>类似于post传参，不显示的，加密的<br>刷新会丢失数据</p><p>query：<br>path引入 ,<br><a href="http://this.$route.query.xxx">this.$route.query.xxx</a><br>类似于get传参,显示在浏览器中<br>刷新不丢失数据</p><h4 id="created与mounted">created与mounted</h4><p>created: 在模板渲染成html之前调用 =&gt; 初始化某些值，再渲染成视图<br>mounted: 在模板渲染成html之后调用 =&gt; 初始化之后，对dom节点的一些操作</p><h4 id="route，router"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>，</mtext></mrow><annotation encoding="application/x-tex">route，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">，</span></span></span></span>router</h4><p>$router：是VueRouter的实例 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>u</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">router.push()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span>route：当前router跳转的对象，当前页的信息 name, path, query,parms</p><h4 id="每一个属性的可观测性的实现">每一个属性的可观测性的实现</h4><p>数据变化–及时侦测到</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// Vue原理分析(四) ———— 变化侦测</span><span class="token comment">// data() &#123;&#125;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 数组的逻辑</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 对象的逻辑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// &#123;name: '小明', age: 18&#125;</span>        <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 循环 让对象的每一个属性都变成可观测的</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arguments.length为函数实参个数,这里相当于少声明了一个val(简单方法)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 对象的某个值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 递归</span>        <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        enumerable<span class="token operator">:</span>  <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 可枚举</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 可改变</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性被读取了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span> val        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性被修改了,新值为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newVal<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>            val <span class="token operator">=</span> newVal        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="响应式—发布订阅模式-数据劫持">响应式—发布订阅模式+数据劫持</h4><p>模板用的什么数据源—》订阅</p><p>数据发生变化了—》发布，</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 订阅器模型let Dep &#x3D; &#123;    clientList: &#123;&#125;,  &#x2F;&#x2F; 容器    &#x2F;&#x2F; 添加订阅    listen: function (key, fn) &#123;        &#x2F;&#x2F; 有没有数据        &#x2F;&#x2F; 短路表达式  fn:附送消息        &#x2F;&#x2F; true就直接出括号，false继续执行        (this.clientList[key] || (this.clientList[key] &#x3D; [])).push(fn);    &#125;,    &#x2F;&#x2F; 发布    trigger: function () &#123;        let key &#x3D; Array.prototype.shift.call(arguments),            fns &#x3D; this.clientList[key];            &#x2F;&#x2F; 如果没有这个人，这个人没有关注任何消息        if (!fns || fns.length &#x3D;&#x3D;&#x3D; 0) &#123;            return false;        &#125;        for (let i &#x3D; 0, fn; fn &#x3D; fns[i++];) &#123;            fn.apply(this, arguments)        &#125;    &#125;&#125;&#x2F;&#x2F; 数据劫持let dataHi &#x3D; function (&#123; data, tag, datakey, selector &#125;) &#123;    let value &#x3D; &#39;&#39;,        el &#x3D; document.querySelector(selector);    Object.defineProperty(data, datakey, &#123;        &#x2F;&#x2F; 取值        get: function () &#123;            console.log(&quot;取值&quot;)            return value;        &#125;,        set: function (val) &#123;            console.log(&quot;设置值&quot;)            value &#x3D; val;            &#x2F;&#x2F; 发布,告诉目标对象并把新值传过去            Dep.trigger(tag, val)        &#125;    &#125;)    &#x2F;&#x2F; 订阅    Dep.listen(tag, function(text)&#123;        el.innerHTML &#x3D; text    &#125;)&#125;</code></pre><h3 id="Vuex">Vuex</h3><p>Vue.js应用程序的状态管理模式+库。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、state保存vuex中的数据源，通过<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state获取<span class="token number">2</span>、getters用于监听state中的值的变化，返回计算后的结果。getter的返回值会根据它的依赖被缓存起来<span class="token number">3</span>、mutations是修改state中的值得唯一方式<span class="token number">4</span>、action 官方建议提交一个actions，在actions中提交mutations再去修改状态值。 <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">)</span><span class="token comment">//this.$store.commit('add')</span><span class="token number">5</span>、modules 模块化</code></pre><h4 id="为什么vuex中推荐通过提交mutations的方式来修改state，而不是直接修改state？">为什么vuex中推荐通过提交mutations的方式来修改state，而不是直接修改state？</h4><pre class="language-none"><code class="language-none">因为state是实时更新的，mutations无法进行异步操作，而如果直接修改state的话是能够异步操作的，当你异步对state进行操作时，还没执行完，这时候如果state已经在其他地方被修改了，这样就会导致程序存在问题了。所以state要同步操作，通过mutations的方式限制了不允许异步。</code></pre><h4 id="Vuex是什么-什么场景使用？数据持久化">Vuex是什么?什么场景使用？数据持久化?</h4><p>是什么：全局状态管理，多个组件需要共享数据状态会用到<br>场景：音乐播放器，登录状态校验，加入购物车。1兄弟间组件传值（子组件传给共同的父组件，父组件再传给子组件）2.跨级组件传值</p><p>events-bus，数据量不大，且不需要同步。</p><p>数据持久化: 存在本地缓存</p><pre class="language-none"><code class="language-none">引入一个store实例，并把这个实例挂载到vue实例中，使用了Vue.use(vuex) 所以必定有一个install方法，install&#x3D;&gt;注册流程，Store</code></pre><h3 id="vue-router-跳转方式">vue router 跳转方式</h3><pre class="language-none"><code class="language-none">跳转到不同的url，但这个方法会向history栈添加一个记录，点击后退会返回到上一个页面。 this.$router.push(&#123;path: &#39;&#x2F;home&#x2F;sort&#x2F;detail&#39;,query:&#123;id: &#39;abc&#39;&#125;&#125;)      获取参数 &#123;&#123;this.$route.query.userId&#125;&#125; this.$router.push(&#123;name: &#39;detail&#39;,params:&#123;id: &#39;abc&#39;&#125;&#125;)获取参数：&#123;&#123;this.$route.params.userId&#125;&#125;ps:query要用path来引入，params要用name来引入：egthis.$router.push(&#123;   name:&quot;detail&quot;,   params:&#123;    name:&#39;nameValue&#39;,    code:10011 &#125;&#125;);　query更加类似于我们ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示1、this.$router.replace()同样是跳转到指定的url，但是这个方法不会向history里面添加新的记录，点击返回，会跳转到上上一个页面。上一个记录是不存在的。2、this.$router.go(n)相对于当前页面向前或向后跳转多少个页面,类似 window.history.go(n)。n可为正数可为负数。正数返回上一个页面1) 根据路由路径（&#x2F;home&#x2F;sort&#x2F;detail）跳转 &lt;router-link :to&#x3D;&quot;&#123;path: &#39;&#x2F;home&#x2F;sort&#x2F;detail&#39;, query:&#123;id: &#39;abc&#39;&#125;&#125;&quot;&gt;点击查看子页面&lt;&#x2F;router-link&gt;2) 根据路由名称（detail）跳转 &lt;router-link :to&#x3D;&quot;&#123;name: &#39;detail&#39;, params:&#123;id: &#39;abc&#39;&#125;&#125;&quot;&gt;点击查看子页面&lt;&#x2F;router-link&gt;    :to&#x3D;&quot;&quot; 可以实现绑定动态的 路由 和 参数</code></pre><h5 id="分布式路由">分布式路由</h5><h3 id="webpack">webpack</h3><h4 id="概念问题一：什么是webpack和grunt和gulp有什么不同">概念问题一：什么是webpack和grunt和<a href="https://so.csdn.net/so/search?q=gulp&amp;spm=1001.2101.3001.7020">gulp</a>有什么不同</h4><p>答案：Webpack是一个模块打包器，他可以递归的打包项目中的所有模块，最终生成几个打包后的文件。他和其他的工具最大的不同在于他支持code-splitting、模块化(AMD，ESM，CommonJs)、全局分析。</p><h4 id="概念问题二：什么是bundle-什么是chunk，什么是module">概念问题二：什么是bundle,什么是chunk，什么是<a href="https://so.csdn.net/so/search?q=module&amp;spm=1001.2101.3001.7020">module</a>?</h4><p>答案：bundle是由webpack打包出来的文件，chunk是指webpack在进行模块的依赖分析的时候，代码分割出来的代码块。module是开发中的单个模块。</p><h4 id="概念问题三：什么是Loader-什么是Plugin">概念问题三：什么是Loader?什么是Plugin?</h4><p>答案：</p><p>1）Loaders是用来告诉webpack如何转化处理某一类型的文件，并且引入到打包出的文件中。</p><p>2）Plugin是用来自定义webpack打包过程的方式，一个插件是含有apply方法的一个对象，通过这个方法可以参与到整个webpack打包的各个流程(生命周期)。</p><h4 id="配置问题-如何可以自动生成webpack配置？">配置问题:如何可以自动生成webpack配置？</h4><p>答案： webpack-cli /vue-cli /etc …脚手架工具</p><h4 id="开发问题一：webpack-dev-server和http服务器如nginx有什么区别">开发问题一：webpack-dev-server和http服务器如nginx有什么区别?</h4><p>答案：webpack-dev-server使用内存来存储webpack开发环境下的打包文件，并且可以使用模块热更新，他比传统的http服务对开发更加简单高效。</p><h4 id="开发问题二-什么-是模块热更新？">开发问题二:什么 是模块热更新？</h4><p>答案:模块热更新是webpack的一个功能，他可以使得代码修改过后不用刷新浏览器就可以更新，是高级版的自动刷新浏览器。</p><h4 id="优化问题一：什么是长缓存？在webpack中如何做到长缓存优化？">优化问题一：什么是长缓存？在webpack中如何做到长缓存优化？</h4><p>答案：浏览器在用户访问页面的时候，为了加快加载速度，会对用户访问的静态资源进行存储，但是每一次代码升级或是更新，都需要浏览器去下载新的代码，最方便和简单的更新方式就是引入新的文件名称。在webpack中可以在output纵输出的文件指定chunkhash,并且分离经常更新的代码和框架代码。通过NameModulesPlugin或是HashedModuleIdsPlugin使再次打包文件名不变。</p><h4 id="优化问题二：什么是Tree-shaking-CSS可以Tree-shaking吗">优化问题二：什么是Tree-shaking?CSS可以Tree-shaking吗?</h4><p>答案：Tree-shaking是指在打包中去除那些引入了，但是在代码中没有被用到的那些死代码。在webpack中Tree-shaking是通过uglifySPlugin来Tree-shaking JS。Css需要使用Purify-CSS。</p><h4 id="作用">作用</h4><p>依赖管理：方便引用第三方模块、让模块更容易复用、避免全局注入导致的冲突、避免重复加载或加载不需要的模块。</p><p>合并代码：把各个分散的模块集中打包成大文件，减少HTTP的请求链接数，配合UglifyJS可以减少、优化代码的体积。</p><p>各路插件：babel把ES6+转译成ES5-，eslint可以检查编译期的错误……</p><h4 id="实现原理">实现原理</h4><p>原理：最简单地说，就是分析代码，找到require、exports、define等“关键词”，并替换成对应模块的“引用“-</p><p>webpack的理念就是一切皆模块，把一大堆的css,js在一个总入口文件require引入，剩下的事情，webpack会自动处理，包括所有模块的前后端依赖关系打包压缩合并成一个js，公共代码抽离另外生成位js，某些制定的js单独打包…这些模块可以是css/js/image/fonts。</p><h4 id="babel原理">babel原理</h4><p>babel工作分为三大阶段：</p><p>解析<br>将代码字符串解析为抽象语法树；<br>将整个代码分割成语法单元，进而再分析语法单元之间的关系；<br>这一步会验证语法的正确性，同时由字符串变为对象结构后更有利于精准地分析以及进行代码结构调整。<br>转换<br>遍历抽象树，对抽象语法树进行再变换；这一步是babel或者其他编译器中最为复杂的过程。<br>生成<br>递归变换后的抽象语法树再生成代码字符串。</p><h4 id="plugin和loader的区别">plugin和loader的区别</h4><p>loader 用于加载某些资源文件。</p><p>因为 webpack 只能理解 JavaScript 和 JSON 文件，对于其他资源例如 css，图片，或者其他的语法集，比如 jsx， coffee，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。从字面意思也能看出，loader是用于加载的，它作用于一个个文件上。</p><p>plugin 用于扩展webpack的功能。</p><p>它直接作用于 webpack，扩展了它的功能。当然loader也是变相的扩展webpack，但是它只专注于转化文件（transform）这一个领域。而plugin的功能更加的丰富，而不仅局限于资源的加载。</p><h3 id="HTTP">HTTP</h3><h4 id="网络分层结构">网络分层结构</h4><p>计算机网络体系大致分为三种，OSI七层模型、TCP/IP四层模型和五层模型。一般面试的时候考察比较多的是五层模型。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/1Wxib6Z0MOJbCRJHmV85OCNfEPABbFy4jWaicoBxAibzialdR51yuOzbm1xhzkWH2hs80OCCN0lvxicwH4v4M05SFFw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>TCP/IP五层模型：应用层、传输层、网络层、数据链路层、物理层。</p><ul><li><strong>应用层</strong>：为应用程序提供交互服务。在互联网中的应用层协议很多，如域名系统DNS、HTTP协议、SMTP协议等。</li><li><strong>传输层</strong>：负责向两台主机进程之间的通信提供数据传输服务。传输层的协议主要有传输控制协议TCP和用户数据协议UDP。</li><li><strong>网络层</strong>：选择合适的路由和交换结点，确保数据及时传送。主要包括IP协议。</li><li><strong>数据链路层</strong>：在两个相邻节点之间传送数据时，<strong>数据链路层将网络层交下来的 IP 数据报组装成帧</strong>，在两个相邻节点间的链路上传送帧。</li><li><strong>物理层</strong>：实现相邻节点间比特流的透明传输，尽可能屏蔽传输介质和物理设备的差异。</li></ul><h4 id="常见状态码及含义">常见状态码及含义</h4><p>1xx 信息性状态码，表示接收的请求正在处理</p><p>100（请求已被部分处理）、101（切换协议）<br>2xx 成功状态码，表示请求正常处理完毕</p><p>200（请求成功）、204（请求处理成功，但没有内容返回）、206（返回指定范围的内容）<br>3xx 重定向状态码，表示需要进行附加操作以完成请求</p><p>301（永久重定向）、302（临时重定向）、303（临时重定向，但要求使用GET方法）、304（请求资源未更改，直接使用缓存）<br>4xx 客户端错误状态码，表示服务器无法处理请求</p><p>400（请求出错）、401（未授权）、403（被服务器拒绝访问，跨域）、404（服务器上没有请求的资源）<br>5xx 服务器错误状态码，表示服务器请求出错</p><p>500（服务器内部错误）、503（服务器暂时无法处理请求）<br>这里需要注意一下 200 和 304 在浏览器协商缓存下的作用。</p><h4 id="GET和POST的区别">GET和POST的区别</h4><p>安全性：Get是不安全的，因为在传输过程，参数被放在请求的URL中，请求一次；Post的所有操作对用户来说都是不可见的，参数放在requestbody中，请求两次<br>数据量：Get传送的数据量较小，这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。<br>参数类型：Get只接受ASCII字符；而Post没有限制。<br>效率：Get执行效率却比Post方法好。Get是form提交的默认方法。<br>部分浏览器：GET请求会被浏览器主动cache，而POST请求不会，除非手动设置。GET请求的参数会被完整保存在浏览器的历史纪录里面，而POST参数不会。</p><p>回退：GET在浏览器回退时是无害的，而POST会再次提交请求。</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>总的来说：</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><h4 id="http和https的区别，https的优点缺点">http和https的区别，https的优点缺点</h4><pre class="language-none"><code class="language-none">Http：超文本传输协议（Http，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。设计Http最初的目的是为了提供一种发布和接收HTML页面的方法。它可以使浏览器更加高效。Http协议是以明文方式发送信息的，如果黑客截取了Web浏览器和服务器之间的传输报文，就可以直接获得其中的信息。Https：是以安全为目标的Http通道，是Http的安全版。Https的安全基础是SSL。SSL协议位于TCP&#x2F;IP协议与各种应用层协议之间，为数据通讯提供安全支持。SSL协议可分为两层：SSL记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL握手协议（SSL Handshake Protocol），它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。HTTP与HTTPS的区别1、HTTP是超文本传输协议，信息是明文传输，HTTPS是具有安全性的SSL加密传输协议。2、HTTPS协议需要ca申请证书，一般免费证书少，因而需要一定费用。3、HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样。前者是80，后者是443。4、HTTP连接是无状态的，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，安全性高于HTTP协议。https的优点尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。Https的缺点1）Https协议握手阶段比较费时，会使页面的加载时间延长近。2）Https连接缓存不如Http高效，会增加数据开销，甚至已有的安全措施也会因此而受到影响；3）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。4）Https协议的加密范围也比较有限。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</code></pre><h4 id="HTTPS工作原理：">HTTPS工作原理：</h4><pre class="language-none"><code class="language-none">客户使用 https url 访问服务器，则要求 web 服务器建立 ssl 链接。 web 服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥）传输给客户端。客户端和 web 服务器端开始协商 SSL 链接的安全等级，也就是加密等级。 客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过服务器的公钥来加密会话密钥，并传送给服务器。 web 服务器通过自己的私钥解密出会话密钥。 web 服务器通过会话密钥加密与客户端之间的通信。 </code></pre><h4 id="HTTP状态码有哪些？">HTTP状态码有哪些？</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/1Wxib6Z0MOJbCRJHmV85OCNfEPABbFy4jtiaKYpP94XeYQUD2UQbdqQp45icPBWQEs3wWtn62UVFicYOg92ozxOcBQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h4 id="HTTP1-0和HTTP1-1的区别">HTTP1.0和HTTP1.1的区别?</h4><ul><li><strong>长连接</strong>：HTTP1.0默认使用短连接，每次请求都需要建立新的TCP连接，连接不能复用。<strong>HTTP1.1支持长连接，复用TCP连接，允许客户端通过同一连接发送多个请求</strong>。不过，这个优化策略也存在问题，当一个队头的请求不能收到响应的资源时，它将会阻塞后面的请求。这就是“<strong>队头阻塞</strong>”问题。</li><li><strong>断点续传</strong>：HTTP1.0 <strong>不支持断点续传</strong>。HTTP1.1 新增了 <strong>range</strong> 字段，用来指定数据字节位置，<strong>支持断点续传</strong>。</li><li><strong>错误状态响应码</strong>：在HTTP1.1中新增了24个错误状态响应码，如<code>409（Conflict）</code>表示请求的资源与资源的当前状态发生冲突、<code>410（Gone）</code>表示服务器上的某个资源被永久性的删除。</li><li><strong>Host头处理</strong>：在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名。到了HTTP1.1时代，虚拟主机技术发展迅速，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址，故HTTP1.1增加了HOST信息。</li></ul><h4 id="HTTP1-1和-HTTP2-0的区别？">HTTP1.1和 HTTP2.0的区别？</h4><p>HTTP2.0相比HTTP1.1支持的特性：</p><ul><li><strong>新的二进制格式</strong>：HTTP1.1 基于文本格式传输数据；HTTP2.0采用二进制格式传输数据，解析更高效。</li><li><strong>多路复用</strong>：在一个连接里，允许同时发送多个请求或响应，<strong>并且这些请求或响应能够并行的传输而不被阻塞</strong>，避免 HTTP1.1 出现的”队头堵塞”问题。</li><li><strong>头部压缩</strong>，HTTP1.1的header带有大量信息，而且每次都要重复发送；HTTP2.0 把header从数据中分离，并封装成头帧和数据帧，<strong>使用特定算法压缩头帧</strong>，有效减少头信息大小。并且HTTP2.0**在客户端和服务器端记录了之前发送的键值对，对于相同的数据，不会重复发送。*<em>比如请求a发送了所有的头信息字段，请求b则*<em>只需要发送差异数据</em></em>，这样可以减少冗余数据，降低开销。</li><li><strong>服务端推送</strong>：HTTP2.0允许服务器向客户端推送资源，无需客户端发送请求到服务器获取。</li></ul><h4 id="HTTPS与HTTP的区别？">HTTPS与HTTP的区别？</h4><ol><li>HTTP是超文本传输协议，信息是<strong>明文传输</strong>；HTTPS则是具有<strong>安全性</strong>的ssl加密传输协议。</li><li>HTTP和HTTPS用的端口不一样，HTTP端口是80，HTTPS是443。</li><li>HTTPS协议<strong>需要到CA机构申请证书</strong>，一般需要一定的费用。</li><li>HTTP运行在TCP协议之上；HTTPS运行在SSL协议之上，SSL运行在TCP协议之上。</li></ol><h4 id="客户端怎么知道给证书公钥的是服务器呢？怎么判断第三方伪造证书">客户端怎么知道给证书公钥的是服务器呢？怎么判断第三方伪造证书</h4><p>数字证书本身已经提供方案了，数字证书中除了包含加密之后的服务器公钥，权威机构的信息之外，还包含了证书内容的签名(先通过Hash函数计算得到证书数字摘要，然后用权威机构私钥加密数字摘要得到数字签名)，签名计算方法以及证书对应的域名。这样一来，客户端收到证书之后：</p><p>使用权威机构的公钥解密数字证书，得到证书内容（服务器的公钥）以及证书的数字签名，然后根据证书上描述的计算证书签名的方法计算一下当前证书的签名，与收到的签名作对比，如果一样，表示证书一定是服务器下发的，没有被中间人篡改过。因为中间人虽然有权威机构的公钥，能够解析证书内容并篡改，但是篡改完成之后中间人需要将证书重新加密，但是中间人没有权威机构的私钥，无法加密，强行加密只会导致客户端无法解密，如果中间人强行乱修改证书，就会导致证书内容和证书签名不匹配。所以证书签名就能判断证书是否被篡改</p><p>简单过程<strong>浏览器验证过程</strong>：</p><ol><li>获取证书，得到证书内容、证书签名算法和数字签名。</li><li>用CA机构的公钥<strong>对数字签名解密</strong>（由于是浏览器信任的机构，所以浏览器会保存它的公钥）。</li><li>用证书里的签名算法<strong>对证书内容进行hash运算</strong>。</li><li>比较解密后的数字签名和对证书内容做hash运算后得到的哈希值，相等则表明证书可信。\</li></ol><h4 id="HTTP是使用TCP还是UDP">HTTP是使用TCP还是UDP</h4><p><strong>虽然HTTP最初被设计成无状态的协议，似乎更加适合UDP，但是下面一些原因使TCP成为首选：</strong></p><ul><li>HTTP使用TCP，因为当从远程服务器获得文件，网页不应该在中途丢弃，而应该按照HTTP客户端的顺序交付。</li><li>HTTP也可以使用UDP，但通常不会，如果包括网页第一部分的UDP数据包丢失了，那么它就不会被重传。**当我们使用UDP协议时，需要在应用层编写一些代码来处理丢失数据包的重传。但我们并不想让web浏览器应用层来承担这项工作，让它只承担实际的渲染页面工作，**这也符合解耦的设计。所以我们使用TCP。</li></ul><p><img src="https://pic1.zhimg.com/50/v2-71e2b180adf8bdc57f5c7df0bb3a4b01_720w.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-71e2b180adf8bdc57f5c7df0bb3a4b01_720w.jpg?source=1940ef5c" alt="img"></p><p>简言之，<strong>HTTP并没有重复实现任何基本的TCP特性。HTTP被定义在TCP上运行，从广义上可以理解:HTTP可以在任何类似TCP协议上运行</strong>（实现了面向连接，完整性，纠错，滑动窗口的协议）</p><h4 id="输入一个网站的域名地址发生了什么？">输入一个网站的域名地址发生了什么？</h4><pre class="language-bash" data-language="bash"><code class="language-bash">输入一个域名后对于一些浏览器来说会从历史记录、书签等地方，找到已经输入的字符串可能对应的URL，如果没找到：就去浏览器缓存：浏览器缓存DNS会记录一段时间，然而操作系统并没有告诉浏览器每个DNS记录的生存时间，因此浏览器会将其缓存一段固定的时间（一般在2到30分钟之间）操作系统缓存：如果浏览器缓存不包含所需的记录，则搜索操作系统中的DNS缓存和hosts文件。路由器缓存：请求继续到您的路由器，路由器通常具有自己的DNS缓存。ISP DNS缓存：检查的下一个是ISP的DNS缓存，这里自然也会有一个缓存。如果没有，则否则递归依次向根域名服务器、顶级域名服务器、权限域名服务器发起查询请求，最终返回IP地址给本地域名服务器，需要知道dns解析是很耗时的，因此如果解析域名过多，会让首屏加载变得过慢，可以考虑dns-prefetch优化本地域名服务器将得到的IP地址返回给操作系统，同时自己也将IP地址缓存起来。操作系统将 IP 地址返回给浏览器，同时自己也将IP地址缓存起来。浏览器得到域名对应的IP地址，得到ip地址后就开始与服务器建立TCP连接了，TCP三次连接：第一次握手，首先是客户端随机生成一个起始序列号x，向这个ip地址发送一个包含标志位SYN<span class="token operator">=</span><span class="token number">1</span>，序列号seq<span class="token operator">=</span>x。第一次握手前客户端的状态为CLOSE，第一次握手后客户端的状态为SYN-SENT。此时服务端的状态为LISTEN。第二次握手：服务端在收到客户端发来的报文后，会随机生成一个服务端的起始序列号y，然后给客户端回复一段报文，其中包括标志位SYN<span class="token operator">=</span><span class="token number">1</span>，ACK<span class="token operator">=</span><span class="token number">1</span>，序列号seq<span class="token operator">=</span>y，确认号ack<span class="token operator">=</span>x+1。第二次握手前服务端的状态为LISTEN，第二次握手后服务端的状态为SYN-RCVD，此时客户端的状态为SYN-SENT。（其中SYN<span class="token operator">=</span><span class="token number">1</span>表示要和客户端建立一个连接，ACK<span class="token operator">=</span><span class="token number">1</span>表示确认序号有效）。第三次握手：客户端收到服务端发来的报文后，会再向服务端发送报文，其中包含标志位ACK<span class="token operator">=</span><span class="token number">1</span>，序列号seq<span class="token operator">=</span>x+1，确认号ack<span class="token operator">=</span>y+1。第三次握手前客户端的状态为SYN-SENT，第三次握手后客户端和服务端的状态都为ESTABLISHED。此时连接建立完成。请求的方法差异：get和post的区别get和post虽然本质都是tcp/ip，但两者除了在http层面外，在tcp/ip层面也有区别。get会产生一个tcp数据包，post两个具体就是：get请求时，浏览器会把headers和data一起发送出去，服务器响应200（返回数据），post请求时，浏览器先发送headers，服务器响应100 continue， 浏览器再发送data，服务器响应200（返回数据）。涉及到五层因特网协议栈：从应用层的发送http请求，到传输层通过三次握手建立tcp/ip连接，再到网络层的ip寻址，再到数据链路层的封装成帧，最后到物理层的利用物理介质传输。负载均衡：对于大型项目，如果并发量比较大的话，用户发起的请求就会通过反向代理服务器，根据实际的调度算法，分配不同的请求给对应集群中的服务器执行，然后反向代理服务器等待实际服务器的HTTP响应，并将它反馈给用户后端的操作：一般有的后端是有统一的验证的，如安全拦截，跨域验证，如果这一步不符合规则，就直接返回了相应的http报文（如拒绝请求等）。然后当验证通过后，才会进入实际的后台代码，此时是程序接收到请求，然后执行（譬如查询数据库，大量计算等等）。等程序执行完毕后，就会返回一个http响应包（一般这一步也会经过多层封装）。然后就是将这个包从后端发送到前端，完成交互http报文结构：通过报文发送数据，报文的内容有请求行，请求头部，空行（CRLF），请求数据；服务器接收到保温后，返回相应的报文，报文由状态行，响应头部，空行，响应数据。请求行：请求码，请求方法。一般来说，请求头部和响应头部是匹配分析的。譬如，请求头部的Accept要和响应头部的Content-Type匹配，否则会报错譬如，跨域请求时，请求头部的Origin要匹配响应头部的Access-Control-Allow-Origin，否则会报跨域错误譬如，在使用缓存时，请求头部的If-Modified-Since、If-None-Match分别和响应头部的Last-Modified、ETag对应三、传输数据连接后，客户端向服务端发起 HTTP 请求，服务器接收到请求后，返回请求静态资源，并同时调用 apache 服务器请求接口数据。四、关闭 TCP 连接数据传输完成，客户端与服务端进行四次挥手，关闭连接。五、渲染页面对于浏览器根据服务端返回的静态资源，浏览器使用 Native GUI 引擎渲染 HTML 和 CSS ；使用 JS 引擎加载 JS 。浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow<span class="token punctuation">(</span>回流<span class="token punctuation">)</span>和repain<span class="token punctuation">(</span>重绘<span class="token punctuation">)</span>。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow<span class="token punctuation">;</span>当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。JS的解析是由浏览器中的JS解析引擎完成的。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务<span class="token punctuation">(</span>synchronous<span class="token punctuation">)</span>和异步任务<span class="token punctuation">(</span>asynchronous<span class="token punctuation">)</span>。JS的执行机制就可以看做是一个主线程加上一个任务队列<span class="token punctuation">(</span>task queue<span class="token punctuation">)</span>。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈<span class="token punctuation">;</span>异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环<span class="token punctuation">(</span>Event loop<span class="token punctuation">)</span>。浏览器在解析过程中，如果遇到请求外部资源时，如图像,iconfont,JS等。浏览器将重复1-6过程下载该资源。请求过程是异步的，并不会影响HTML文档进行加载，但是当文档加载过程中遇到JS文件，HTML文档会挂起渲染过程，不仅要等到文档中JS文件加载完毕还要等待解析执行完毕，才会继续HTML的渲染过程。原因是因为JS有可能修改DOM结构，这就意味着JS执行完成前，后续所有资源的下载是没有必要的，这就是JS阻塞后续资源下载的根本原因。CSS文件的加载不影响JS文件的加载，但是却影响JS文件的执行。JS代码执行前浏览器必须保证CSS文件已经下载并加载完毕四次挥手A的应用进程先向其TCP发出连接释放报文段（FIN<span class="token operator">=</span><span class="token number">1</span>，seq<span class="token operator">=</span>u），并停止再发送数据，主动关闭TCP连接，进入FIN-WAIT-1（终止等待1）状态，等待B的确认。B收到连接释放报文段后即发出确认报文段（ACK<span class="token operator">=</span><span class="token number">1</span>，ack<span class="token operator">=</span>u+1，seq<span class="token operator">=</span>v），B进入CLOSE-WAIT（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。A收到B的确认后，进入FIN-WAIT-2（终止等待2）状态，等待B发出的连接释放报文段。B发送完数据，就会发出连接释放报文段（FIN<span class="token operator">=</span><span class="token number">1</span>，ACK<span class="token operator">=</span><span class="token number">1</span>，seq<span class="token operator">=</span>w，ack<span class="token operator">=</span>u+1），B进入LAST-ACK（最后确认）状态，等待A的确认。A收到B的连接释放报文段后，对此发出确认报文段（ACK<span class="token operator">=</span><span class="token number">1</span>，seq<span class="token operator">=</span>u+1，ack<span class="token operator">=</span>w+1），A进入TIME-WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL（最大报文段生存时间）后，A才进入CLOSED状态。B收到A发出的确认报文段后关闭连接，若没收到A发出的确认报文段，B就会重传连接释放报文段。</code></pre><h4 id="TCP三次握手">TCP三次握手</h4><p>最开始的时候，客户端和服务端都是Closed(关闭)状态，准备发送连接请求前，Server会进入LISTEN(监听)状态。</p><ul><li><strong>第一次握手：</strong> 客户端(Client)会给服务端(Server)发送请求报文段，并指定同步序列号SYN = 1，初始序号为seq = x，（seq里面就是字节的序号），同时TCP的客户端进程进入SYN-SENT(同步已发送)状态。</li><li><strong>第二次握手：</strong> 服务端收到客户端发送的请求报文SYN后，会向客户端发送一个SYN报文作为应答，表示同意建立连接，同时指定了自己的SYN = 1， ACK = 1，还会向客户端发送seq = y，来表示自己的一个初始序号，同时也会告诉客户端下一次应该从哪开始发送的确认序号，由于客户端发送过来的初始序号seq = x, 所以确认序号ack = x + 1，这时，TCP的服务端进入SYN-RCVD(同步收到)状态。</li><li><strong>第三次握手：</strong> 客户端收到服务端的确认报文之后，会再次向服务端发送确认信息，表示已经收到。所以ACK = 1, seq = x + 1, ack = y + 1。TCP建立连接，客户端和服务器进入ESTAB-LISTEND(已建立连接状态)状态。</li></ul><h4 id="为什么三次握手？">为什么三次握手？</h4><p>因为假如之握手两次的话，客户端第一次向服务端发送建立请求的请求，可能由于网络延时的原因滞留了，而客户端迟迟没有收到服务端的响应就会认为这个请求失效了，客户端会再次往服务端发送一个连接请求，然后服务端正常响应了。之后的某个时间，客户端第一次给服务端发送的请求到达了服务端，服务端就会响应客户端的连接，客户端发现自己发送过这个请求就会忽略，而此时已经两次握手成功了，服务端会一直等待响应，而客户端也不知道，这样就造成了资源的浪费。</p><h4 id="TCP四次挥手">TCP四次挥手</h4><p>1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。<br>2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。<br>3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。<br>4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ACK = 1, ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。<br>5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。<br>6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/1Wxib6Z0MOJbCRJHmV85OCNfEPABbFy4jBHwsEdl9eOVbcqohJk80ZIq2NsH0Y1hTKGL7Liafszvdp65cHOUqic1w/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/1Wxib6Z0MOJbCRJHmV85OCNfEPABbFy4jcsBA9hUMJ3DWD4zqRDfE5WkTu1CeedicrLrW9NWdjV0ThR9EFFczmHg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h4 id="第四次挥手为什么要等待2MSL？">第四次挥手为什么要等待2MSL？</h4><ul><li><strong>保证A发送的最后一个ACK报文段能够到达B</strong>。这个<code>ACK</code>报文段有可能丢失，B收不到这个确认报文，就会超时重传连接释放报文段，然后A可以在<code>2MSL</code>时间内收到这个重传的连接释放报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到<code>CLOSED</code>状态，若A在<code>TIME-WAIT</code>状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的连接释放报文段，所以不会再发送一次确认报文段，B就无法正常进入到<code>CLOSED</code>状态。</li><li><strong>防止已失效的连接请求报文段出现在本连接中</strong>。A在发送完最后一个<code>ACK</code>报文段后，再经过2MSL，就可以使这个连接所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接请求报文段。</li></ul><h4 id="为什么是四次挥手？">为什么是四次挥手？</h4><p>因为当Server端收到Client端的<code>SYN</code>连接请求报文后，可以直接发送<code>SYN+ACK</code>报文。<strong>但是在关闭连接时，当Server端收到Client端发出的连接释放报文时，很可能并不会立即关闭SOCKET</strong>，所以Server端先回复一个<code>ACK</code>报文，告诉Client端我收到你的连接释放报文了。只有等到Server端所有的报文都发送完了，这时Server端才能发送连接释放报文，之后两边才会真正的断开连接。故需要四次挥手。</p><h4 id="拥塞控制和流量控制">拥塞控制和流量控制</h4><p>拥塞避免：</p><p>慢开始，拥塞避免：初始时，拥塞窗口值为1，慢开始门限为16，在慢开始阶段，拥塞窗口呈指数增长，遇到慢开始门限时(如果超过了，就设置为门限值)，就改用拥塞避免算法，拥塞窗口按线性增长，遇到拥塞时门限值设为当前拥塞窗口的1/2，将拥塞窗口值重置为1。</p><p>快重传（直接重传），快恢复：当发送方接收到冗余的ACK时，就采用快重传和快恢复。快恢复：将拥塞窗口值和门限值都设为发生拥塞时窗口值得1/2，直接从拥塞算法开始。</p><p>流量控制：流量控制就是让发送方的发送速率不要太快，要让接收方来的及接收。原理是通过确认报文中窗口字段来控制发送方的发送速率，发送方的发送窗口大小不能超过接收方给出窗口大小。</p><h4 id="TCP的定义和UDP的区别">TCP的定义和UDP的区别</h4><p>TCP是传输控制协议。UDP是用户数据包协议</p><p><strong>安全的，可靠的，面向连接的传输。不安全的，不可靠的，无连接的传输</strong></p><p>可靠的服务，通过TCP连接传送的数据，无差错、不丢失，不重复，按序到达；UDP尽最大努力交付，不保证可靠交付。</p><p>TCP面向字节流，UDP则是面向报文的</p><p>TCP首部开销20字节； UDP的首部开销小，只有8个字节</p><p>TCP有<strong>拥塞控制</strong>；UDP没有拥塞控制，</p><h4 id="为什么需要WebSocket？">为什么需要WebSocket？</h4><p>因为 HTTP 协议有一个缺陷：通信只能由客户端发起。这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用<a href="https://www.pubnub.com/blog/2014-12-01-http-long-polling/">&quot;轮询&quot;</a>：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。于是就有了WebSocket，它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息</p><p>在main.js中建立一个websocket连接，同时将socket实例挂在到vue原型链上，以便在组件中可以调用相关方法，在组件中调用注册回调函数，将函数注册到，然后调用send方法发送数据的方法，返回一个res。关闭页面后注意取消注册</p><h4 id="JWT">JWT</h4><p>jwt 有三部分组成：A.B.C</p><p>A：Header，{“type”:“JWT”,“alg”:“HS256”} typ表示类型为jwt格式,alg表示加密方式为hs256,exp表示时间</p><p>B：playload，存放信息，比如，用户id，过期时间等等，可以被解密，不能存放敏感信息</p><p>C: 签证，A和B加上秘钥 加密而成，只要秘钥不丢失，可以认为是安全的。</p><p>jwt 验证，主要就是验证C部分 是否合法。</p><h4 id="JWT的优点和缺点">JWT的优点和缺点</h4><pre class="language-none"><code class="language-none">解决跨域问题：这种基于Token的访问策略可以克服cookies的跨域问题。服务端无状态可以横向扩展，Token可完成认证，无需存储Session。系统解耦，Token携带所有的用户信息，无需绑定一个特定的认证方案，只需要知道加密的方法和密钥就可以进行加密解密，有利于解耦。防止跨站点脚本攻击，没有cookie技术，无需考虑跨站请求的安全问题。缺点：jwt一旦发送不能撤回发送的信息不能防止CSRF攻击等</code></pre><h4 id="JWT实现原理">JWT实现原理</h4><pre class="language-none"><code class="language-none">把header和playload分别使用base64url编码,接着用&#39;.&#39;把两个编码后的字符串连接起来，再把这拼接起来的字符串配合密钥进行HMAC SHA-256算法加密，最后再次base64编码下，这就拿到了签名sign. 最后把header和playload和sign用&#39;.&#39;连接起来就生成了整个JWT后端服务校验jwtToken是否有权访问接口服务，进行解密认证，如校验访问者的userid，首先用将字符串按.号切分三段字符串，分别得到header和playload和sign。然后将header.playload拼装用密钥和HAMC SHA-256算法进行加密然后得到新的字符串和sign进行比对，如果一样就代表数据没有被篡改，然后从头部取出exp对存活期进行判断，如果超过了存活期就返回空字符串，如果在存活期内返回userid的值整个jwt的结构是由header.playload.sign连接组成，只有sign是用密钥加密的，而所有的信息都在header和playload中可以直接获取，sign的作用只是校验header和playload的信息是否被篡改过，所以jwt不能保护数据，但以上的特性可以很好的应用在权限认证上</code></pre><h4 id="关于-token-的存储问题">关于 token 的存储问题</h4><p>JWT：</p><p>csrf 攻击无法获取第三方的 cookie，而是直接使用 cookie进行查询的时候会自动携带 cookie。</p><p>xss攻击通过代码注入可以获取 cookie。需要设置转义。</p><p>方式一、客户端使用 cookie直接认证，需要设置 cookie为 httpOnly，可以防止 xss攻击。但是无法防止 csrf攻击。需要设置伪随机数 X-XSRF-TOKEN。（推荐！不 需要处理 xss，并且xsrf 随机数有完善的应用机制）</p><p>方式二、 客户端使用 auth授权头认证，token存储在 cookie中，需要防止xss攻击。可以防止 csrf攻击，因为 csrf只能在请求中携带 cookie，而这里必须从 cookie中拿出相应的值并放到 authorization 头中。实际上cookie不能跨站（同源政策）被取出，因此可以避免 csrf 攻击。（适用于 ajax请求或者 api请求，可以方便的设置 auth头）</p><p>方式三、可以将token存储在 localstorage里面，需要防止xss攻击。实现方式可以在一个统一的地方复写请求头，让每次请求都在header中带上这个token， 当token失效的时候，后端肯定会返回401，这个时候在你可以在前端代码中操作返回登陆页面，清除localstorage中的token。（适用于 ajax请求或者 api请求，可以方便的存入 localstorage）</p><p>设置 HTTPS，可以防止提交时的用户名或者密码被拦截或读取。</p><h4 id="localstorage和sessionstorage">localstorage和sessionstorage</h4><p>vuex存储在内存，localstorage（本地存储）则以文件的方式存储在本地,永久保存；sessionstorage( 会话存储 ) ,临时保存。localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p><h4 id="JWT-流程">JWT 流程</h4><ol><li>浏览器发起请求登陆</li><li>服务端验证身份，根据算法，将用户标识符打包生成 token, 并且返回给浏览器</li><li>浏览器发起请求获取用户资料，把刚刚拿到的 token 一起发送给服务器</li><li>服务器发现数据中有 token，验明正身</li><li>服务器返回该用户的用户资料</li></ol><p>你发现了吗？好些并没有什么区别，除了 session 需要服务端存储一份，而 JWT 不需要</p><p>但实际上区别大了去了</p><ol><li>session 存储在服务端占用服务器资源，而 JWT 存储在客户端</li><li>session 存储在 Cookie 中，存在伪造跨站请求伪造攻击的风险</li><li>session 只存在一台服务器上，那么下次请求就必须请求这台服务器，不利于分布式应用</li><li>存储在客户端的 JWT 比存储在服务端的 session 更具有扩展性</li><li>…</li></ol><h4 id="jwt怎么让token在用户退出登录失效？">jwt怎么让token在用户退出登录失效？</h4><h5 id="1-客户端清除-token">1.客户端清除 token</h5><p>登出时在浏览器或者 APP 客户端清除 token。这种方法比较简单，无需后端操作。</p><p>但不经过服务器验证的客户端清除 token 操作会造成登出后使用原 token 仍有访问权限的问题，针对该问题，token 的过期时间可以设置尽可能短，以减少原 token 的有效的时间。</p><h5 id="2-白名单">2.白名单</h5><p>在 Redis 维护有效的 token，在 token 生成后就存入 Redis，登出时从 Redis 删除该 token。在验证  token 之前先查询白名单中是否有该 token，如果有则表明是有效的，然后进入解析 token 的逻辑。有点像有状态的 session 的味道了。</p><p>为了避免白名单不断变大，可以按照 jwt 中的过期时间来设置存入 Redis 的 token 的过期时间。</p><h5 id="3-黑名单">3.黑名单</h5><p>在 Redis 维护登出的无效 token，在验证 token 之前先查询黑名单中是否有该 token，如果没有表明是有效的，然后进入解析 token 的逻辑。</p><p>为了避免黑名单不断变大， 可以按照 jwt 中的过期时间来设置存入 Redis 的 token 的过期时间。</p><p>一般黑名单会比白名单占用的内存小。</p><h4 id="Cookie和Session的区别？">Cookie和Session的区别？</h4><ul><li><strong>作用范围不同</strong>，Cookie 保存在客户端，Session 保存在服务器端。</li><li><strong>有效期不同</strong>，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li><strong>隐私策略不同</strong>，Cookie 存储在客户端，容易被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li><strong>存储大小不同</strong>， 单个 Cookie 保存的数据不能超过 4K；对于 Session 来说存储没有上限，但出于对服务器的性能考虑，Session 内不要存放过多的数据，并且需要设置 Session 删除机制。</li></ul><h4 id="sessionStorage、localStorage和cookie的区别"><strong>sessionStorage、localStorage和cookie的区别</strong></h4><p>共同点：都是保存在浏览器端、且同源的<br>区别：<br>1、cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</p><p>2、存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</p><p>3、数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效(会话存储)；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</p><p>4、作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的</p><p>5、web Storage支持事件通知机制，可以将数据更新的通知发送给监听者</p><p>6、web Storage的api接口使用更方便</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203022007883.png" alt="image-20220302200700563"></p><p>vuex存储在内存，vuex用于组件之间的传值，localstorage，sessionstorage则主要用于不同页面之间的传值。当刷新页面（这里的刷新页面指的是 --&gt; F5刷新,属于清除内存了）时vuex存储的值会丢失，sessionstorage<strong><strong>页面关闭后就清除掉了</strong></strong></p><h4 id="什么是对称加密和非对称加密？">什么是对称加密和非对称加密？</h4><p><strong>对称加密</strong>：通信双方使用<strong>相同的密钥</strong>进行加密。特点是加密速度快，但是缺点是密钥泄露会导致密文数据被破解。常见的对称加密有<code>AES</code>和<code>DES</code>算法。</p><p><strong>非对称加密</strong>：它需要生成两个密钥，<strong>公钥和私钥</strong>。公钥是公开的，任何人都可以获得，而私钥是私人保管的。公钥负责加密，私钥负责解密；或者私钥负责加密，公钥负责解密。这种加密算法<strong>安全性更高</strong>，但是<strong>计算量相比对称加密大很多</strong>，加密和解密都很慢。常见的非对称算法有<code>RSA</code>和<code>DSA</code>。</p><h4 id="XSS和CSRF攻击">XSS和CSRF攻击</h4><h5 id="XSS">XSS</h5><p>跨域脚本攻击，指的是攻击者将攻击脚本代码恶意注入传给服务器，就比如填写表单时，填入一段script代码盗用cookie。</p><p>可以通过设置一个过滤器避免、采用含有HttpOnly标志的Cookie在HTTP响应头Set-Cookie。</p><h5 id="CSRF">CSRF</h5><p>跨域请求伪造，一般通过钓鱼链接。</p><p>防范CSRF可遵循以下几种规则:</p><p>Get 请求不对数据进行修改<br>不让第三方网站访问到用户Cookie<br>阻止第三方网站请求接口<br>请求时附带验证信息，如验证码或Token(这种情况下会发送预检请求)</p><h5 id="XSS攻击，Cookie相关的字段，HttpOnly">XSS攻击，Cookie相关的字段，HttpOnly</h5><p>cookie中设置HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。</p><h5 id="CSRF攻击，Cookie的SameSite字段">CSRF攻击，Cookie的SameSite字段</h5><p>Chrome 51 开始，浏览器的 Cookie 新增加了一个SameSite属性，用来防止 CSRF 攻击和用户追踪。Cookie 的SameSite属性用来限制第三方 Cookie，从而减少安全风险。</p><p>可以设置三个值：</p><p>Strict：完全禁止第三方Cookie<br>Lax（Chrome默认）：只有导航到目标网址的 GET 请求才发送Cookie，这只包括三种情况：链接，预加载请求，GET 表单<br>None：关闭该属性。不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。</p><h3 id="Nginx">Nginx</h3><p>Nginx是一个HTTP服务器，可以将服务器上的静态文件（如HTML、图片）通过HTTP协议展现给客户端。</p><p>通过第三方服务器访问服务器集群的内容，但是我们并不知道是哪一台服务器提供的内容，此种代理方式称为<strong>反向代理</strong></p><p>什么是负载均衡（upstream模块）</p><p>公司会建立很多的服务器，这些服务器组成了服务器集群，然后，当用户访问网站的时候，先访问一个中间服务器，再让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入选择的服务器所以，用户每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况</p><p><strong>nginx -s stop</strong></p><p>nginx -s reload</p><p>nginx -t</p><h3 id="操作系统">操作系统</h3><h4 id="线程、进程、协程的区别">线程、进程、协程的区别</h4><p>概念：**进程是资源单位，线程是执行单位；**协程：算法或技术</p><h5 id="1-进程和线程的区别">1.进程和线程的区别</h5><ul><li>调度：进程是资源管理的基本单位，线程是程序执行的基本单位。</li><li>切换：线程上下文切换比进程上下文切换要快得多。</li><li>拥有资源： 进程是拥有资源的一个独立单位，线程不拥有系统资源，但是可以访问隶属于进程的资源。</li><li>系统开销： 创建或撤销进程时，系统都要为之分配或回收系统资源，如内存空间，I/O设备等，OS所付出的开销显著大于在创建或撤销线程时的开销，进程切换的开销也远大于线程切换的开销。</li></ul><h5 id="2-协程与线程的区别">2.协程与线程的区别</h5><ul><li>线程和进程都是同步机制，而协程是异步机制。</li><li>线程是抢占式，而协程是非抢占式的。需要用户释放使用权切换到其他协程，因此同一时间其实只有一个协程拥有运行权，相当于单线程的能力。</li><li>一个线程可以有多个协程，一个进程也可以有多个协程。</li><li>协程不被操作系统内核管理，而完全是由程序控制。线程是被分割的CPU资源，协程是组织好的代码流程，线程是协程的资源。但协程不会直接使用线程，协程直接利用的是执行器关联任意线程或线程池。</li><li>协程能保留上一次调用时的状态。</li></ul><h4 id="死锁"><strong>死锁</strong></h4><p>互斥，请求与保持，不可剥夺，循环等待</p><h4 id="什么是用户态和内核态？">什么是用户态和内核态？</h4><p>内核态：内核态运行的程序可以访问计算机的任何数据和资源，不受限制，包括外围设备</p><p>用户态：用户态运行的程序只能受限地访问内存，只能直接读取用户程序的数据，并且不允许访问外围设备，用户态下的 CPU 不允许独占，也就是说 CPU 能够被其他程序获取。</p><h4 id="select、poll-和-epoll-之间的区别">select、poll 和 epoll 之间的区别?</h4><p>（1）select：时间复杂度 O(n)</p><p>select 仅仅知道有 I/O 事件发生，但并不知道是哪几个流，所以只能<strong>无差别轮询所有流</strong>，找出能读出数据或者写入数据的流，并对其进行操作。所以 select 具有 O(n) 的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</p><p>（2）poll：时间复杂度 O(n)</p><p>poll 本质上和 select 没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个 fd 对应的设备状态， 但是它没有最大连接数的限制，原因是它是<strong>基于<a href="">链表</a>来存储的</strong>。</p><p>（3）epoll：时间复杂度 O(1)</p><p>epoll 可以理解为 event poll，不同于忙轮询和无差别轮询，<strong>epoll 会把哪个流发生了怎样的 I/O 事件通知我们</strong>。所以说 epoll 实际上是事件驱动（每个事件关联上 fd）的。</p><blockquote><p>select，poll，epoll 都是 IO 多路复用的机制。I/O 多路复用就是通过一种机制监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），就通知程序进行相应的读写操作。但 select，poll，epoll 本质上都是同步 I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步 I/O 则无需自己负责进行读写，异步 I/O 的实现会负责把数据从内核拷贝到用户空间。</p></blockquote><h3 id="Ajax">Ajax</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202203030009561.png" alt="image-20220303000922105"></p><h3 id="浏览器">浏览器</h3><h4 id="浏览器进程-线程模型">浏览器进程/线程模型</h4><p>浏览器是多进程的，有一个主控进程，以及每一个tab页面都会新开一个进程（某些情况下多个tab会合并进程）</p><p>进程可能包括主控进程，插件进程，GPU，tab页（浏览器内核）等等</p><pre class="language-none"><code class="language-none">Browser进程：浏览器的主进程（负责协调、主控），只有一个第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建GPU进程：最多一个，用于3D绘制浏览器渲染进程（内核）：默认每个Tab页面一个进程，互不影响，控制页面渲染，脚本执行，事件处理等（有时候会优化，如多个空白tab会合并成一个进程）</code></pre><p>多线程的浏览器内核:每一个tab页面可以看作是浏览器内核进程，然后这个进程是多线程的，它有几大类子线程</p><pre class="language-none"><code class="language-none">GUI线程JS引擎线程事件触发线程定时器线程网络请求线程</code></pre><h4 id="浏览器多个页签之间通信">浏览器多个页签之间通信</h4><p>使用localStorage，cookie+setInterval()</p><p><strong>使用localStorage</strong></p><ul><li>localStorage是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：sessionStorage是会话级的存储空间，每个标签页都是单独的）。</li><li>在一个标签页里面使用 <strong>localStorage.setItem(key, value)</strong> 添加（修改、删除）内容；<br>在另一个标签页里面监听 <strong>storage</strong>事件。<br>即可得到 <strong>localStorage</strong>存储的值，实现不同标签页之间的通信。</li></ul><pre class="language-none"><code class="language-none">window.onstorage &#x3D; (e) &#x3D;&gt; &#123;console.log(e)&#125;&#x2F;&#x2F; 或者这样window.addEventListener(&#39;storage&#39;, (e) &#x3D;&gt; console.log(e))</code></pre><p><strong>cookie+setInterval()</strong></p><p>将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。</p><p>页签1：</p><pre class="language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;ipt&quot;&gt;  &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;提交&quot;&gt;  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;      $(function()&#123;            $(&quot;#btn&quot;).click(function()&#123;                var ipt&#x3D;$(&quot;#ipt&quot;).val();                document.cookie&#x3D;&quot;name&#x3D;&quot;+ipt;            &#125;);        &#125;);    &lt;&#x2F;script&gt;  </code></pre><p>页签2：</p><pre class="language-none"><code class="language-none">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;      $(function()&#123;           function getCookie(key) &#123;                return JSON.parse(&quot;&#123;\&quot;&quot; + document.cookie.replace(&#x2F;;\s+&#x2F;gim,&quot;\&quot;,\&quot;&quot;).replace(&#x2F;&#x3D;&#x2F;gim, &quot;\&quot;:\&quot;&quot;) + &quot;\&quot;&#125;&quot;)[key];            &#125;             setInterval(function()&#123;                console.log(&quot;name&#x3D;&quot; + getCookie(&quot;name&quot;));            &#125;, 10000);        &#125;);  &lt;&#x2F;script&gt;  </code></pre><h4 id="webworker">webworker</h4><ul><li>我们都知道JavaScript是<strong>单线程</strong>的，但是浏览器是拥有过个线程的比如：gui渲染线程、JS引擎线程、事件触发线程、异步http请求线程。</li><li>webworker作为浏览器的一个新特性，可以提供一个<strong>额外的线程</strong>来执行一些js代码，并且不会影响到浏览器用户界面。</li><li>应用场景：比如页面中包含耗时较大的算法代码时，就会阻塞线程影响浏览器渲染等等。这时候就可把耗时代码，放到webworker(另一个线程)中执行。</li><li>注意，这种多线程能力不是JavaScript语言原生具有的，而是浏览器宿主环境提供的。</li><li>普通的webworker直接使用**<code>new Worker()</code><strong>即可创建，这种webworker是</strong>当前页面**专有的。然后还有种共享worker(SharedWorker)，这种是可以多个标签页、iframe共同使用的，接下来介绍如何使用SharedWorker实现标签页之间的通信。</li></ul><h4 id="SharedWorker">SharedWorker</h4><ul><li>SharedWorker可以被多个window共同使用，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)</li><li>首先新建一个js文件<code>worker.js</code>，具体代码如下：</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; sharedWorker所要用到的js文件，不必打包到项目中，直接放到服务器即可let data &#x3D; &#39;&#39;onconnect &#x3D; function (e) &#123;  let port &#x3D; e.ports[0]   port.onmessage &#x3D; function (e) &#123;    if (e.data &#x3D;&#x3D;&#x3D; &#39;get&#39;) &#123;      port.postMessage(data)    &#125; else &#123;      data &#x3D; e.data    &#125;  &#125;&#125;</code></pre><ul><li><p>webworker端(暂且这样称呼)的代码就如上，只需注册一个onmessage监听信息的事件，客户端(即使用sharedWorker的<a href="https://so.csdn.net/so/search?q=%E6%A0%87%E7%AD%BE&amp;spm=1001.2101.3001.7020">标签</a>页)发送message时就会触发。</p></li><li><p>注意webworker无法在本地使用，出于浏览器本身的安全机制，所以我这次的示例也是放在服务器上的，<code>worker.js</code>和<code>index.html</code>在同一目录。</p></li><li><p>因为客户端和webworker端的通信不像<a href="https://so.csdn.net/so/search?q=websocket&amp;spm=1001.2101.3001.7020">websocket</a>那样是全双工的，所以客户端发送数据和接收数据要分成两步来处理。示例中会有两个按钮，分别对应的向sharedWorker发送数据的请求以及获取数据的请求，但他们本质上都是相同的事件–发送消息。</p></li><li><p>webworker端会进行判断，传递的<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE&amp;spm=1001.2101.3001.7020">数据</a>为’get’时，就把变量data的值回传给客户端，其他情况，则把客户端传递过来的数据存储到data变量中。下面是客户端的代码：</p></li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 这段代码是必须的，打开页面后注册SharedWorker，显示指定worker.port.start()方法建立与worker间的连接    if (typeof Worker &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;      alert(&#39;当前浏览器不支持webworker&#39;)    &#125; else &#123;      let worker &#x3D; new SharedWorker(&#39;worker.js&#39;)      worker.port.addEventListener(&#39;message&#39;, (e) &#x3D;&gt; &#123;        console.log(&#39;来自worker的数据：&#39;, e.data)      &#125;, false)      worker.port.start()      window.worker &#x3D; worker    &#125;&#x2F;&#x2F; 获取和发送消息都是调用postMessage方法，我这里约定的是传递&#39;get&#39;表示获取数据。window.worker.port.postMessage(&#39;get&#39;)window.worker.port.postMessage(&#39;发送信息给worker&#39;)</code></pre><ul><li>页面A发送数据给worker，然后打开页面B，调用<code>window.worker.port.postMessage('get')</code>，即可收到页面A发送给worker的数据。</li><li>参考：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWeb_Workers_API%2FUsing_web_workers">https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers</a></li></ul><h4 id="浏览器-HTTP-缓存机制">浏览器(HTTP)缓存机制</h4><pre class="language-none"><code class="language-none">浏览器会根据 http response header 中的 Expires 和cahe-control 字段判断是否命中强缓存，如若命中，则直接从缓存中取资源，不会再去向服务器请求了。否则（没有命中强缓存），浏览器会发出一个条件请求，浏览器会在请求头中包含 If-Modified-Since 或 If-None-Match 字段，If-Modified-Since 即浏览器当初得到的 Last-Modified；If-None-Match即浏览器当初得到的 ETag。当服务器发现资源的更新时间晚于 If-Modified-Since 所提供的时间，或者资源在服务器端当前的 ETag 和 If-None-Match 提供的不符时，说明该资源需要向服务器重新请求了。否则，浏览器将不需要重新下载整个资源，只需要从缓存中去加载这个资源，这时响应的http code 为 304（304 Not Modified）。</code></pre><h5 id="缓存的概念知识">缓存的概念知识</h5><ul><li>缓存的分类：服务器缓存(代理服务器缓存、CDN 缓存)，第三方缓存，浏览器缓存等。</li><li>缓存的相关术语：<ul><li>缓存命中率：从缓存中得到数据的请求数与所有请求数的比率。理想状态是越高越好。</li><li>过期内容：超过设置的有效时间，被标记为 ‘陈旧’ 的内容。通常过期内容不能用于回复客户端的请求，必须重新向源服务器请求新的内容或者验证缓存的内容是否仍然可用。</li><li>验证：验证缓存中的过期内容是否仍然有效，验证通过的话刷新过期时间或策略。</li><li>失效：失效就是把内容从缓存中移除。当内容发生改变时就必须移除失效的内容。</li></ul></li><li>另： 浏览器缓存是代价最小的，因为浏览器缓存依赖的是客户端，而几乎不耗费服务器端的资源(极端情况下相当于纯静态页面)。</li></ul><h5 id="缓存的作用">缓存的作用</h5><ul><li>减少网络带宽消耗</li><li>降低服务器压力</li><li>减少网络延迟，加快页面打开速度</li></ul><h5 id="缓存机制">缓存机制</h5><ul><li>强缓存优先于协商缓存，强缓存生效则使用强缓存，若强缓存失败，则进行协商缓存</li><li>协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存<br><img src="https://www.cnblogs.com/programmerzhang/p/14037869.html" alt="img"></li></ul><p><img src="https://img2020.cnblogs.com/blog/1133619/202011/1133619-20201125190324164-367321755.png" alt="img"></p><p>缓存策略 图片来源：IMWeb前端</p><h5 id="涉及缓存机制的HTTP-header">涉及缓存机制的HTTP-header</h5><h5 id="Expires（过期时间）-强缓存机制">Expires（过期时间）(强缓存机制)</h5><ul><li><p><strong>值</strong>：是一个GMT时间格式的绝对时间，<code>Expires</code> 的日期时间必须是格林威治时间（GMT），而不是本地时间。举例：<code>Expires: Fri, 30 Oct 1998 14:19:41</code></p></li><li><p><strong>作用</strong>：告诉缓存器相关副本在多长时间内是新鲜的。过了这个时间，缓存器就会向源服务器发送请求，检查文档是否被修改。</p></li><li><p><strong>兼容性</strong>：几乎所有的缓存服务器都支持Expires（过期时间）属性</p></li><li><p><strong>规则</strong>：基于客户最后查看副本的时间（最后访问时间）或者根据服务器上文档最后被修改的时间</p></li><li><p>应用：</p><ul><li>对于设置静态图片文件（例如导航栏和图片按钮）缓存特别有用；因为这些图片修改很少，你可以给它们设置一个特别长的过期时间，这会使你的网站对用户变得相应非常快</li><li>对于控制有规律改变的网页也很有用，例如：你每天早上6点更新新闻页，你可以设置副本的过期时间也是这个时间，这样缓存服务器就知道什么时候去取一个更新版本，而不必让用户去按浏览器的&quot;刷新&quot;按钮。</li><li>过期时间头信息属性值只能是HTTP格式的日期时间，其他的都会被解析成当前时间&quot;之前&quot;，副本会过期</li></ul></li><li><p>局限性</p><p>：虽然过期时间属性非常有用，但是它还是有些局限，</p><ul><li>首先：是牵扯到了日期，这样Web服务器的时间和缓存服务器的时间必须是同步的，如果有些不同步，要么是应该缓存的内容提前过期了，要么是过期结果没及时更新。</li><li>如果你设置的过期时间是一个固定的时间，如果你返回内容的时候又没有连带更新下次过期的时间，那么之后所有访问请求都会被发送给源Web服务器，反而增加了负载和响应时间</li></ul></li></ul><h5 id="Cache-Control（缓存控制）-强缓存机制">Cache-Control（缓存控制）(强缓存机制)</h5><ul><li><p>值：</p><pre class="language-none"><code class="language-none">max-age&#x3D;[秒]</code></pre><p>— 执行缓存被认为是最新的最长时间。</p><ul><li>相对时间，不是绝对时间</li><li>单位是秒：从请求时间 开始到过期时间之间的秒数。</li></ul></li><li><p><strong>作用</strong>：让网站的发布者可以更全面的控制他们的内容，并定位过期时间的限制。是http 1.1中为了弥补 <code>Expires</code> 缺陷新加入的。</p></li><li><p>相关控制字段</p><p>：</p><ul><li><code>s-maxage=[秒]</code> — 类似于max-age属性，除了他应用于共享（如：代理服务器）缓存</li><li><code>public</code> — 标记认证内容也可以被缓存，一般来说： 经过HTTP认证才能访问的内容，输出是自动不可以缓存的；</li><li><code>no-cache</code> — 强制每次请求直接发送给源服务器，而不经过本地缓存版本的校验。这对于需要确认认证应用很有用（可以和public结合使用），或者严格要求使用最新数据 的应用（不惜牺牲使用缓存的所有好处）；</li><li><code>no-store</code> — 强制缓存在任何情况下都不要保留任何副本</li><li><code>must-revalidate</code> — 告诉缓存必须遵循所有你给予副本的新鲜度的</li><li><code>proxy-revalidate</code> — 和 <code>must-revalidate</code> 类似，除了他只对缓存代理服务器起作用</li></ul></li></ul><h5 id="Last-Modified-If-Modified-Since-协商缓存机制">Last-Modified/If-Modified-Since (协商缓存机制)</h5><ul><li>通常服务器知道你所请求的数据的最后修改时间，并且 HTTP 为服务器提供了一种将最近修改数据连同你请求的数据一同发送的方法。</li><li>如果你第二次 (或第三次，或第四次) 请求相同的数据，告诉服务器上一次获得的最后修改日期：在请求中发送一个 <code>If-Modified-Since</code> 头信息，它包含了上一次从服务器连同数据所获得的日期。</li><li>如果数据从那时起没有改变，服务器将返回一个特殊的 HTTP 状态代码 304，这意味着 “从上一次请求后这个数据没有改变”。</li><li>当服务器发送状态编码 304 时，不再重新发送数据。所以当数据没有更新时，你不需要一次又一次地下载相同的数据</li><li><strong>兼容性</strong> ：所有现代的浏览器都支持 (<code>last-modified</code>) 的数据检查。</li></ul><h5 id="ETag-If-None-Match-协商缓存机制">ETag/If-None-Match (协商缓存机制)</h5><ul><li><strong>作用</strong>： 没有变化时不重新下载数据</li><li>工作方式：<ol><li><code>Etag</code>是上一次加载资源时，服务器返回的 <code>response header</code>，是对该资源的一种唯一标识，只要资源有变化，<code>Etag</code>就会重新生成</li><li>浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 <code>Etag</code> 值放到 <code>request header</code> 里的 <code>If-None-Match</code> 里，服务器比较客户端传来的 <code>If-None-Match</code> 跟自己服务器上该资源的 <code>ETag</code> 是否一致</li><li>如果服务器发现 <code>ETag</code> 匹配不上，那么直接以常规 <code>GET 200</code> 回包形式将新的资源（当然也包括了新的 <code>ETag</code> ）发给客户端；如果 <code>ETag</code> 是一致的，则直接返回304知会客户端直接使用本地缓存即可。</li></ol></li></ul><h5 id="几种缓存策略的对比">几种缓存策略的对比</h5><h4 id="两种强缓存机制对比-Expires-VS-Cache-Control">两种强缓存机制对比 <code>Expires</code> VS <code>Cache-Control</code></h4><ul><li><strong>差别不大</strong>，区别就是 <code>Expires</code> 是 <code>HTTP1.0</code> 的产物，而 <code>Cache-Control</code> 是 <code>HTTP1.1</code> 的产物</li><li><strong>优先级上</strong>，两者同时存在的话，<code>Cache-Control</code> 优先级高于 <code>Expires</code> ,<code>Expires</code> 更像是一种备选方案，在某些不支持 <code>Cache-Control</code> 的环境中发挥作用</li><li><strong>二者共同的弊端</strong> 就是这种强缓存的机制仅仅关心缓存是否超出或者超过某个过期时间，并不关心服务器端的资源是否已经更新，所以单纯使用这两种缓存策略会导致客户端拿到的资源不是最新的</li></ul><h5 id="两种协商缓存机制对比-Last-Modified-If-Modified-Since-VS-ETag-If-None-Match">两种协商缓存机制对比 <code>Last-Modified/If-Modified-Since</code> VS <code>ETag/If-None-Match</code></h5><ul><li><strong>精度上</strong>，<code>ETag</code> 要明显优于前者，<code>Last-Modified/If-Modified-Since</code> 策略的时间单位为秒，这就意味着在秒级的请求上，做不到真正的及时更新，但是 <code>ETag</code> 每次请求都会对其进行改变从而确保精度，并且在使用负载均衡的服务器上，各个服务器生成的 <code>Last-Modified</code> 也有可能不相同</li><li><strong>性能上</strong>，<code>ETag</code> 要逊于 <code>Last-Modified/If-Modified-Since</code> 策略，毕竟 <code>Last-Modified/If-Modified-Since</code> 策略只是记录时间，而 <code>ETag</code> 需要进行一步hash运算</li><li><strong>优先级上</strong>，服务器会优先考虑 <code>ETag</code></li></ul><h5 id="用户行为对缓存策略的影响">用户行为对缓存策略的影响</h5><blockquote><p>并不是所有的操作都会启用正常的缓存机制，在某些用户行为下，缓存机制是可以正常跳过的</p></blockquote><ol><li>地址栏访问，链接跳转是正常用户行为，将会触发浏览器缓存机制</li><li>F5刷新，浏览器会设置<code>max-age=0</code>，跳过强缓存判断，会进行协商缓存判断</li><li>ctrl+F5刷新，跳过强缓存和协商缓存，直接从服务器拉取资源</li></ol><h4 id="浏览器渲染原理">浏览器渲染原理</h4><p><strong>渲染主流程</strong></p><p>渲染引擎首先通过网络获得所请求文档的内容，通常以8K分块的方式完成。下面是渲染引擎在取得内容之后的基本流程：</p><p>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p><p><img src="https://pic002.cnblogs.com/images/2011/265173/2011110316263715.png" alt="img"></p><p>这里先解释一下几个概念，方便大家理解：</p><p>DOM Tree：浏览器将HTML解析成树形的数据结构。</p><p>CSS Rule Tree：浏览器将CSS解析成树形的数据结构。</p><p>Render Tree: DOM和CSSOM合并后生成Render Tree。</p><p>layout: 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系，从而去计算出每个节点在屏幕中的位置。</p><p>painting: 按照算出来的规则，通过显卡，把内容画到屏幕上。</p><p>reflow（回流）：当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，内行称这个回退的过程叫 reflow。reflow 会从 <html> 这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p><p>repaint（重绘）：改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。</p><p><em>注意：(1)display:none 的节点不会被加入Render Tree，而visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为display:none是更优的。</em></p><p><em>(2)display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。</em></p><p><em>(3)有些情况下，比如修改了元素的样式，浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow。但是在有些情况下，比如resize 窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行 reflow。</em></p><p><strong>构建DOM树</strong></p><p>当浏览器接收到服务器响应来的HTML文档后，会遍历文档节点，生成DOM树。<br>需要注意以下几点：</p><ul><li>DOM树在构建的过程中可能会被CSS和JS的加载而执行阻塞</li><li><code>display:none</code>的元素也会在DOM树中</li><li>注释也会在DOM树中</li><li><code>script</code>标签会在DOM树中</li></ul><p>无论是DOM还是CSSOM，都是要经过<code>Bytes→characters→tokens→nodes→object model</code>这个过程。当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p><p><strong>构建CSSOM规则树</strong></p><p>浏览器解析CSS文件并生成CSSOM，每个CSS文件都被分析成一个StyleSheet对象，每个对象都包含CSS规则。CSS规则对象包含对应于CSS语法的选择器和声明对象以及其他对象。<br>在这个过程需要注意的是：</p><ul><li>CSS解析可以与DOM解析同时进行。</li><li>CSS解析与<code>script</code>的执行互斥 。</li><li>在Webkit内核中进行了<code>script</code>执行优化，只有在JS访问CSS时才会发生互斥。</li></ul><p><strong>构建渲染树（Render Tree）</strong></p><p>通过DOM树和CSS规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从DOM树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的CSS样式规则并应用。<br>有以下几点需要注意：</p><ul><li>Render Tree和DOM Tree不完全对应</li><li><code>display: none</code>的元素不在Render Tree中</li><li><code>visibility: hidden</code>的元素在Render Tree中</li></ul><p>渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点的位置信息，这就需要布局（Layout）的处理了。</p><p><strong>渲染树布局(layout of the render tree)</strong></p><p>布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个Render Object对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。需要注意的是：</p><ul><li><code>float</code>元素，<code>absoulte</code>元素，<code>fixed</code>元素会发生位置偏移。</li><li>我们常说的脱离文档流，其实就是脱离Render Tree。</li></ul><p><strong>渲染树绘制（Painting the render tree）</strong></p><p>在绘制阶段，浏览器会遍历渲染树，调用渲染器的<code>paint()</code>方法在屏幕上显示其内容。渲染树的绘制工作是由浏览器的UI后端组件完成的。</p><h4 id="浏览器渲染网页的那些事儿">浏览器渲染网页的那些事儿</h4><h4 id="浏览器主要组件结构">浏览器主要组件结构</h4><p><img src="https:////upload-images.jianshu.io/upload_images/3534846-379346e21d0d5c84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp" alt="img"></p><p>浏览器主要组件</p><p>渲染引擎主要有两个：webkit和Gecko<br>Firefox使用Geoko，Mozilla自主研发的渲染引擎。Safari和Chrome都使用webkit。Webkit是一款开源渲染引擎，它本来是为linux平台研发的，后来由Apple移植到Mac及Windows上。<br>虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。</p><h4 id="渲染阻塞">渲染阻塞</h4><p>JS可以操作DOM来修改DOM结构，可以操作CSSOM来修改节点样式，这就导致了浏览器在遇到<code>&lt;script&gt;</code>标签时，DOM构建将暂停，直至脚本完成执行，然后继续构建DOM。如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在<code>script</code>标签上增加属性<code>defer</code>或者<code>async</code>。脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到DOM树和CSSOM规则树上。</p><p>每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建。所以，<code>script</code>标签的位置很重要。</p><p>JS阻塞了构建DOM树，也阻塞了其后的构建CSSOM规则树，整个解析进程必须等待JS的执行完成才能够继续，这就是所谓的JS阻塞页面。</p><p>由于CSSOM负责存储渲染信息，浏览器就必须保证在合成渲染树之前，CSSOM是完备的，这种完备是指所有的CSS（内联、内部和外部）都已经下载完，并解析完，只有CSSOM和DOM的解析完全结束，浏览器才会进入下一步的渲染，这就是CSS阻塞渲染。</p><p>CSS阻塞渲染意味着，在CSSOM完备前，页面将一直处理白屏状态，这就是为什么样式放在<code>head</code>中，仅仅是为了更快的解析CSS，保证更快的首次渲染。</p><p>需要注意的是，即便你没有给页面任何的样式声明，CSSOM依然会生成，默认生成的CSSOM自带浏览器默认样式。</p><p>当解析HTML的时候，会把新来的元素插入DOM树里面，同时去查找CSS，然后把对应的样式规则应用到元素上，查找样式表是按照从右到左的顺序去匹配的。</p><p>例如：<code>div p &#123;font-size: 16px&#125;</code>，会先寻找所有<code>p</code>标签并判断它的父标签是否为<code>div</code>之后才会决定要不要采用这个样式进行渲染）。<br>所以，我们平时写CSS时，尽量用<code>id</code>和<code>class</code>，千万不要过渡层叠。</p><h4 id="回流和重绘（reflow和repaint）">回流和重绘（reflow和repaint）</h4><p>我们都知道HTML默认是流式布局的，但CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。因此我们就需要知道两个概念：<code>replaint</code>和<code>reflow</code>。</p><h5 id="reflow（回流）">reflow（回流）</h5><p>当浏览器发现布局发生了变化，这个时候就需要倒回去重新渲染，这个回退的过程叫<code>reflow</code>。<code>reflow</code>会从<code>html</code>这个<code>root frame</code>开始递归往下，依次计算所有的结点几何尺寸和位置，以确认是渲染树的一部分发生变化还是整个渲染树。<code>reflow</code>几乎是无法避免的，因为只要用户进行交互操作，就势必会发生页面的一部分的重新渲染，且通常我们也无法预估浏览器到底会<code>reflow</code>哪一部分的代码，因为他们会相互影响。</p><h5 id="repaint（重绘）">repaint（重绘）</h5><p><code>repaint</code>则是当我们改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸和位置没有发生改变。</p><p>需要注意的是，<code>display:none</code>会触发<code>reflow</code>，而<code>visibility: hidden</code>属性则并不算是不可见属性，它的语义是隐藏元素，但元素仍然占据着布局空间，它会被渲染成一个空框。所以<code>visibility:hidden</code>只会触发<code>repaint</code>，因为没有发生位置变化。</p><p>另外有些情况下，比如修改了元素的样式，浏览器并不会立刻<code>reflow</code>或<code>repaint</code>一次，而是会把这样的操作积攒一批，然后做一次<code>reflow</code>，这又叫异步<code>reflow</code>或增量异步<code>reflow</code>。但是在有些情况下，比如<code>resize</code>窗口，改变了页面默认的字体等。对于这些操作，浏览器会马上进行<code>reflow</code>。</p><h5 id="引起reflow">引起reflow</h5><p>现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。</p><ul><li>页面第一次渲染（初始化）</li><li>DOM树变化（如：增删节点）</li><li>Render树变化（如：<code>padding</code>改变）</li><li>浏览器窗口<code>resize</code></li><li>获取元素的某些属性</li></ul><p>浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括<code>offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height</code>、调用了<code>getComputedStyle()</code>。</p><h5 id="引起repaint">引起repaint</h5><p><code>reflow</code>回流必定引起<code>repaint</code>重绘，重绘可以单独触发。<br>背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流）</p><h5 id="减少reflow、repaint触发次数">减少reflow、repaint触发次数</h5><ul><li>用<code>transform</code>做形变和位移可以减少<code>reflow</code></li><li>避免逐个修改节点样式，尽量一次性修改</li><li>使用<code>DocumentFragment</code>将需要多次修改的DOM元素缓存，最后一次性<code>append</code>到真实DOM中渲染</li><li>可以将需要多次修改的DOM元素设置<code>display:none</code>，操作完再显示。（因为隐藏元素不在<code>render</code>树内，因此修改隐藏元素不会触发回流重绘）</li><li>避免多次读取某些属性</li><li>通过绝对位移将复杂的节点元素脱离文档流，形成新的Render Layer，降低回流成本</li></ul><h4 id="几条关于优化渲染效率的建议">几条关于优化渲染效率的建议</h4><p>结合上文有以下几点可以优化渲染效率。</p><ul><li>合法地去书写HTML和CSS ，且不要忘了文档编码类型。</li><li>样式文件应当在<code>head</code>标签中，而脚本文件在<code>body</code>结束前，这样可以防止阻塞的方式。</li><li>简化并优化CSS选择器，尽量将嵌套层减少到最小。</li><li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</li><li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</li><li>不要一条条地改变样式，而要通过改变<code>class</code>，或者<code>csstext</code>属性，一次性地改变样式。</li><li>尽量用<code>transform</code>来做形变和位移</li><li>尽量使用离线DOM，而不是真实的网页DOM，来改变元素样式。比如，操作<code>Document Fragment</code>对象，完成后再把这个对象加入DOM。再比如，使用<code>cloneNode()</code>方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</li><li>先将元素设为<code>display: none</code>（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</li><li><code>position</code>属性为<code>absolute</code>或<code>fixed</code>的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li><li>只在必要的时候，才将元素的<code>display</code>属性为可见，因为不可见的元素不影响重排和重绘。另外，<code>visibility : hidden</code>的元素只对重绘有影响，不影响重排。</li><li>使用<code>window.requestAnimationFrame()</code>、<code>window.requestIdleCallback()</code>这两个方法调节重新渲染。</li></ul><p>来看看webkit的主要流程：*<br>*</p><p><img src="https://images2018.cnblogs.com/blog/1028513/201805/1028513-20180530154313816-1498972038.png" alt="img"></p><p>再来看看Geoko的主要流程：</p><p><img src="https://images2018.cnblogs.com/blog/1028513/201805/1028513-20180530154341813-2090367224.jpg" alt="img"></p><p>Gecko 里把格式化好的可视元素称做“帧树”（Frame tree）。每个元素就是一个帧（frame）。 webkit 则使用”渲染树”这个术语，渲染树由”渲染对象”组成。webkit 里使用”layout”表示元素的布局，Gecko则称为”reflow”。Webkit使用”Attachment”来连接DOM节点与可视化信息以构建渲染树。一个非语义上的小差别是Gecko在HTML与DOM树之间有一个附加的层 ，称作”content sink”，是创建DOM对象的工厂。</p><p>尽管Webkit与Gecko使用略微不同的术语，这个过程还是基本相同的，如下：</p><p>1. 浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p><p>2. 将CSS解析成 CSS Rule Tree 。</p><p>3. 根据DOM树和CSSOM来构造 Rendering Tree。注意：Rendering Tree 渲染树并不等同于 DOM 树，因为一些像Header或display:none的东西就没必要放在渲染树中了。</p><p>4. 有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为layout，顾名思义就是计算出每个节点在屏幕中的位置。</p><p>5. 再下一步就是绘制，即遍历render树，并使用UI后端层绘制每个节点。</p><p>注意：<em>上述这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容</em>。</p><h4 id="强缓存与协商缓存">强缓存与协商缓存</h4><p>在工作中，前端代码打包之后的生成的静态资源就要发布到静态服务器上，这时候就要做对这些静态资源做一些运维配置，其中，gzip和设置缓存是必不可少的。这两项是最直接影响到网站性能和用户体验的。</p><p>缓存的优点：</p><ul><li>减少了不必要的数据传输，节省带宽</li><li>减少服务器的负担，提升网站性能</li><li>加快了客户端加载网页的速度</li><li>用户体验友好</li></ul><p>缺点：</p><ul><li>资源如果有更改但是客户端不及时更新会造成用户获取信息滞后，如果老版本有bug的话，情况会更加糟糕。</li></ul><p><strong>所以，为了避免设置缓存错误，掌握缓存的原理对于我们工作中去更加合理的配置缓存是非常重要的。</strong></p><h5 id="一、强缓存">一、强缓存</h5><p>到底什么是强缓存？强在哪？其实强是强制的意思。当浏览器去请求某个文件的时候，服务端就在respone header里面对该文件做了缓存配置。缓存的时间、缓存类型都由服务端控制，具体表现为：<br>respone header 的cache-control，常见的设置是max-age public private no-cache no-store等</p><p>如下图,<br>设置了<strong>cache-control:max-age=31536000,public,immutable</strong></p><p><img src="https:////upload-images.jianshu.io/upload_images/6782944-2953183b0a2ab1dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp" alt="img"></p><p>image.png</p><p>max-age表示缓存的时间是31536000秒（1年），public表示可以被浏览器和代理服务器缓存，代理服务器一般可用nginx来做。immutable表示该资源永远不变，但是实际上该资源并不是永远不变，它这么设置的意思是为了让用户在刷新页面的时候不要去请求服务器！啥意思？就是说，如果你只设置了cahe-control:max-age=31536000,public  这属于强缓存，每次用户正常打开这个页面，浏览器会判断缓存是否过期，没有过期就从缓存中读取数据；但是有一些 “聪明” 的用户会点击浏览器左上角的刷新按钮去刷新页面，这时候就算资源没有过期（1年没这么快过），浏览器也会直接去请求服务器，这就是额外的请求消耗了，这时候就相当于是走协商缓存的流程了（下面会讲到）。如果cahe-control:max-age=315360000,public再加个immutable的话，就算用户刷新页面，浏览器也不会发起请求去服务，浏览器会直接从本地磁盘或者内存中读取缓存并返回200状态，看上图的红色框（from memory cache）。这是2015年facebook团队向制定 HTTP 标准的 IETF 工作组提到的建议：他们希望 HTTP 协议能给 Cache-Control 响应头增加一个属性字段表明该资源永不过期，浏览器就没必要再为这些资源发送条件请求了。</p><h5 id="强缓存总结">强缓存总结</h5><ol><li>cache-control: max-age=xxxx，public<br>客户端和代理服务器都可以缓存该资源；<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，如果用户做了刷新操作，就向服务器发起http请求</li><li>cache-control: max-age=xxxx，private<br>只让客户端可以缓存该资源；代理服务器不缓存<br>客户端在xxx秒内直接读取缓存,statu code:200</li><li>cache-control: max-age=xxxx，immutable<br>客户端在xxx秒的有效期内，如果有请求该资源的需求的话就直接读取缓存,statu code:200 ，即使用户做了刷新操作，也不向服务器发起http请求</li><li>cache-control: no-cache<br>跳过设置强缓存，但是不妨碍设置协商缓存；一般如果你做了强缓存，只有在强缓存失效了才走协商缓存的，设置了no-cache就不会走强缓存了，每次请求都回询问服务端。</li><li>cache-control: no-store<br>不缓存，这个会让客户端、服务器都不缓存，也就没有所谓的强缓存、协商缓存了。</li></ol><h5 id="二、协商缓存">二、协商缓存</h5><p>上面说到的强缓存就是给资源设置个过期时间，客户端每次请求资源时都会看是否过期；只有在过期才会去询问服务器。所以，强缓存就是为了给客户端自给自足用的。而当某天，客户端请求该资源时发现其过期了，这是就会去请求服务器了，而这时候去请求服务器的这过程就可以设置协商缓存。这时候，协商缓存就是需要客户端和服务器两端进行交互的。</p><p><strong>怎么设置协商缓存？</strong></p><p>response header里面的设置</p><pre class="language-bash" data-language="bash"><code class="language-bash">etag: <span class="token string">'5c20abbd-e2e8'</span>last-modified: Mon, <span class="token number">24</span> Dec <span class="token number">2018</span> 09:49:49 GMT</code></pre><p>etag：每个文件有一个，改动文件了就变了，就是个文件hash，每个文件唯一，就像用webpack打包的时候，每个资源都会有这个东西，如： app.js打包后变为 app.c20abbde.js，加个唯一hash，也是为了解决缓存问题。</p><p>last-modified：文件的修改时间，精确到秒</p><p>也就是说，每次请求返回来 response header 中的 etag和 last-modified，在下次请求时在 request header 就把这两个带上，服务端把你带过来的标识进行对比，然后判断资源是否更改了，如果更改就直接返回新的资源，和更新对应的response header的标识etag、last-modified。如果资源没有变，那就不变etag、last-modified，这时候对客户端来说，每次请求都是要进行协商缓存了，即：</p><p>发请求–&gt;看资源是否过期–&gt;过期–&gt;请求服务器–&gt;服务器对比资源是否真的过期–&gt;没过期–&gt;返回304状态码–&gt;客户端用缓存的老资源。</p><p>这就是一条完整的协商缓存的过程。</p><p>当然，当服务端发现资源真的过期的时候，会走如下流程：</p><p>发请求–&gt;看资源是否过期–&gt;过期–&gt;请求服务器–&gt;服务器对比资源是否真的过期–&gt;过期–&gt;返回200状态码–&gt;客户端如第一次接收该资源一样，记下它的cache-control中的max-age、etag、last-modified等。</p><p>所以协商缓存步骤总结：</p><p>请求资源时，把用户本地该资源的 etag 同时带到服务端，服务端和最新资源做对比。<br>如果资源没更改，返回304，浏览器读取本地缓存。<br>如果资源有更改，返回200，返回最新的资源。</p><p>补充一点，response header中的etag、last-modified在客户端重新向服务端发起请求时，会在request header中换个key名：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// response header</span>etag<span class="token punctuation">:</span> '5c20abbd<span class="token operator">-</span>e2e8'last<span class="token operator">-</span>modified<span class="token punctuation">:</span> Mon<span class="token punctuation">,</span> <span class="token number">24</span> Dec <span class="token number">2018</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">49</span> GMT<span class="token comment">// request header 变为</span><span class="token keyword">if</span><span class="token operator">-</span>none<span class="token operator">-</span>matched<span class="token punctuation">:</span> '5c20abbd<span class="token operator">-</span>e2e8'<span class="token keyword">if</span><span class="token operator">-</span>modified<span class="token operator">-</span>since<span class="token punctuation">:</span> Mon<span class="token punctuation">,</span> <span class="token number">24</span> Dec <span class="token number">2018</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span><span class="token number">49</span> GMT</code></pre><p><strong>为什么要有etag？</strong><br>你可能会觉得使用last-modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要etag呢？HTTP1.1中etag的出现（也就是说，etag是新增的，为了解决之前只有If-Modified的缺点）主要是为了解决几个last-modified比较难解决的问题：</p><ol><li><p>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新get；</p></li><li><p>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，if-modified-since能检查到的粒度是秒级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</p></li><li><p>某些服务器不能精确的得到文件的最后修改时间。</p></li></ol><h5 id="怎么设置强缓存与协商缓存">怎么设置强缓存与协商缓存</h5><ol><li><p>后端服务器如nodejs:<br>res.setHeader(‘max-age’: ‘3600 public’)<br>res.setHeader(etag: ‘5c20abbd-e2e8’)<br>res.setHeader(‘last-modified’: Mon, 24 Dec 2018 09:49:49 GMT)</p></li><li><p>nginx配置</p><p><img src="https:////upload-images.jianshu.io/upload_images/6782944-b8701adefe6341e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/583/format/webp" alt="img"></p><p>image.png</p></li></ol><p>偶尔自己折腾一番非前端的东西时，若心中有数，自然不会手忙脚乱。</p><h5 id="怎么去用？">怎么去用？</h5><p>举个例子，像目前用vue-cli打包后生成的单页文件是有一个html，与及一堆js css img资源，怎么去设置这些文件呢，核心需求是</p><ol><li><p>要有缓存，毋庸置疑</p></li><li><p>当发新包的时候，要避免加载老的缓存资源</p><p><img src="https:////upload-images.jianshu.io/upload_images/6782944-618911ae2fbba06c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/236/format/webp" alt="img"></p><p>打包好的静态文件</p></li></ol><p><strong>我的做法是：</strong><br>index.html文件采用协商缓存，理由就是要用户每次请求index.html不拿浏览器缓存，直接请求服务器，这样就保证资源更新了，用户能马上访问到新资源，如果服务端返回304，这时候再拿浏览器的缓存的index.html，<strong>切记不要设置强缓存！！！</strong></p><p>其他资源采用强缓存 + 协商缓存,理由就不多说了。</p><h3 id="算法">算法</h3><h4 id="数组扁平化">数组扁平化</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 一、普通的递归实现 * 在遍历过程中发现数组元素还是数组的时候进行递归操作，把数组的结果通过数组的 concat 方法拼接到最后要返回的 result 数组上 */</span><span class="token comment">// function flatten(arr) &#123;</span><span class="token comment">//   let result = []</span><span class="token comment">//   for (let i = 0; i &lt; arr.length; ++i) &#123;</span><span class="token comment">//     if (Array.isArray(arr[i])) &#123;</span><span class="token comment">//       result = result.concat(flatten(arr[i]))</span><span class="token comment">//     &#125; else &#123;</span><span class="token comment">//       result.push(arr[i])</span><span class="token comment">//     &#125;</span><span class="token comment">//   &#125;</span><span class="token comment">//   return result</span><span class="token comment">// &#125;</span><span class="token comment">/** * 二、reduce迭代 */</span><span class="token comment">// function flatten(arr) &#123;</span><span class="token comment">//   return arr.reduce((prev, next) => &#123;</span><span class="token comment">//     return prev.concat(Array.isArray(next) ? flatten(next) : next)</span><span class="token comment">//   &#125;, [])</span><span class="token comment">// &#125;</span><span class="token comment">/** * 三、扩展运算符实现 * 扩展运算符和 some 的方法，两者共同使用 * some来判断是否有数组,有就用拓展运算符展开.没有就结束 */</span><span class="token comment">// function flatten(arr) &#123;</span><span class="token comment">//   while (arr.some(item =>  Array.isArray(item)))&#123;</span><span class="token comment">//     arr = [].concat(...arr)</span><span class="token comment">//   &#125;</span><span class="token comment">//   return arr</span><span class="token comment">// &#125;</span><span class="token comment">/** * 四、split 和 toString 共同处理 * 数组会默认带一个 toString 的方法， * 把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组 */</span><span class="token comment">// function flatten(arr) &#123;</span><span class="token comment">//   return arr.toString().split(',')</span><span class="token comment">// &#125;</span><span class="token comment">/** * 五、ES6 中的 flat * arr.flat([depth]),可以传进 Infinity */</span><span class="token comment">// function flatten(arr) &#123;</span><span class="token comment">//   return arr.flat(Infinity)</span><span class="token comment">// &#125;</span><span class="token comment">/** * 六、正则和 JSON 方法共同处理 * 将 JSON.stringify 的方法先转换为字符串 * 然后通过正则表达式过滤掉字符串中的数组的方括号 * 最后再利用 JSON.parse 把它转换成数组 */</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> tempString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  tempString <span class="token operator">=</span> tempString<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[|\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tempString<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="数组去重的方法">数组去重的方法</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">es5用法<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//第一个等同于第二个，splice方法删除第二个</span>                    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1, "true", 15, false, undefined, NaN, NaN, "NaN", "a", &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span>es6的用法<span class="token comment">// let arr = [12, 43, 23, 12, 43, 55]</span><span class="token comment">// let item = [...new Set(arr)]</span><span class="token comment">// console.log(item)</span></code></pre><h4 id="千位分隔符">千位分隔符</h4><pre class="language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;script&gt;        var num &#x3D; 3899000001,        arr &#x3D; [];        num &#x3D; String(num);        for(var i&#x3D;num.length-1,j&#x3D;1;i&gt;&#x3D;0;i--,j++)&#123;            arr.push(num[i]);            if(j%3&#x3D;&#x3D;0 &amp;&amp; i !&#x3D; 0)&#123;                arr.push(&#39;,&#39;)            &#125;        &#125;        console.log(arr.reverse().join(&#39;&#39;))    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><h4 id="js实现Map结构">js实现Map结构</h4><pre class="language-none"><code class="language-none">function myMap()&#123;var length &#x3D; 0;var obj &#x3D; new Object();&#x2F;*判断对象中是否包含给定的key*&#x2F;this.containsKey&#x3D;function(key)&#123;return (key in obj)&#125;&#x2F;*向map中添加数据*&#x2F;this.put &#x3D; function(key,value)&#123;if(!this.containsKey(key))&#123;length++;&#125;obj[key] &#x3D; value;&#125;&#x2F;*根据key值获取value*&#x2F;this.get &#x3D; function(key)&#123;return this.containsKey(key) ? obj[key] : null;&#125;&#x2F;*判断map中是否包含给定的value*&#x2F;this.containsValue &#x3D; function(value)&#123;for(var key in obj)&#123;if(obj[key] &#x3D;&#x3D; value)&#123;return true;&#125;&#125;return false;&#125;&#x2F;*获取Map中所有key*&#x2F;this.keySet &#x3D; function()&#123;var _keys &#x3D; new Array();for(var key in obj)&#123;_keys.push(key);&#125;return _keys;&#125;&#x2F;*获取Map的长度*&#x2F;this.size &#x3D; function()&#123;return length;&#125;&#x2F;*清空Map*&#x2F;this.clear &#x3D; function()&#123;length &#x3D; 0;obj &#x3D; new Object();&#125;&#125;</code></pre><h4 id="手写LRU">手写LRU</h4><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。实现 LRUCache 类：LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。var LRUCache &#x3D; function(capacity) &#123;    this.capacity &#x3D; capacity    this.cache &#x3D; new Map();&#125;;LRUCache.prototype.get &#x3D; function(key) &#123;    if(this.cache.has(key)) &#123;        let value &#x3D; this.cache.get(key)        this.cache.delete(key, value)        this.cache.set(key, value)        return value    &#125;    return -1;&#125;;LRUCache.prototype.put &#x3D; function(key, value) &#123;    if(this.cache.has(key)) &#123;        let temp &#x3D; this.cache.get(key)        this.cache.delete(key, temp)    &#125;else if(this.cache.size&gt;&#x3D;this.capacity) &#123;        this.cache.delete(this.cache.keys().next().value)    &#125;    this.cache.set(key,value)&#125;;</code></pre><h4 id="快排-js中最快">快排(js中最快)</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token keyword">var</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">,</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="堆排序">堆排序</h4><pre class="language-none"><code class="language-none"></code></pre><h4 id="归并排序">归并排序</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arr    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>middle<span class="token punctuation">)</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>right<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span></code></pre><h4 id="切金条">切金条</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202202281932477.png" alt="image-20220228193228971"></p><h4 id="红黑树">红黑树</h4><p>自平衡的二叉搜索树</p><p>1.结点是红色或者是黑色（结点上有一个color属性）</p><p>2.根结点是黑色</p><p>3.叶子结点都是黑色，且为null（NIL结点）</p><p>4.连接红色结点的两个子结点都是黑色，红色结点的父节点都是黑色，红色节点的子节点都是黑色</p><p>5.从任意结点出发，到其每个叶子结点的路径包含相同数据的黑色节点</p><p>这5条就是红黑树给出的自动维持平衡所具备的规则</p><p>插入结点是红色的，根据规则再改颜色</p><p>是为了保证：从根节点到叶子节点的最长路径不大于最短路径的2倍</p><p>红黑树插入数据的时候。会先去遍历数据应该插入那个位置，插入的数据一定为红色</p><h4 id="链表判断是否有环">链表判断是否有环</h4></script></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github分支合并问题</title>
      <link href="/2021/10/27/github-fen-zhi-he-bing-wen-ti/"/>
      <url>/2021/10/27/github-fen-zhi-he-bing-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>@<a href="github%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB">TOC</a></p><h1>问题描述</h1><blockquote><p>[rejected] master -&gt; master (fetch first) error: failed to push some refs to<br>在执行git merge 分支名  以后报错</p></blockquote><p>使用了网上一些解决方案方案：</p><pre class="language-base" data-language="base"><code class="language-base">// 出现这个问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并git pull --rebase origin master      // 本地生成ReadMe文件git push origin master</code></pre><p>后台又报错如下：</p><blockquote><p>![rejected] master -&gt; master(non-fast-forward) error:failed to push some refs to XXX</p></blockquote><p>然后再找解决方案：</p><pre class="language-bash" data-language="bash"><code class="language-bash">方法一：本地没有ReadMe文件，那么就在本地生成一个：<span class="token function">git</span> pull --rebase origin master     本地生成ReadMe文件<span class="token function">git</span> push origin master方法二：那我就强制上传覆盖远程文件，<span class="token function">git</span> push -f origin master</code></pre><p>发现还是不能解决我的问题。然后就是各种操作猛如虎，发现还是不行，最操蛋的是你执行了这个命令之后，再去执行其他的就可能会有不以言过得情况，就非常麻烦。<br>最后痛定思痛，不想通过分支的前方是来合并代码了（直接项目组的所有人用master分支），但这样并不是很合理，1.于是我把github代码拉下来然后略微改动（写个注释啥的都行），然后强行把代码推到master主分支，使用git push -f origin master强行推，2.然后再对文件做略微改定（写个注释啥的都行），再创建分支合并去合并就不会出上面的问题了…过程如下:<br><code>注：若在git命令执行过程中产生问题请看小标题3.一些代码命令过程小问题的解决。</code></p><h2 id="1-先将master分支代码强行覆盖">1.先将master分支代码强行覆盖</h2><p>将master分支代码拉下来，这两种都可以，网上教程很多…<br><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202110272024670.png" alt="在这里插入图片描述"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>.git init<span class="token number">1</span>.git remote show origin<span class="token punctuation">(</span>查看当前git的仓库地址是否在你的项目的仓库地址<span class="token punctuation">)</span><span class="token number">2</span>.没在当前的项目的仓库地址的话通过这样命令修改：git remote set-url origin gitxxxxxxxxxxxxxxxxxxxx/front.git<span class="token punctuation">(</span>若报错：error: No such remote <span class="token string">'origin'</span>。解决：git remote <span class="token function">add</span> origin <span class="token string">"gitxxxxxxxxxxxxxxxxxxx/front.git"</span>）<span class="token punctuation">)</span><span class="token number">3</span>.git branch 检查当前所在分支（若无输出就是没有自己的分支，按下面创建一个）<span class="token number">4</span>.本地创建一个新的分支： <span class="token function">git</span> checkout -b master<span class="token number">5</span>.将所有文件添加到暂存区git <span class="token function">add</span> <span class="token builtin class-name">.</span> 检查状态git status。<span class="token number">6</span>.将你的分支提交到本地仓库中，添加一个提交消息git commit -m <span class="token string">"完成xxxxxxxx功能"</span><span class="token number">7</span>.强行提交代码：git push -f origin master</code></pre><h2 id="2-合并分支">2.合并分支</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.git branch 检查当前所在分支（若无输出就是没有自己的分支，按下面创建一个）<span class="token number">2</span>.本地创建一个新的分支： <span class="token function">git</span> checkout -b  xxx（自己取一个名字）<span class="token number">3</span>.检查当前分支的文件状态git status，将所有文件添加到暂存区git <span class="token function">add</span> <span class="token builtin class-name">.</span> 再检查状态git status。<span class="token number">4</span>.将你的分支提交到本地仓库中，添加一个提交消息git commit -m <span class="token string">"完成xxxxxxxx功能"</span><span class="token number">5</span>.将本地的你的分支推送到云端origin中，并创建一个你的分支名且以xxx命名。git push –u origin xxx<span class="token number">6</span>.分支的合并：将所有分支合并到主分支，git branch检查是否在主分支，不在就切换回主分支git checkout master，再检查git branch。合并：git merge xxx。再git push -u origin master就可以啦</code></pre><p>成功截图：<br><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images1/202110272024896.png" alt="在这里插入图片描述"></p><h2 id="3-一些代码命令过程小问题的解决">3.一些代码命令过程小问题的解决</h2><p>（上面代码执行可能出现的情况）</p><pre class="language-bash" data-language="bash"><code class="language-bash">// 报错情况1：fatal: not a <span class="token function">git</span> repository <span class="token punctuation">(</span>or any of the parent directories<span class="token punctuation">)</span>: .git。解决：git init</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">// 报错情况2：error: No such remote <span class="token string">'origin'</span>。// 修改远程的url的命令,前提是要先有远程url你必须先增加一个远程url。解决：git remote <span class="token function">add</span> origin <span class="token string">"gitxxxxxxxxxxxxxxxxxxx/front.git"</span>）</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">// 报错情况3：fatal: The current branch master has no upstream branch.To push the current branch and <span class="token builtin class-name">set</span> the remote as upstream, use <span class="token function">git</span> push --set-upstream origin master。解决：git push -u origin xxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> ithub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记(1)---Spring项目学习(牛课网社区)</title>
      <link href="/2021/10/14/spring/"/>
      <url>/2021/10/14/spring/</url>
      
        <content type="html"><![CDATA[<h1>Spring项目学习(牛课网社区)</h1><p>选中属性，按alter+insert生成getterandsetter</p><p>搜索全局文件，按atrl+shift+N</p><h2 id="maven">maven</h2><p>下载maven <a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><p>配置conf下的settings.xml</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729172049175.png" alt="image-20210729172049175"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417183900035.png" alt="image-20210417183900035"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622214129419.png" alt="image-20210622214129419"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417183758429.png" alt="image-20210417183758429"></p><pre class="language-none"><code class="language-none">mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=falsemvn archetype:generate -DgroupId=com.nowcoder.mavendemo1 -DartifactId=mavendemo1 -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false</code></pre><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417183722054.png" alt=""></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417183458991.png" alt="image-20210417183458991"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417184224428.png" alt="image-20210417184224428"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417184301278.png" alt="image-20210417184301278"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417184338695.png" alt="image-20210417184338695"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417185621848.png" alt="image-20210417185621848"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417185904782.png" alt="image-20210417185904782"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417190139348.png" alt="image-20210417190139348"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417190250495.png" alt="image-20210417190250495"></p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a> 可以下载包的地方</p><p>比如下载spring aspects</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417225332723.png" alt="image-20210417225332723"></p><p>添加</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417225655864.png" alt="image-20210417225655864"></p><h2 id="spring-initializr">spring initializr</h2><p>用这个 <a href="https://start.spring.io/">https://start.spring.io/</a>  可以更方便创建一个springboot项目，主要是可以直接下载多个以来包，不麻烦</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210417224652901.png" alt="image-20210417224652901"></p><p>Springboot的jar里面带有一个tomcat</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210418172930390.png" alt="image-20210418172930390"></p><h2 id="Spring">Spring</h2><p>SpringFramework基石</p><p>构建一切—Springboot构建项目</p><p>协调一切—Springcloud微服务-拆成几个然后集成在一起------------------------------------本项目不用</p><p>连接一切—spring cloud data flow数据集成的功能-------------------------------本项目不用</p><p>Spring Security</p><p>Spring AMQT消息队列</p><p><strong>Spring Framework</strong></p><p>Spring Core —管理一切</p><p>​- IoC–面向对象的管理的一种思想、AOP-- 面向界面的管理的一种思想</p><p>Spring Data Access --管理数据库</p><p>​- Transactions–管理事务、Spring MyBatis</p><p>Web Servlet —web开发</p><p>​- Spring MVC</p><p>Integration —</p><p>​- Email、Scheduling、AMQP、Security</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618185911104.png" alt="image-20210618185911104"></p><p>controller处理浏览器的请求，在处理请求的过程中，会调用业务组件去处理当前的业务，然后业务组件回去调用dao去访问数据库。</p><p>controller–&gt;调service–&gt;调dao</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618185816122.png" alt="image-20210618185816122"></p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618191858913.png" alt="image-20210618191858913" style="zoom:25%;"><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618191925985.png" alt="image-20210618191925985"></p><h2 id="Mybatis">Mybatis</h2><h3 id="mysql">mysql</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618212121032.png" alt="image-20210618212121032"></p><p>将资料中的my.ini文件拉到mtsql安装路径，并内容修改</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618212446752.png" alt="image-20210618212446752"></p><p>将mysql的bin路径配置到系统的环境变量中的path中</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618212543758.png" alt="image-20210618212543758"></p><p>管理员身份cmd进入mysql的bin路径下，进行初始化</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618214501841.png" alt="image-20210618214501841"></p><p>任意路径下登录</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618214705955.png" alt="image-20210618214705955"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618215711372.png" alt="image-20210618215711372"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618220433442.png" alt="image-20210618220433442"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618220702264.png" alt="image-20210618220702264"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210618220913846.png" alt="image-20210618220913846"></p><p>安装mysqlworkbench。。。</p><h4 id="自己建数据库，表，以及向表中插如数据">自己建数据库，表，以及向表中插如数据</h4><p><strong>命令行建表：</strong></p><p>create database 数据库名称</p><p>use 数据库名称</p><p>create table user(</p><p>​                      id int auto_increment not null primary key,</p><p>​                      Lastname varchar(30),</p><p>​                      Firstname varchar(30),</p><p>​                      Address varchar(30),</p><p>​                      City varchar(30)</p><p>​                     );</p><p>insert into persons(Lastname,Firstname,Address,City)  values  (“Adams”,“John”,“Oxford Street”,“London”);</p><p>用workbench建数据库，表</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210810212722511.png" alt="image-20210810212722511"></p><p>注意创建数据表时其列不可以为空，并且最好设置一个主键并为主键设置not null（非空）、auto increment（自动递增）属性</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210810213454450.png" alt="image-20210810213454450"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619181642531.png" alt="image-20210619181642531"></p><h3 id="mysql-connecter">mysql connecter</h3><p>进入https://mvnrepository.com/，搜索mysql和mybatis</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619182119967.png" alt="image-20210619182119967"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619182159061.png" alt="image-20210619182159061"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619182250256.png" alt="image-20210619182250256"></p><h3 id="Mybatis-Spring-Boot-Starter">Mybatis Spring Boot Starter</h3><p>如图</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619190440739.png" alt="image-20210619190440739"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619190515418.png" alt="image-20210619190515418"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210619194902377.png" alt="image-20210619194902377"></p><p>在application.properties中增加数据源和mynatis的配置 （资料中获取）修改其中的配置</p><p>映射文件的存放位置就是xml写sql文件的位置，通常放在resources下，建立mapper目录</p><p>在com.nowcoder.community下创建一个实体类entity用以存放实体类的包，将来在这个包之下创建实体类用来封装某一张表的数据</p><p>访问user表中的数据</p><p>在entity下创建一个user类(类可以封装表里的数据，然后才好对他进行操作)，与user表对应</p><p>要访问数据库，所以在dao层写一个组件，写一个名为UserMapper的接口，同时需要加一个注解@Mapper才能让Spring容器装配这个Bean</p><p>要实现UserMapper的接口需要提供一个配置文件，配置文件里需要对每一个方法提供它所需要的sql，然后底层自动帮我们生成实现类。</p><p>在resources的mapper路径下创建一个user-mapper.xml文件，文件结构模板可以从（<a href="https://mybatis.org/mybatis-3/zh/getting-started.html%EF%BC%89%E6%89%BE%E5%88%B0">https://mybatis.org/mybatis-3/zh/getting-started.html）找到</a></p><p>在测试类中新建一个类MapperTests对其进行测试，</p><p>几个主要的文件</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210620161205192.png" alt="image-20210620161205192"></p><h2 id="社区首页">社区首页</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210620161519248.png" alt="image-20210620161519248"></p><p>分页涉及到的代码页面</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621162258729.png" alt="image-20210621162258729"></p><h3 id="项目调试技巧之服务端断点调试">项目调试技巧之服务端断点调试</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621155335773.png" alt="image-20210621155335773"></p><p>状态码含义：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500</a></p><p><strong>服务端断点调试：</strong></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621160006296.png" alt="image-20210621160006296"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621160044582.png" alt="image-20210621160044582"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621160309609.png" alt="image-20210621160309609"></p><p>回到后台程序</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621160359607.png" alt="image-20210621160359607"></p><p>一些快捷键：按F8执：行下一行；按F7：在这一行进入当前行的方法内部执行</p><h3 id="项目调试技巧之客户断点调试">项目调试技巧之客户断点调试</h3><p><strong>客户端的调试技巧</strong></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621161631957.png" alt="image-20210621161631957"></p><p>按F10进入下一行，安F11进入方法，执行到底F8</p><h3 id="项目调试技巧之日志">项目调试技巧之日志</h3><p><strong>日志</strong></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621162600805.png" alt="image-20210621162600805"></p><p>将日志存到文件中：</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621164646406.png" alt="image-20210621164646406"></p><p>要使不同类型的日志错误存在不同的文件中</p><p>将素材中的logback-spring.xml复制到resources中</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621165623778.png" alt="image-20210621165623778"></p><h2 id="git">git</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621170943331.png" alt="image-20210621170943331"></p><h3 id="如何提交代码">如何提交代码</h3><p><strong>代码–&gt;本地仓库–&gt;远程仓库</strong></p><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">https://git-scm.com/book/zh/v2/起步-安装-Git</a></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621170925635.png" alt="image-20210621170925635"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621171321008.png" alt="image-20210621171321008"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621171512752.png" alt="image-20210621171512752"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621171656904.png" alt="image-20210621171656904"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621171917263.png" alt="image-20210621171917263"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621172451733.png" alt="image-20210621172451733"></p><p>要上传到远程仓库，git使用ssl进行传输，所以我们需要配置密钥，使用命令ssh-keygen -t rsa -C “<a href="mailto:1634586466@qq.com">1634586466@qq.com</a>”，然后一直enter</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621192515345.png" alt="image-20210621192515345"></p><p>将这个路径中的文件中的内容配到到远程仓库，这里我们使用牛课网的远程仓库</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621192741653.png" alt="image-20210621192741653"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621193601896.png" alt="image-20210621193601896"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621193706127.png" alt="image-20210621193706127"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621193728119.png" alt="image-20210621193728119"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621193848017.png" alt="image-20210621193848017"></p><p>在本地与远程仓库关联</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621201242759.png" alt="image-20210621201242759"></p><p>上传项目，注意此处要输入牛课网的账户密码，特别是要在项目页面先修改一下密码</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621202607199.png" alt="image-20210621202607199"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621202451815.png" alt="image-20210621202451815"></p><p>下载某个仓库</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621204038048.png" alt="image-20210621204038048"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621204206167.png" alt="image-20210621204206167"></p><h3 id="Idea中如何提交">Idea中如何提交</h3><p>file–&gt;settings–&gt;Version Control–&gt;Git</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621205224205.png" alt="image-20210621205224205"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621205525018.png" alt="image-20210621205525018"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621210449163.png" alt="image-20210621210449163"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621211132057.png" alt="image-20210621211132057"></p><p>将提交到本地仓库的代码提交到远程仓库：先到牛课网创建一个名为community的仓库，然后复制已有项目的连接(<a href="https://git.nowcoder.com/642983856/community.git">https://git.nowcoder.com/642983856/community.git</a>)，到idea中进行如下操作</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621211359670.png" alt="image-20210621211359670"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621211518753.png" alt="image-20210621211518753"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012005103956.png" alt="image-20211012005103956"></p><p>push，然后输入账号密码就好了</p><h2 id="登录模块">登录模块</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621212245100.png" alt="image-20210621212245100"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621212309088.png" alt="image-20210621212309088"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621214406759.png" alt="image-20210621214406759"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210621214442268.png" alt="image-20210621214442268"></p><p>注意password设置为授权码而不是登录密码</p><p><img src="C:%5CUsers%5C%E6%88%91%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210621232639503.png" alt="image-20210621232639503"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622093953740.png" alt="image-20210622093953740"></p><h2 id="开发注册模块">开发注册模块</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622100127231.png" alt="image-20210622100127231"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622100208220.png" alt="image-20210622100208220"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622170347188.png" alt="image-20210622170347188"></p><h2 id="登录模块-2">登录模块</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622170411567.png" alt="image-20210622170411567"></p><h3 id="cookie">cookie</h3><p>存密码不安全</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622234319163.png" alt="image-20210622234319163"></p><h3 id="session">session</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622234121949.png" alt="image-20210622234121949"></p><p>有多台服务器的情况</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210622235944846.png" alt="image-20210622235944846"></p><h2 id="验证码">验证码</h2><p>登录功能</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210705204727860.png" alt="image-20210705204727860"></p><h1>111</h1><p>顺序：</p><p>entity–详单与数据库属性声明，dao—实际操作数据库，可在其中直接写语句操作，也可以在另外的.xml文件中进行操作</p><p>service–具体处理过程中的一些业务，比如判断，空值这些。</p><p>controller–具体的访问路径，处理页面的请求，返回页面的请求</p><h2 id="显示登录信息">显示登录信息</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707105811195.png" alt="image-20210707105811195"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707162934900.png" alt="image-20210707162934900"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707165942107.png" alt="image-20210707165942107"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707171921454.png" alt="image-20210707171921454"></p><h2 id="设置头像">设置头像</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707171957172.png" alt="image-20210707171957172"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707192559759.png" alt="image-20210707192559759"></p><h2 id="检查登录状态">检查登录状态</h2><p>(未登录不能进入某些页面)</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707193023365.png" alt="image-20210707193023365"></p><p>自定义注解</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707200859342.png" alt="image-20210707200859342"></p><h1>开发社区核心功能</h1><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707201155704.png" alt=""></p><p>原理图</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210707202551799.png" alt=""></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708090945893.png" alt=""></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/Snipaste_2021-10-11_23-53-37.png" alt=""></p><h2 id="发布帖子">发布帖子</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/Snipaste_2021-10-11_23-55-35.png" alt=""></p><p>测试</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708095926547.png" alt=""></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708105316652.png" alt="image-20210708105316652"></p><h2 id="显示帖子详情">显示帖子详情</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708172631315.png" alt="image-20210708172631315"></p><h2 id="事务管理">事务管理</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708172601961.png" alt="image-20210708172601961"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708172948843.png" alt="image-20210708172948843"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708173916235.png" alt="image-20210708173916235"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708173930721.png" alt="image-20210708173930721"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708173948259.png" alt="image-20210708173948259"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708174014066.png" alt="image-20210708174014066"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708174829093.png" alt="image-20210708174829093"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708175706917.png" alt="image-20210708175706917"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708175732406.png" alt="image-20210708175732406"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210708175812294.png" alt="image-20210708175812294"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210709091517332.png" alt="image-20210709091517332"></p><h2 id="添加评论">添加评论</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210709091413414.png" alt="image-20210709091413414"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210709103815762.png" alt="image-20210709103815762"></p><h2 id="私信列表">私信列表</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210709103923302.png" alt="image-20210709103923302"></p><h2 id="image-20210712091657723"><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712091657723.png" alt="image-20210712091657723"></h2><h2 id="私信详情">私信详情</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712091720788.png" alt="image-20210712091720788"></p><p>发送私信</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712091738652.png" alt="image-20210712091738652"></p><h2 id="统一异常处理">统一异常处理</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210719165101603.png" alt="image-20210719165101603"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/Snipaste_2021-10-12_00-21-49.png" alt=""></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/Snipaste_2021-10-12_00-22-11.png" alt=""></p><h2 id="统一记录日志（主要记录service组件前的行为）">统一记录日志（主要记录service组件前的行为）</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712092653872.png" alt="image-20210712092653872"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712092713557.png" alt="image-20210712092713557"></p><p>目标对象—方便代码—方便组建—poinycut声明到底要在哪里切入</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712093144548.png" alt="image-20210712093144548"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712093309530.png" alt="image-20210712093309530"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712100811610.png" alt="image-20210712100811610"></p><h2 id="Redis">Redis</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712100849592.png" alt="image-20210712100849592"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712100905410.png" alt="image-20210712100905410"></p><p>此路径下下载redis <a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></p><hr><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712102024375.png" alt="image-20210712102024375"></p><p>下载在D:\work\redis路径下之后配置环境变量</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712102152622.png" alt="image-20210712102152622"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712105426388.png" alt="image-20210712105426388"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712155316081.png" alt="image-20210712155316081"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712174200749.png" alt="image-20210712174200749"></p><h2 id="点赞功能">点赞功能</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712221929227.png" alt="image-20210712221929227"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210712221900075.png" alt="image-20210712221900075"></p><h2 id="我收到的赞">我收到的赞</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210713100007986.png" alt="image-20210713100007986"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210713095941359.png" alt=""></p><p>关注，取消关注</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210713100031719.png" alt="image-20210713100031719"></p><h2 id="likeService处没有达到视频效果自己改的代码（redis的序列化配置错误导致-已解决）">likeService处没有达到视频效果自己改的代码（redis的序列化配置错误导致-已解决）</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210713153636026.png" alt="image-20210713153636026"></p><p>…</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210713170902636.png" alt="image-20210713170902636"></p><h2 id="关注与取消关注">关注与取消关注</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714091042066.png" alt="image-20210714091042066"></p><h2 id="关注列表和粉丝列表">关注列表和粉丝列表</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714102732548.png" alt="image-20210714102732548"></p><h2 id="优化登录">优化登录</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714102902712.png" alt="image-20210714102902712"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714192423265.png" alt="image-20210714192423265"></p><h2 id="巨坑发现：自己跟着设计的redis配置居然全部是string类型的序列化（已改为json）">巨坑发现：自己跟着设计的redis配置居然全部是string类型的序列化（已改为json）</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714185204403.png" alt="image-20210714185204403"></p><h2 id="Kafka">Kafka</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714192508720.png" alt="image-20210714192508720"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714212417176.png" alt="image-20210714212417176"></p><p>下载</p><p><a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714214126369.png" alt="image-20210714214126369"></p><h3 id="1-配置">1.配置</h3><p>配置zookeeper存放数据的位置</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714214422639.png" alt="image-20210714214422639"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714214400609.png" alt="image-20210714214400609"></p><p>配置日志存放路径</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714214608971.png" alt="image-20210714214608971"></p><p><strong><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714214543302.png" alt="image-20210714214543302"></strong></p><h3 id="2-启动1">2.启动1</h3><p>win+r -&gt;cmd进入d盘下   bin\windows\zookeeper-server-start.bat config\zookeeper.properties</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714221625536.png" alt="image-20210714221625536"></p><p>此处遇见问题<strong>此时不应有 \Java\jdk-15\lib\dt.jar</strong></p><p>**解决：**将java安装路径切到没有空格的地方</p><p>先找到java安装路径：win+r -&gt;cmd输入   java -verbose</p><p>原有：</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714221914703.png" alt="image-20210714221914703"></p><p>现在：</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714221805511.png" alt="image-20210714221805511"></p><p>然后在环境变量中将JAVA_HOME改为现在的这个路径即可</p><h3 id="2-启动2">2.启动2</h3><p>win+r -&gt;cmd进入d盘下    bin\windows\kafka-server-start.bat config\server.properties</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714223331099.png" alt="image-20210714223331099"></p><p>此处遇到问题：'<strong>wmic’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</strong></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714222547493.png" alt="image-20210714222547493"></p><p>解决：</p><p>在C:盘下找到wbem文件夹，且里面包含WMIC.exe，将其添加到系统变量path中去。<br>比如我的路径是：“C:\Windows\System32\wbem”，在系统变量path中新建该路径。就可以正常启动Kafka了</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714223012493.png" alt="image-20210714223012493"></p><p>成功！</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714223146256.png" alt="image-20210714223146256"></p><h3 id="3-建立会话-生产者">3.建立会话-生产者</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714224757945.png" alt="image-20210714224757945"></p><h3 id="3-建立会话-消费者">3.建立会话-消费者</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210714224832717.png" alt="image-20210714224832717"></p><h3 id="4-spring整合kafka">4.spring整合kafka</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715091316446.png" alt="image-20210715091316446"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715093134919.png" alt="image-20210715093134919"></p><h2 id="发送系统通知">发送系统通知</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715093158562.png" alt="image-20210715093158562"></p><p>评论-额外增加了帖子评论的实体查询功能</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715112234998.png" alt="image-20210715112234998"></p><p>点赞-原有方法上增加了postId参数</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715113703828.png" alt="image-20210715113703828"></p><p>评论</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715113303039.png" alt="image-20210715113303039"></p><h2 id="解决kafka启动中出现锁死的现象">解决kafka启动中出现锁死的现象</h2><p>直接删除kafka-logs文件夹即可</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715114111149.png" alt="image-20210715114111149"></p><h2 id="显示系统通知">显示系统通知</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715230119984.png" alt="image-20210715230119984"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715230110031.png" alt="image-20210715230110031"></p><p>拦截显示消息的未读数量</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715230656424.png" alt="image-20210715230656424"></p><h2 id="Elasticsearch">Elasticsearch</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715230740136.png" alt="image-20210715230740136"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715230828406.png" alt="image-20210715230828406"></p><h3 id="下载">下载</h3><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-6-4-3">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-6-4-3</a></p><p><img src="C:%5CUsers%5CMZSH%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210715232236938.png" alt="image-20210715232236938"></p><h3 id="配置">配置</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715232836591.png" alt="image-20210715232836591"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715232803591.png" alt="image-20210715232803591"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210716000207214.png" alt="image-20210716000207214"></p><p>配置环境变量</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715233032372.png" alt="image-20210715233032372"></p><p>由于Elasticsearch只支持中文的分词，所以需要安装中文分词插件，下载https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v6.4.3</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715234219686.png" alt="image-20210715234219686"></p><p>将其解压到这个路径下</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715234059611.png" alt="image-20210715234059611"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715234856439.png" alt="image-20210715234856439"></p><p>下载postman</p><p>启动Elasticsearch</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210715235105127.png" alt="image-20210715235105127"></p><p>配置之后启动一直闪退，已解决，方法载于csdn</p><h3 id="查看状态">查看状态</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210717103247001.png" alt="image-20210717103247001"></p><h3 id="Spring中注入elasticsearch">Spring中注入elasticsearch</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210717105543610.png" alt="image-20210717105543610"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210717105950396.png" alt="image-20210717105950396"></p><p>解决elasticsearch和redis都基于netty的冲突（底层）</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210717111417457.png" alt="image-20210717111417457"></p><p>Spring中的elasticsearch在整合项目时，会自动把实体类中数据和elasticsearch的数据做一个映射，所以做一个配置@Document</p><h2 id="SpringSecurity">SpringSecurity</h2><p><strong><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210719090031789.png" alt="image-20210719090031789"></strong></p><p>CSRF攻击</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210718173330172.png" alt="image-20210718173330172"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210720191814321.png" alt="image-20210720191814321"></p><h2 id="置顶，加精，删除">置顶，加精，删除</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210720221743561.png" alt="image-20210720221743561"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210720222305609.png" alt="image-20210720222305609"></p><h2 id="redis高级数据类型（网站数据统计）">redis高级数据类型（网站数据统计）</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210720222327240.png" alt="image-20210720222327240"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210720224815452.png" alt="image-20210720224815452"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210720230044656.png" alt="image-20210720230044656"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721110332842.png" alt="image-20210721110332842"></p><h2 id="任务执行和调度">任务执行和调度</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721151401376.png" alt="image-20210721151401376"></p><p>测试：</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721175817365.png" alt="image-20210721175817365"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721190036043.png" alt="image-20210721190036043"></p><h2 id="热帖排行">热帖排行</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721213958491.png" alt="image-20210721213958491"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721214026071.png" alt="image-20210721214026071"></p><h2 id="生成长图">生成长图</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721214218104.png" alt="image-20210721214218104"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721215004222.png" alt="image-20210721215004222"></p><p>配置环境</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721214736991.png" alt="image-20210721214736991"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210721215532708.png" alt="image-20210721215532708"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722160553589.png" alt="image-20210722160553589"></p><p>将文件上传至云服务器</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722162146442.png" alt="image-20210722162146442"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722201124420.png" alt="image-20210722201124420"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722220558899.png" alt="image-20210722220558899"></p><h2 id="优化网站性能">优化网站性能</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722221223440.png" alt="image-20210722221223440"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722221424267.png" alt="image-20210722221424267"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210722221845978.png" alt="image-20210722221845978"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723173741748.png" alt="image-20210723173741748"></p><h3 id="性能测试工具jmeter">性能测试工具jmeter</h3><p><a href="http://xn--jmeter-hp7iw185b.apache.org">下载jmeter.apache.org</a></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723171554685.png" alt="image-20210723171554685"></p><p>测试配置</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723171938590.png" alt="image-20210723171938590"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723171949711.png" alt="image-20210723171949711"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723171918209.png" alt="image-20210723171918209"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723171847606.png" alt="image-20210723171847606"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723172025696.png" alt="image-20210723172025696"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723172139453.png" alt="image-20210723172139453"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723172234044.png" alt="image-20210723172234044"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723172404599.png" alt="image-20210723172404599"></p><p>得到结果</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723172844398.png" alt="image-20210723172844398"></p><p>清除结果</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723172823958.png" alt="image-20210723172823958"></p><p>打开注释掉的缓存中取数据的代码</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723173137563.png" alt="image-20210723173137563"></p><p>再测试，性能变好</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723173058736.png" alt="image-20210723173058736"></p><h2 id="单元测试">单元测试</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723174051952.png" alt="image-20210723174051952"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723193717361.png" alt="image-20210723193717361"></p><h2 id="项目监控">项目监控</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723193804485.png" alt="image-20210723193804485"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723194001435.png" alt="image-20210723194001435"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723195815289.png" alt="image-20210723195815289"></p><h2 id="项目部署">项目部署</h2><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723200046399.png" alt="image-20210723200046399"></p><h3 id="安装putty">安装putty</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723201548186.png" alt="image-20210723201548186"></p><h3 id="下载mysql的yum仓库">下载mysql的yum仓库</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723213645838.png" alt="image-20210723213645838"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232357373.png" alt="image-20210723232357373"></p><p>有些不支持yum安装的，取官网下载针对linux安装包，后缀是tar.gz的安装包</p><h3 id="下载maven">下载maven</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232311148.png" alt="image-20210723232311148"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232429117.png" alt="image-20210723232429117"></p><h3 id="下载kafka">下载kafka</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232625080.png" alt="image-20210723232625080"></p><p>点击进入</p><p><strong><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726164925116.png" alt="image-20210726164925116"></strong></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232556201.png" alt="image-20210723232556201"></p><h3 id="下载tomcat">下载tomcat</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232053251.png" alt="image-20210723232053251"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723232246653.png" alt="image-20210723232246653"></p><h3 id="下载es">下载es</h3><p>同样的方式</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726171226161.png" alt="image-20210726171226161"></p><h3 id="上传本地文件到服务器">上传本地文件到服务器</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726161402760.png" alt="image-20210726161402760"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723231923568.png" alt="image-20210723231923568"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210723231836037.png" alt="image-20210723231836037"></p><h3 id="下载jre">下载jre</h3><p>查看java版本</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725151917703.png" alt="image-20210725151917703"></p><p>下载</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725151954699.png" alt="image-20210725151954699"></p><h3 id="解压maven到opt">解压maven到opt</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725154128922.png" alt="image-20210725154128922"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725154212605.png" alt="image-20210725154212605"></p><p>进入这个路径配置环境变量，然后按insert，进入编辑模式</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725154227729.png" alt="image-20210725154227729"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725193431232.png" alt="image-20210725193431232"></p><p>然后按esc输入:wq保存并推出</p><p>然后source /etc/profile使其生效</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725194543393.png" alt="image-20210725194543393"></p><p>找到本地settings.xml文件中的maven线上资源</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725194652886.png" alt="image-20210725194652886"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725194630656.png" alt="image-20210725194630656"></p><h3 id="解压mysql">解压mysql</h3><p>先看一下有多少musql的版本，有很少</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725195413386.png" alt="image-20210725195413386"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725195124616.png" alt="image-20210725195124616"></p><p>看一下mysql的版本，有很多</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725195308880.png" alt="image-20210725195308880"></p><p>安装</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725200013718.png" alt="image-20210725200013718"></p><p>启动mysql，发现问题（由于之前在宝塔安装了mysql5，导致问题，已通过卸载两个重新安装解决）</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210725201709043.png" alt="image-20210725201709043"></p><p>启动mysql，成功：</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726155815403.png" alt="image-20210726155815403"></p><p>从mysql安装的日志文件中搜索初始化的默认密码</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726160330147.png" alt="image-20210726160330147"></p><h3 id="将表导入数据库">将表导入数据库</h3><p>解压上传上来的文件，unzip必须对应zip后缀</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726161603282.png" alt="image-20210726161603282"></p><p>建库，导三个表</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726162048027.png" alt="image-20210726162048027"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726162122205.png" alt="image-20210726162122205"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726162135493.png" alt="image-20210726162135493"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726162146745.png" alt="image-20210726162146745"></p><p>将路径里面带localhost这个词的头像路径换为线上的</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726162900289.png" alt="image-20210726162900289"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726162842960.png" alt="image-20210726162842960"></p><h3 id="安装redis">安装redis</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726163103269.png" alt="image-20210726163103269"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726163303417.png" alt="image-20210726163303417"></p><h3 id="解压安装kafka">解压安装kafka</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726164855002.png" alt="image-20210726164855002"></p><p>查看zookeeper.properties和server.properties的配置是否符合规范</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726165254604.png" alt="image-20210726165254604"></p><p>到kafka主路径下</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726165636271.png" alt="image-20210726165636271"></p><p>已后台的方式启动kafka</p><p>bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</p><p>nohup bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726170017368.png" alt="image-20210726170017368"></p><p>查看主题</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726170454518.png" alt="image-20210726170454518"></p><h3 id="安装es">安装es</h3><p>跟上面同样的方式解压</p><p>解压分词插件到es安装路径下</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726170730121.png" alt="image-20210726170730121"></p><p>配置文件elasticsearch.yml和jvm.options</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726171445719.png" alt="image-20210726171445719"></p><p>不能用root启动，创建一个新的用户</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726172137166.png" alt="image-20210726172137166"></p><h3 id="安装wkhtmltopdf">安装wkhtmltopdf</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726172424011.png" alt="image-20210726172424011"></p><p>下载小型的GUI服务器</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726172630816.png" alt="image-20210726172630816"></p><p>xvfb-run --server-args=“-screen 0, 1024×768×24” wkhtmltoimage <a href="https://baidu.com">https://baidu.com</a> 1.png</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726201942507.png" alt="image-20210726201942507"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726201426523.png" alt="image-20210726201426523"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726202049768.png" alt="image-20210726202049768"></p><h3 id="解压安装tomcat">解压安装tomcat</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726202351267.png" alt="image-20210726202351267"></p><p>给tomcat配置环境变量</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726202842531.png" alt="image-20210726202842531"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726202714732.png" alt="image-20210726202714732"></p><h3 id="解压安装nginx">解压安装nginx</h3><p>到/usr/loca路径下执行wget <a href="https://nginx.org/download/nginx-1.14.0.tar.gz">https://nginx.org/download/nginx-1.14.0.tar.gz</a></p><p>然后</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727160001215.png" alt="image-20210727160001215"></p><p>解压之后</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727160117439.png" alt="image-20210727160117439"></p><p>然后</p><p>make</p><p>make install</p><p>配置文件</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727160226312.png" alt="image-20210727160226312"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727160313950.png" alt="image-20210727160313950"></p><p>保存退出之后启动</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727160414526.png" alt="image-20210727160414526"></p><h3 id="项目修改打包">项目修改打包</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727160931990.png" alt="image-20210727160931990"></p><p>先把tomcat关了</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727161202899.png" alt="image-20210727161202899"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727161343556.png" alt="image-20210727161343556"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727172817383.png" alt="image-20210727172817383"></p><p>回到项目修改</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727161505850.png" alt="image-20210727161505850"></p><p>global.js中</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727161738337.png" alt="image-20210727161738337"></p><p>homecontroller中</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727162251962.png" alt="image-20210727162251962"></p><p>打包格式和命名修改</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727163838701.png" alt="image-20210727163838701"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727163858094.png" alt="image-20210727163858094"></p><p>配置修改</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727163738462.png" alt="image-20210727163738462"></p><p>新建一个CommunityServletInitializer类</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727164742689.png" alt="image-20210727164742689"></p><p>去掉target，减小打包的大小</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727164537894.png" alt="image-20210727164537894"></p><h3 id="打包到服务器">打包到服务器</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727165325147.png" alt="image-20210727165325147"></p><p>解压</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727165646680.png" alt="image-20210727165646680"></p><p>到community路径下</p><p>mvn clean package -Dmaven.test.skip=true</p><p>把测试类全部忽略掉，同时会下载依赖</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727170842405.png" alt="image-20210727170842405"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727170810415.png" alt="image-20210727170810415"></p><p>mv ROOT.war /opt/apache-tomcat-9.0.50/webapps/</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727171313224.png" alt="image-20210727171313224"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012010413817.png" alt="image-20211012010413817"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727173931812.png" alt="image-20210727173931812"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210727174051180.png" alt="image-20210727174051180"></p><h3 id="遇到的一些error和waining">遇到的一些error和waining</h3><h4 id="Job-for-mysqld-service-failed-because-the-control-process-exited-with-error">Job for mysqld.service failed because the control process exited with error</h4><p>由于之前安装了mysql一直不知道，安装了多个数据库</p><h4 id="gzip-stdin-not-in-gzip-format-tar-Child-returned-status-1-tar-Error-is-not-recoverable-exiting-now">gzip: stdin: not in gzip format tar: Child returned status 1 tar: Error is not recoverable: exiting now</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728111509437.png" alt="image-20210728111509437"></p><h4 id="warning：The-web-application-created-a-ThreadLocal-with-key">warning：The web application created a ThreadLocal with key</h4><p>注释掉tomcat的conf中的server.xml文件中</p><pre class="language-none"><code class="language-none">&lt;!-- &lt;Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/&gt; --&gt;</code></pre><h3 id="服务器部署相关">服务器部署相关</h3><h4 id="一些命令：">一些命令：</h4><p>ll查看当前文件夹下的文件目录</p><p>pwd查看当前的文件路径</p><p>cd … 返回上一层目录</p><p>cd /返回到根路径</p><h4 id="通过xshell改变root用户的密码"><strong>通过xshell改变root用户的密码</strong></h4><p>先打开xshell,输入passwd,记住是passwd 不是password</p><h4 id="查看Mysql的日志">查看Mysql的日志</h4><p>/usr/sbin/mysqld</p><h4 id="完全卸载mysql">完全卸载mysql</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726154743418.png" alt="image-20210726154743418"></p><h4 id="卸载nginx的方式">卸载nginx的方式</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728110934756.png" alt="image-20210728110934756"></p><h4 id="rm-rf-文件名">rm -rf + 文件名</h4><p>​—该路径下删除某文件</p><h4 id="无法通过8080访问tomcat">无法通过8080访问tomcat</h4><p>----把8080 8005 8009端口都打开</p><h4 id="重启tomcat">重启tomcat</h4><p>—找到<img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726222946078.png" alt="image-20210726222946078"></p><p>bin下</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210726223015044.png" alt="image-20210726223015044"></p><h4 id="spring-boot-maven-plugin报红">spring-boot-maven-plugin报红</h4><p>换了新电脑之后要重新配置IDEA，经过一番折腾之后，springboot项目启动终于正常，但是发现pom文件中spring-boot-maven-plugin插件无法引入。<br>解决办法，指定版本；为什么刚开始没有注意？由于本项目系统的pom文件中的版本号都是在parent中指定，所以刚开始没有在这方便想。<br>原电脑不报红的原因是本地仓库在做其他系统的时候引入过该插件，所以不指定版本没有问题。</p><p>一些mysql命令</p><p>1.启动命令</p><p>[root@xufeng Desktop]# service mysqld start<br>Redirecting to /bin/systemctl start mysqld.service<br>2.关闭命令</p><p>[root@xufeng ~]# service mysqld stop<br>Redirecting to /bin/systemctl stop mysqld.service<br>3.重启命令</p><p>[root@xufeng ~]# service mysqld restart<br>Redirecting to /bin/systemctl restart mysqld.service</p><p>4.查看服务状态</p><p>[root@xufeng ~]# service mysqld status</p><h4 id="查看所有后台进程">查看所有后台进程</h4><p>ps aux | grep app.js</p><p>kill + 进程号 关闭某进程</p><h4 id="从-tmp-community查看日志">从/tmp/community查看日志</h4><h4 id="vim-退出命令-保存、放弃保存">vim 退出命令(保存、放弃保存)</h4><p>按ESC键 跳到命令模式，然后输入：</p><p>:w            - 保存文件，不退出 vim<br>:w file  -将修改另外保存到 file 中，不退出 vim<br>:w!          -强制保存，不退出 vim<br>:wq          -保存文件，退出 vim<br>:wq!        -强制保存文件，退出 vim<br>:q            -不保存文件，退出 vim<br>:q!          -不保存文件，强制退出 vim<br>:e!          -放弃所有修改，从上次保存文件开始再编辑</p><h3 id="项目总结">项目总结</h3><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728091025583.png" alt="image-20210728091025583"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728091715328.png" alt="image-20210728091715328"></p><p>常见面试题</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728092342167.png" alt="image-20210728092342167"></p><p>NDB支持集群</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728092435368.png" alt="image-20210728092435368"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728093136266.png" alt="image-20210728093136266"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728093351999.png" alt="image-20210728093351999"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728093622050.png" alt="image-20210728093622050"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728094048134.png" alt="image-20210728094048134"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728095403368.png" alt="image-20210728095403368"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728095604926.png" alt="image-20210728095604926"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728095810221.png" alt="image-20210728095810221"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728100103386.png" alt="image-20210728100103386"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728100249236.png" alt="image-20210728100249236"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728100531411.png" alt="image-20210728100531411"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728100710485.png" alt="image-20210728100710485"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728100912355.png" alt="image-20210728100912355"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728101406072.png" alt="image-20210728101406072"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728101541876.png" alt="image-20210728101541876"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728101857781.png" alt="image-20210728101857781"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728102643569.png" alt="image-20210728102643569"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728102923105.png" alt="image-20210728102923105"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728103042144.png" alt="image-20210728103042144"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728103420602.png" alt="image-20210728103420602"></p><h3 id="blog">blog</h3><h4 id="建项">建项</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728180900515.png" alt="image-20210728180900515"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728180851466.png" alt="image-20210728180851466"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728180946290.png" alt="image-20210728180946290"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728181040963.png" alt="image-20210728181040963"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729172941538.png" alt="image-20210729172941538"></p><p>用代码生成器生成代码，运行此段代码，输入m_user,m_blog</p><pre class="language-none"><code class="language-none">package com.markerhub;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringPool;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.InjectionConfig;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.po.TableInfo;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;import java.util.ArrayList;import java.util.List;import java.util.Scanner;// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中public class CodeGenerator {    /**     * &lt;p&gt;     * 读取控制台内容     * &lt;/p&gt;     */    public static String scanner(String tip) {        Scanner scanner = new Scanner(System.in);        StringBuilder help = new StringBuilder();        help.append("请输入" + tip + "：");        System.out.println(help.toString());        if (scanner.hasNext()) {            String ipt = scanner.next();            if (StringUtils.isNotEmpty(ipt)) {                return ipt;            }        }        throw new MybatisPlusException("请输入正确的" + tip + "！");    }    public static void main(String[] args) {        // 代码生成器        AutoGenerator mpg = new AutoGenerator();        // 全局配置        GlobalConfig gc = new GlobalConfig();        String projectPath = System.getProperty("user.dir");        gc.setOutputDir(projectPath + "/src/main/java");//        gc.setOutputDir("D:\\test");        gc.setAuthor("关注公众号：MarkerHub");        gc.setOpen(false);        // gc.setSwagger2(true); 实体属性 Swagger2 注解        gc.setServiceName("%sService");        mpg.setGlobalConfig(gc);        // 数据源配置        DataSourceConfig dsc = new DataSourceConfig();        dsc.setUrl("jdbc:mysql://localhost:3306/vueblog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC");        // dsc.setSchemaName("public");        dsc.setDriverName("com.mysql.cj.jdbc.Driver");        dsc.setUsername("root");        dsc.setPassword("root");        mpg.setDataSource(dsc);        // 包配置        PackageConfig pc = new PackageConfig();        pc.setModuleName(null);        pc.setParent("com.markerhub");        mpg.setPackageInfo(pc);        // 自定义配置        InjectionConfig cfg = new InjectionConfig() {            @Override            public void initMap() {                // to do nothing            }        };        // 如果模板引擎是 freemarker        String templatePath = "/templates/mapper.xml.ftl";        // 如果模板引擎是 velocity        // String templatePath = "/templates/mapper.xml.vm";        // 自定义输出配置        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();        // 自定义配置会被优先输出        focList.add(new FileOutConfig(templatePath) {            @Override            public String outputFile(TableInfo tableInfo) {                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！                return projectPath + "/src/main/resources/mapper/"                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;            }        });        cfg.setFileOutConfigList(focList);        mpg.setCfg(cfg);        // 配置模板        TemplateConfig templateConfig = new TemplateConfig();        templateConfig.setXml(null);        mpg.setTemplate(templateConfig);        // 策略配置        StrategyConfig strategy = new StrategyConfig();        strategy.setNaming(NamingStrategy.underline_to_camel);        strategy.setColumnNaming(NamingStrategy.underline_to_camel);        strategy.setEntityLombokModel(true);        strategy.setRestControllerStyle(true);        strategy.setInclude(scanner("表名，多个英文逗号分割").split(","));        strategy.setControllerMappingHyphenStyle(true);        strategy.setTablePrefix("m_");        mpg.setStrategy(strategy);        mpg.setTemplateEngine(new FreemarkerTemplateEngine());        mpg.execute();    }}</code></pre><h4 id="统一封装结果Result-java">统一封装结果Result.java</h4><pre class="language-none"><code class="language-none">package com.markerhub.common.lang;import lombok.Data;import java.io.Serializable;@Datapublic class Result implements Serializable {    private int code; // 200是正常，非200表示异常    private String msg;    private Object data;    public static Result succ(Object data) {        return succ(200, "操作成功", data);    }    public static Result succ(int code, String msg, Object data) {        Result r = new Result();        r.setCode(code);        r.setMsg(msg);        r.setData(data);        return r;    }    public static Result fail(String msg) {        return fail(400, msg, null);    }    public static Result fail(String msg, Object data) {        return fail(400, msg, data);    }    public static Result fail(int code, String msg, Object data) {        Result r = new Result();        r.setCode(code);        r.setMsg(msg);        r.setData(data);        return r;    }}</code></pre><h4 id="shiro-jwt">shiro+jwt</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729195719552.png" alt="image-20210729195719552"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729195620334.png" alt="image-20210729195620334"></p><p>校验—异常处理或登录<img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729215037245.png" alt="image-20210729215037245"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729205120019.png" alt="image-20210729205120019"></p><p>同理于</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729215136845.png" alt="image-20210729215136845"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729205459044.png" alt="image-20210729205459044"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210729215739650.png" alt="image-20210729215739650"></p><h3 id="一些error">一些error</h3><h4 id="java-程序包javax-servlet不存在">java: 程序包javax.servlet不存在</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210730091725778.png" alt="image-20210730091725778"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210730091810749.png" alt="image-20210730091810749"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011425690.png" alt="image-20211012011425690"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011555069.png" alt="image-20211012011555069"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011627010.png" alt="image-20211012011627010"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011647200.png" alt="image-20211012011647200"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011707923.png" alt="image-20211012011707923"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011753158.png" alt="image-20211012011753158"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011905256.png" alt="image-20211012011905256"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012011935387.png" alt="image-20211012011935387"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012012101465.png" alt="image-20211012012101465"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20211012012118384.png" alt="image-20211012012118384"></p><h3 id="一些：">一些：</h3><h4 id="给idea设置代理，提高下载包的速度">给idea设置代理，提高下载包的速度</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728182432528.png" alt="image-20210728182432528"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728182512086.png" alt="image-20210728182512086"></p><h4 id="跳过测试用例的方法">跳过测试用例的方法</h4><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728201904294.png" alt="image-20210728201904294"></p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210728201959702.png" alt="image-20210728201959702"></p><p>导入sql脚本的方法</p><p>可以在命令行中导入（上方mysql介绍中已有），也可以进入navicat的导入方式</p><p><img src="https://gitee.com/BeiHai-yu/md-image/raw/master/images/image-20210730092643954.png" alt="image-20210730092643954"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(3)---多线程</title>
      <link href="/2021/09/28/java-ji-chu-8-duo-xian-cheng/"/>
      <url>/2021/09/28/java-ji-chu-8-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="Java多线程">Java多线程</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921150533.png" alt="image-20210921150532908"></p><h3 id="基本概念：程序、进程、线程">基本概念：程序、进程、线程</h3><p><strong>程序</strong>**(program)**是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><p><strong>进程</strong>**(process)**是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期</p><ul><li><p>如：运行中的QQ，运行中的MP3播放器</p></li><li><p>程序是静态的，进程是动态的</p></li><li><p>进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p></li></ul><p><strong>线程</strong>(thread)，进程可进一步细化为线程，<strong>是一个程序内部的一条执行路径</strong>。</p><ul><li><p>若一个进程同一时间<strong>并行</strong>执行多个线程，就是支持多线程的</p></li><li><p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小</p></li><li><p>一个进程中的多个线程共享相同的内存单元/内存地址空间它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患</p></li></ul><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921152001.png" alt="image-20210921152000977"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921152019.png" alt="image-20210921152019602"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921152447.png" alt="image-20210921152447155"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921152729.png" alt="image-20210921152729455"></p><h3 id="线程的创建和使用">线程的创建和使用</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921153110.png" alt="image-20210921153109925"></p><p>Java语言的JVM允许程序运行多个线程，它通过<strong>java.lang.Thread</strong>类来体现。</p><p>Thread类的特性</p><ul><li><p>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为<strong>线程体</strong></p></li><li><p>通过该Thread对象的start()方法来启动这个线程，而非直接调用run()</p></li></ul><h4 id="方式一">方式一</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 多线程的创建，方式一：继承于Thread类 * 1. 创建一个继承于Thread类的子类 * 2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中 * 3. 创建Thread类的子类的对象 * 4. 通过此对象调用start() * &lt;p&gt; * 例子：遍历100以内的所有的偶数 * * @author shkstart * @create 2019-02-13 上午 11:46 */</span><span class="token comment">//1. 创建一个继承于Thread类的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment">//2. 重写Thread类的run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3. 创建Thread类的子类的对象</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span><span class="token comment">//        t1.run();</span>        <span class="token comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span><span class="token comment">//        t1.start();</span>        <span class="token comment">//我们需要重新创建一个线程的对象</span>        <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如下操作仍然是在main线程中执行的。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"***********main()************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/** * 练习：创建两个分线程，其中一个线程遍历100以内的偶数，另一个线程遍历100以内的奇数 * * @author shkstart * @create 2019-02-13 下午 2:16 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        MyThread1 m1 = new MyThread1();</span><span class="token comment">//        MyThread2 m2 = new MyThread2();</span><span class="token comment">//</span><span class="token comment">//        m1.start();</span><span class="token comment">//        m2.start();</span>        <span class="token comment">//创建Thread类的匿名子类的方式</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="测试Thread中的常用方法">测试Thread中的常用方法</h5><h5 id="线程的优先级">线程的优先级</h5><pre class="language-none"><code class="language-none">package atguigu.java;/** * 测试Thread中的常用方法： * 1. start():启动当前线程；调用当前线程的run() * 2. run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中 * 3. currentThread():静态方法，返回执行当前代码的线程 * 4. getName():获取当前线程的名字 * 5. setName():设置当前线程的名字 * 6. yield():释放当前cpu的执行权 * 7. join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才 *           结束阻塞状态。 * 8. stop():已过时。当执行此方法时，强制结束当前线程。 * 9. sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前 *                          线程是阻塞状态。 * 10. isAlive():判断当前线程是否存活 * * * 线程的优先级： * 1. * MAX_PRIORITY：10 * MIN _PRIORITY：1 * NORM_PRIORITY：5  --&gt;默认优先级 * 2.如何获取和设置当前线程的优先级： *   getPriority():获取线程的优先级 *   setPriority(int p):设置线程的优先级 * *   说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下 *   被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。 * * * @author shkstart * @create 2019-02-13 下午 2:26 */class HelloThread extends Thread{    @Override    public void run() {        for (int i = 0; i &lt; 100; i++) {            if(i % 2 == 0){//                try {//                    sleep(10);//                } catch (InterruptedException e) {//                    e.printStackTrace();//                }                System.out.println(Thread.currentThread().getName() + ":" + Thread.currentThread().getPriority() + ":" + i);            }//            if(i % 20 == 0){//                yield();//            }        }    }    // 设置线程名方式二    public HelloThread(String name){        super(name);    }}public class ThreadMethodTest {    public static void main(String[] args) {        HelloThread h1 = new HelloThread("Thread：1");//        h1.setName("线程一");        //设置分线程的优先级        h1.setPriority(Thread.MAX_PRIORITY);        h1.start();        //给主线程命名        Thread.currentThread().setName("主线程");        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);        for (int i = 0; i &lt; 100; i++) {            if(i % 2 == 0){                System.out.println(Thread.currentThread().getName() + ":" + Thread.currentThread().getPriority() + ":" + i);            }//            if(i == 20){//                try {//                    h1.join();//                } catch (InterruptedException e) {//                    e.printStackTrace();//                }//            }        }//        System.out.println(h1.isAlive());    }}</code></pre><h4 id="方式二">方式二</h4><h5 id="比较创建线程的两种方式">比较创建线程的两种方式</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 创建多线程的方式二：实现Runnable接口 * 1. 创建一个实现了Runnable接口的类 * 2. 实现类去实现Runnable中的抽象方法：run() * 3. 创建实现类的对象 * 4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 * 5. 通过Thread类的对象调用start() * * * 比较创建线程的两种方式。 * 开发中：优先选择：实现Runnable接口的方式 * 原因：1. 实现的方式没有类的单继承性的局限性 *      2. 实现的方式更适合来处理多个线程有共享数据的情况。 * * 联系：public class Thread implements Runnable * 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。 * * @author shkstart * @create 2019-02-13 下午 4:34 */</span><span class="token comment">//1. 创建一个实现了Runnable接口的类</span><span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment">//2. 实现类去实现Runnable中的抽象方法：run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3. 创建实现类的对象</span>        <span class="token class-name">MThread</span> mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//再启动一个线程，遍历100以内的偶数</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="例子：卖票">例子：卖票</h5><p>方式一实现：继承Thread类的方式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * * 例子：创建三个窗口卖票，总票数为100张.使用继承Thread类的方式 * * 存在线程的安全问题，待解决。 * * @author shkstart * @create 2019-02-13 下午 4:20 */</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>方式二实现：使用实现Runnable接口的方式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 例子：创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式 * 存在线程的安全问题，待解决。 * * @author shkstart * @create 2019-02-13 下午 4:47 */</span><span class="token keyword">class</span> <span class="token class-name">Window1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window1</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="线程的生命周期">线程的生命周期</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921165300.png" alt="image-20210921165300320"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921165852.png" alt="image-20210921165851980"></p><h3 id="线程的同步">线程的同步</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921170155.png" alt="image-20210921170155008"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921172706.png" alt="image-20210921172706024"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921172739.png" alt="image-20210921172739617"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921172650.png" alt="image-20210921172650247"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921172754.png" alt="image-20210921172754721"></p><p>使用同步代码块解决使用 Runnable接口出现的线程问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 例子：创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式 * * 1.问题：卖票过程中，出现了重票、错票 --&gt;出现了线程的安全问题 * 2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。 * 3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他 *            线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。 * * 4.在Java中，我们通过同步机制，来解决线程的安全问题。 * *  方式一：同步代码块 * *   synchronized(同步监视器){ *      //需要被同步的代码 * *   } *  说明：1.操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。 *       2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。 *       3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。 *          要求：多个线程必须要共用同一把锁。 * *       补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。 *  方式二：同步方法。 *     如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。 * * *  5.同步的方式，解决了线程的安全问题。---好处 *    操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 ---局限性 * * @author shkstart * @create 2019-02-13 下午 4:47 */</span><span class="token keyword">class</span> <span class="token class-name">Window1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//    Object obj = new Object();</span><span class="token comment">//    Dog dog = new Dog();</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        Object obj = new Object();</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//此时的this:唯一的Window1的对象   //方式二：synchronized (dog) {</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window1</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210921172816.png" alt="image-20210921172816330"></p><p>使用同步代码块解决继承Thread类的方式的线程安全问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019-02-15 上午 11:15 */</span><span class="token comment">/** * 使用同步代码块解决继承Thread类的方式的线程安全问题 * * 例子：创建三个窗口卖票，总票数为100张.使用继承Thread类的方式 * * 说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。 * * @author shkstart * @create 2019-02-13 下午 4:20 */</span><span class="token keyword">class</span> <span class="token class-name">Window2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//正确的</span><span class="token comment">//            synchronized (obj){</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Window2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Class clazz = Window2.class,Window2.class只会加载一次</span>                <span class="token comment">//错误的方式：this代表着t1,t2,t3三个对象</span><span class="token comment">//              synchronized (this){</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window2</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window2</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用同步方法解决实现Runnable接口的线程安全问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 使用同步方法解决实现Runnable接口的线程安全问题 * *  关于同步方法的总结： *  1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。 *  2. 非静态的同步方法，同步监视器是：this *     静态的同步方法，同步监视器是：当前类本身 * * @author shkstart * @create 2019-02-15 上午 11:35 */</span><span class="token keyword">class</span> <span class="token class-name">Window3</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//同步监视器：this</span>        <span class="token comment">//synchronized (this){</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">//}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window3</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用同步方法处理继承Thread类的方式中的线程安全问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 使用同步方法处理继承Thread类的方式中的线程安全问题 * * @author shkstart * @create 2019-02-15 上午 11:43 */</span><span class="token keyword">class</span> <span class="token class-name">Window4</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//同步监视器：Window4.class</span>        <span class="token comment">//private synchronized void show(){ //同步监视器：t1,t2,t3。此种解决方式是错误的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window4</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window4</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window4</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926170259.png" alt="image-20210926170258419"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926170333.png" alt="image-20210926170333390"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926170355.png" alt="image-20210926170355377"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926170417.png" alt="image-20210926170417318"></p><h4 id="单例设计模式之懒汉式-线程安全">单例设计模式之懒汉式(线程安全)</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/** * 使用同步机制将单例模式中的懒汉式改写为线程安全的 * * @author shkstart * @create 2019-02-15 下午 2:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//方式一：效率稍差</span><span class="token comment">//        synchronized (Bank.class) {</span><span class="token comment">//            if(instance == null){</span><span class="token comment">//                instance = new Bank();</span><span class="token comment">//            }</span><span class="token comment">//            return instance;</span><span class="token comment">//        }</span>        <span class="token comment">//方式二：效率更高</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="死锁">死锁</h4><p>例子</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/** * 演示线程的死锁问题 * * 1.死锁的理解：不同的线程分别占用对方需要的同步资源不放弃， * 都在等待对方放弃自己需要的同步资源，就形成了线程的死锁 * * 2.说明： * 1）出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续 * 2）我们使用同步时，要避免出现死锁。 * * @author shkstart * @create 2019-02-15 下午 3:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>                        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">{</span>                        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926170550.png" alt="image-20210926170549971"></p><h3 id="解决线程安全问题的方式三：Lock锁">解决线程安全问题的方式三：Lock锁</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token comment">/** * 解决线程安全问题的方式三：Lock锁  --- JDK5.0新增 * * 1. 面试题：synchronized 与 Lock的异同？ *   相同：二者都可以解决线程安全问题 *   不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器 *        Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()） * * 2.优先使用顺序： * Lock -&gt; 同步代码块（已经进入了方法体，分配了相应资源） -&gt; 同步方法（在方法体之外） * *  面试题：如何解决线程安全问题？有几种方式 * @author shkstart * @create 2019-02-15 下午 3:38 */</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">//1.实例化ReentrantLock</span>    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment">//2.调用锁定方法lock()</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：售票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">//3.调用解锁方法：unlock()</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926174156.png" alt="image-20210926174156567"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/** * 银行有一个账户。 有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。    分析： 1.是否是多线程问题？ 是，两个储户线程 2.是否有共享数据？ 有，账户（或账户余额） 3.是否有线程安全问题？有 4.需要考虑如何解决线程安全问题？同步机制：有三种方式。 * @author shkstart * @create 2019-02-15 下午 3:54 */</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//存钱</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amt<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            balance <span class="token operator">+=</span> amt<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":存钱成功。余额为："</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Account</span> acct<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acct<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acct <span class="token operator">=</span> acct<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            acct<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Account</span> acct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>acct<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>acct<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"甲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"乙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="线程的通信">线程的通信</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926175830.png" alt="image-20210926175829954"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/** * 线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印 * * 涉及到的三个方法： * wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。 * notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。 * notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。 * * 说明： * 1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。 * 2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。 *    否则，会出现IllegalMonitorStateException异常 * 3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。 * * 面试题：sleep() 和 wait()的异同？ * 1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。 * 2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait() *          2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中 *          3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。 * * @author shkstart * @create 2019-02-15 下午 4:21 */</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment">//使得调用如下wait()方法的线程进入阻塞状态</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="经典例题：生产者-消费者问题">经典例题：生产者/消费者问题</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926185337.png" alt="image-20210926185337355"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/** * 线程通信的应用：经典例题：生产者/消费者问题 * * 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品， * 店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员 * 会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品 * 了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。 * * 分析： * 1. 是否是多线程问题？是，生产者线程，消费者线程 * 2. 是否有共享数据？是，店员（或产品） * 3. 如何解决线程的安全问题？同步机制,有三种方法 * 4. 是否涉及线程的通信？是 * * @author shkstart * @create 2019-02-15 下午 4:48 */</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> productCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//生产产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>productCount <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            productCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始生产第"</span> <span class="token operator">+</span> productCount <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//消费产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>productCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始消费第"</span> <span class="token operator">+</span> productCount <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            productCount<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span><span class="token comment">//生产者</span>    <span class="token keyword">private</span> <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始生产产品....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span><span class="token comment">//消费者</span>    <span class="token keyword">private</span> <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始消费产品....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Clerk</span> clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Producer</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="JDK5-0新增线程创建方式">JDK5.0新增线程创建方式</h3><h4 id="新增方式一：实现Callable接口">新增方式一：实现Callable接口</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926190852.png" alt="image-20210926190851893"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926190909.png" alt="image-20210926190909668"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token comment">/** * 创建线程的方式三：实现Callable接口。 --- JDK 5.0新增 * * 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？ * 1. call()可以有返回值的。 * 2. call()可以抛出异常，被外面的操作捕获，获取异常的信息 * 3. Callable是支持泛型的 * * @author shkstart * @create 2019-02-15 下午 6:01 */</span><span class="token comment">//1.创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>    <span class="token comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNew</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.创建Callable接口实现类的对象</span>        <span class="token class-name">NumThread</span> numThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>numThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//6.获取Callable中call方法的返回值</span>            <span class="token comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>            <span class="token class-name">Object</span> sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>·</code></pre><h4 id="新增方式二：使用线程池">新增方式二：使用线程池</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926192249.png" alt="image-20210926192249516"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926193205.png" alt="image-20210926193205352"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token comment">/** * 创建线程的方式四：使用线程池 * * 好处： * 1.提高响应速度（减少了创建新线程的时间） * 2.降低资源消耗（重复利用线程池中线程，不需要每次都创建） * 3.便于线程管理 *      corePoolSize：核心池的大小 *      maximumPoolSize：最大线程数 *      keepAliveTime：线程没有任务时最多保持多长时间后会终止 * * * 面试题：创建多线程有几种方式？四种！ * @author shkstart * @create 2019-02-15 下午 6:30 */</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NumberThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 提供指定线程数量的线程池</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>        <span class="token comment">//设置线程池的属性</span><span class="token comment">//        System.out.println(service.getClass());</span><span class="token comment">//        service1.setCorePoolSize(15);</span><span class="token comment">//        service1.setKeepAliveTime();</span>        <span class="token comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Runnable</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Runnable</span><span class="token comment">//        service.submit(Callable callable);//适合使用于Callable</span>        <span class="token comment">//3.关闭连接池</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(10)---枚举类&amp;注解</title>
      <link href="/2021/09/28/java-ji-chu-10-mei-ju-lei-zhu-jie/"/>
      <url>/2021/09/28/java-ji-chu-10-mei-ju-lei-zhu-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="枚举类-注解">枚举类&amp;注解</h2><h3 id="枚举类的使用">枚举类的使用</h3><p>主要内容:</p><ul><li><p>如何自定义枚举类</p></li><li><p>如何使用关键字enum定义枚举类</p></li><li><p>Enum类的主要方法</p></li><li><p>实现接口的枚举类</p></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 一、枚举类的使用 * 1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类 * 2.当需要定义一组常量时，强烈建议使用枚举类 * 3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。 * * 二、如何定义枚举类 * 方式一：jdk5.0之前，自定义枚举类 * 方式二：jdk5.0，可以使用enum关键字定义枚举类 * * 三、Enum类中的常用方法： *    values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。 *    valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。 *    toString()：返回当前枚举类对象常量的名称 * * 四、使用enum关键字定义的枚举类实现接口的情况 *   情况一：实现接口，在enum类中实现抽象方法 *   情况二：让枚举类的对象分别实现接口中的抽象方法 * * @author shkstart * @create 2019 上午 10:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//自定义枚举类</span><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>    <span class="token comment">//1.声明Season对象的属性:private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">;</span>    <span class="token comment">//2.私有化类的构造器,并给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//3.提供当前枚举类的多个对象：public static final的</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//4.其他诉求1：提供toString()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Season{"</span> <span class="token operator">+</span>                <span class="token string">"seasonName='"</span> <span class="token operator">+</span> seasonName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", seasonDesc='"</span> <span class="token operator">+</span> seasonDesc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 使用enum关键字定义枚举类 * 说明：定义的枚举类默认继承于java.lang.Enum类 * * @author shkstart * @create 2019 上午 10:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonTest1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Season1</span> summer <span class="token operator">=</span> <span class="token class-name">Season1</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token comment">//toString():返回枚举类对象的名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(Season1.class.getSuperclass());</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//values():返回所有的枚举类对象构成的数组</span>        <span class="token class-name">Season1</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Season1</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values1 <span class="token operator">=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span>        <span class="token class-name">Season1</span> winter <span class="token operator">=</span> <span class="token class-name">Season1</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"WINTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span><span class="token comment">//        Season1 winter = Season1.valueOf("WINTER1");</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>winter<span class="token punctuation">)</span><span class="token punctuation">;</span>        winter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//使用enum关键字枚举类</span><span class="token keyword">enum</span> <span class="token class-name">Season1</span> <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>    <span class="token comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//2.声明Season对象的属性:private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">;</span>    <span class="token comment">//2.私有化类的构造器,并给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season1</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//4.其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    //4.其他诉求1：提供toString()</span><span class="token comment">//</span><span class="token comment">//    @Override</span><span class="token comment">//    public String toString() {</span><span class="token comment">//        return "Season1{" +</span><span class="token comment">//                "seasonName='" + seasonName + '\'' +</span><span class="token comment">//                ", seasonDesc='" + seasonDesc + '\'' +</span><span class="token comment">//                '}';</span><span class="token comment">//    }</span><span class="token comment">//    @Override</span><span class="token comment">//    public void show() {</span><span class="token comment">//        System.out.println("这是一个季节");</span><span class="token comment">//    }</span><span class="token punctuation">}</span></code></pre><h3 id="注解的使用">注解的使用</h3><p><strong>主要内容：</strong></p><p>​注解(Annotation)概述</p><p>​常见的Annotation示例</p><p>​自定义Annotation JDK中的元注解</p><p>​利用反射获取注解信息（在反射部分涉及）</p><p>​JDK 8中注解的新特性</p><h4 id="注解-Annotation-概述">注解(Annotation)概述</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928173213.png" alt="image-20210928173213102"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928173229.png" alt="image-20210928173229126"></p><h4 id="常见的Annotation示例">常见的Annotation示例</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928173712.png" alt="image-20210928173711776"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928173757.png" alt="image-20210928173756799"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928173839.png" alt="image-20210928173839075"></p><p>代码示例：</p><h4 id="自定义Annotation-JDK中的元注解">自定义Annotation JDK中的元注解</h4><h4 id="利用反射获取注解信息（在反射部分涉及）">利用反射获取注解信息（在反射部分涉及）</h4><h4 id="JDK-8中注解的新特性">JDK 8中注解的新特性</h4><p>MyAnnotation注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019 上午 11:56 */</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span>TYPE_PARAMETER<span class="token punctuation">,</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>MyAnnotations注解</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Inherited</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment">/** * * @author shkstart * @create 2019 下午 2:41 */</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">{</span>    <span class="token class-name">MyAnnotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 注解的使用 * * 1. 理解Annotation: * ① jdk 5.0 新增的功能 * * ② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, * 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。 * * ③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android * 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗 * 代码和XML配置等。 * * 2. Annocation的使用示例 * 示例一：生成文档相关的注解 * 示例二：在编译时进行格式检查(JDK内置的三个基本注解)     @Override: 限定重写父类方法, 该注解只能用于方法     @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择     @SuppressWarnings: 抑制编译器警告  * 示例三：跟踪代码依赖性，实现替代配置文件功能  *  * 3. 如何自定义注解：参照@SuppressWarnings定义      * ① 注解声明为：@interface      * ② 内部定义成员，通常使用value表示      * ③ 可以指定成员的默认值，使用default定义      * ④ 如果自定义注解没有成员，表明是一个标识作用。     如果注解有成员，在使用注解时，需要指明成员的值。     自定义注解必须配上注解的信息处理流程(使用反射)才有意义。     自定义注解通过都会指明两个元注解：Retention、Target     4. jdk 提供的4种元注解       元注解：对现有的注解进行解释说明的注解     Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为）\RUNTIME            只有声明为RUNTIME生命周期的注解，才能通过反射获取。     Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素     *******出现的频率较低*******     Documented:表示所修饰的注解在被javadoc解析时，保留下来。     Inherited:被它修饰的 Annotation 将具有继承性。     5.通过反射获取注解信息 ---到反射内容时系统讲解     6. jdk 8 中注解的新特性：可重复注解、类型注解     6.1 可重复注解：① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class                    ② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。     6.2 类型注解：     ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。     ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。      * * @author shkstart * @create 2019 上午 11:37 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(num);</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"unused"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> annotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//jdk 8之前的写法：</span><span class="token comment">//@MyAnnotations({@MyAnnotation(value="hi"),@MyAnnotation(value="hi")})</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@MyAnnotation</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@MyAnnotation</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">10L</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(9)---数组</title>
      <link href="/2021/09/28/java-ji-chu-9-chang-yong-lei/"/>
      <url>/2021/09/28/java-ji-chu-9-chang-yong-lei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="Java常用类">Java常用类</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926203150.png" alt="image-20210926203150550"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926203216.png" alt="image-20210926203215833"></p><h3 id="字符串相关的类">字符串相关的类</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926203704.png" alt="image-20210926203704358"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926205348.png" alt="image-20210926205348670"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926205406.png" alt="image-20210926205405859"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926205847.png" alt="image-20210926205847243"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926205904.png" alt="image-20210926205904197"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926205929.png" alt="image-20210926205928991"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926213339.png" alt="image-20210926213339521"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926213535.png" alt="image-20210926213535141"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926214020.png" alt="image-20210926213814988"></p><p>Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019 上午 11:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * String的使用 * * @author shkstart * @create 2019 上午 10:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span>    <span class="token comment">/*    结论：    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。    2.只要其中有一个是变量，结果就在堆中。    3.如果拼接的结果调用intern()方法，返回值就在常量池中     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span><span class="token comment">//s4:常量</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> s4 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">String</span> s8 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    String的实例化方式：    方式一：通过字面量定义的方式    方式二：通过new + 构造器的方式     面试题：String s = new String("abc");方式创建对象，在内存中创建了几个对象？            两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据："abc"     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        <span class="token comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"javaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"javaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name <span class="token operator">==</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Jerry"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tom</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    String:字符串，使用一对""引起来表示。    1.String声明为final的，不可被继承    2.String实现了Serializable接口：表示字符串是支持序列化的。            实现了Comparable接口：表示String可以比较大小    3.String内部定义了final char[] value用于存储字符串数据    4.String:代表不可变的字符序列。简称：不可变性。        体现：1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。             2. 当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。             3. 当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。    5.通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。    6.字符串常量池中是不会存储相同内容的字符串的。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//字面量的定义方式</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比较s1和s2的地址值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        s3 <span class="token operator">+=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdef</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4.3</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mbc</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>试题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/** * 一道面试题 * @author shkstart * @create 2019 上午 11:32 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> <span class="token string">"test ok"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringTest</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//good</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//best</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="字符串常用方法">字符串常用方法</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926215339.png" alt="image-20210926215339289"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926215426.png" alt="image-20210926215426323"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210926215501.png" alt="image-20210926215500857"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019 上午 11:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMethodTest</span> <span class="token punctuation">{</span>    <span class="token comment">/**替换：String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。匹配:boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。切片：String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"北京尚硅谷教育北京"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'北'</span><span class="token punctuation">,</span> <span class="token string">'东'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 东京尚硅谷教育东京</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "上海 尚硅谷教育上海</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"12hello34world5java7891mysql456"</span><span class="token punctuation">;</span>        <span class="token comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"^,|,$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>        <span class="token comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span>        <span class="token keyword">boolean</span> matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">String</span> tel <span class="token operator">=</span> <span class="token string">"0571-4534289"</span><span class="token punctuation">;</span>        <span class="token comment">//判断这是否是一个杭州的固定电话</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"0571-\\d{7,8}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 后面的数字为7-8位</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> <span class="token string">"hello|world|java"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**        hello        world        java        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str2 <span class="token operator">=</span> <span class="token string">"hello.world.java"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**        hello        world        java        */</span>    <span class="token punctuation">}</span>    <span class="token comment">/**boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 trueint indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索注：indexOf和lastIndexOf方法如果未找到都是返回-1     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hellowworld"</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"rld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"He"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"wor"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"lol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"lo"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -1</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"hellorworld"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>        <span class="token comment">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span>        <span class="token comment">//情况一：存在唯一的一个str。情况二：不存在str</span>    <span class="token punctuation">}</span>    <span class="token comment">/**int length()：返回字符串的长度： return value.lengthchar charAt(int index)： 返回某索引处的字符return value[index]boolean isEmpty()：判断是否是空字符串：return value.length == 0String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写String trim()：返回字符串的副本，忽略前导空白和尾部空白boolean equals(Object obj)：比较字符串的内容是否相同boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”int compareTo(String anotherString)：比较两个字符串的大小String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// abcdef</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">// c-99</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// e-101</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//涉及到字符串排序</span>                            <span class="token comment">// 99-101=-2</span>        <span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token string">"北京尚硅谷教育"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s8 <span class="token operator">=</span> s7<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尚硅谷教</span>        <span class="token class-name">String</span> s9 <span class="token operator">=</span> s7<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尚硅谷</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// H</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// d</span><span class="token comment">//        System.out.println(s1.charAt(10));</span><span class="token comment">//        s1 = "";</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s1不可变的，仍然为原来的字符串</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改成小写以后的字符串</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"   he  llo   world   "</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span> <span class="token operator">+</span> s3 <span class="token operator">+</span> <span class="token string">"-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span> <span class="token operator">+</span> s4 <span class="token operator">+</span> <span class="token string">"-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="String-与-byte-之间的转换，String-与-char-之间的转换-String-与基本数据类型、包装类之间的转换。">String 与 byte[]之间的转换，String 与 char[]之间的转换,String 与基本数据类型、包装类之间的转换。</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * 涉及到String类与其他结构之间的转换 * * @author shkstart * @create 2019 下午 2:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest1</span> <span class="token punctuation">{</span>    <span class="token comment">/*    String 与 byte[]之间的转换    编码：String --&gt; byte[]:调用String的getBytes()    解码：byte[] --&gt; String:调用String的构造器    编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)    解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）    说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abc123中国"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用默认的字符集，进行编码。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [97, 98, 99, 49, 50, 51, -28, -72, -83, -27,- 101, -67]</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用gbk字符集进行编码。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [97, 98, 99, 49, 50, 51, -42, -48, -71, -6]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用默认的字符集，进行解码。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出现乱码。原因：编码集和解码集不一致！</span>        <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有出现乱码。原因：编码集和解码集一致！</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    String 与 char[]之间的转换    String --&gt; char[]:调用String的toCharArray()    char[] --&gt; String:调用String的构造器     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>  <span class="token comment">//题目： a21cb3</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    复习：    String 与基本数据类型、包装类之间的转换。    String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)    基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//        int num = (int)str1;//错误的</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"123"</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="StringBuffer和StringBuilder的使用">StringBuffer和StringBuilder的使用</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * 关于StringBuffer和StringBuilder的使用 * * @author shkstart * @create 2019 下午 3:32 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferBuilderTest</span> <span class="token punctuation">{</span>    <span class="token comment">/*    对比String、StringBuffer、StringBuilder三者的效率：    从高到低排列：StringBuilder &gt; StringBuffer &gt; String     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//初始设置</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开始对比</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            text <span class="token operator">=</span> text <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**    StringBuffer的常用方法：StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接StringBuffer delete(int start,int end)：删除指定位置的内容StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为strStringBuffer insert(int offset, xxx)：在指定位置插入xxxStringBuffer reverse() ：把当前字符序列逆转public int indexOf(String str)public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串public int length()public char charAt(int n )public void setCharAt(int n ,char ch)        总结：        增：append(xxx)        删：delete(int start,int end)        改：setCharAt(int n ,char ch) / replace(int start, int end, String str)        查：charAt(int n )        插：insert(int offset, xxx)        长度：length();        *遍历：for() + charAt() / toString()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        s1.delete(2,4);// ab1</span><span class="token comment">//        s1.replace(2,4,"hello"); // abhello1</span><span class="token comment">//        s1.insert(2,false); // abfalsec11</span><span class="token comment">//        s1.reverse(); // 11cba</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**    String、StringBuffer、StringBuilder三者的异同？    String:不可变的字符序列；底层使用char[]存储    StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储    StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储    源码分析：    String str = new String();//char[] value = new char[0];    String str1 = new String("abc");//char[] value = new char[]{'a','b','c'};    StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。    System.out.println(sb1.length());//    sb1.append('a');//value[0] = 'a';    sb1.append('b');//value[1] = 'b';    StringBuffer sb2 = new StringBuffer("abc");//char[] value = new char["abc".length() + 16];    //问题1. System.out.println(sb2.length());//3    //问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。             默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。            指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb1<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// mbc</span>        <span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="练习：常见算法题目">练习：<strong>常见算法题目</strong></h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210927110018.png" alt="image-20210927110018069"></p><p>2</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019 上午 10:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token comment">/*    将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”    方式一：转换为char[]     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> startIndex<span class="token punctuation">,</span>y <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方式二：使用String的拼接</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//第1部分</span>            <span class="token class-name">String</span> reverseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第2部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//第3部分</span>            reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> reverseStr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方式三：使用StringBuffer/StringBuilder替换String</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse2</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第1部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第2部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//第3部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> reverse <span class="token operator">=</span> <span class="token function">reverse2</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019 上午 10:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo1</span> <span class="token punctuation">{</span>    <span class="token comment">/*    获取一个字符串在另一个字符串中出现的次数。      比如：获取“ab”在 “abkkcadkabkebfkaabkskab” 中出现的次数     */</span>    <span class="token comment">/**     * 获取subStr在mainStr中出现的次数     * @param mainStr     * @param subStr     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainStr<span class="token punctuation">,</span><span class="token class-name">String</span> subStr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mainLength <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> subLength <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mainLength <span class="token operator">&gt;=</span> subLength<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//方式一：</span><span class="token comment">//            while((index = mainStr.indexOf(subStr)) != -1){</span><span class="token comment">//                count++;</span><span class="token comment">//                mainStr = mainStr.substring(index + subStr.length());</span><span class="token comment">//            }</span>            <span class="token comment">//方式二：对方式一的改进</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>subStr<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                index <span class="token operator">+=</span> subLength<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> mainStr <span class="token operator">=</span> <span class="token string">"abkkcadkabkebfkaabkskab"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> subStr <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210927112424.png" alt="image-20210927112424433"></p><p>4</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2019 上午 10:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo2</span> <span class="token punctuation">{</span>    <span class="token comment">/*    获取两个字符串中最大相同子串。比如：   str1 = "abcwerthelloyuiodefabcdef";str2 = "cvhellobnm"   提示：将短的那个串进行长度依次递减的子串与较长的串比较。     */</span>    <span class="token comment">//前提：两个字符串中只有一个最大相同子串</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMaxSameString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span> str2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> maxStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token class-name">String</span> minStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>y <span class="token operator">=</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span>y <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">String</span> subStr <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>maxStr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> subStr<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果存在多个长度相同的最大相同子串</span>    <span class="token comment">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxSameString1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuffer</span> sBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> maxString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token class-name">String</span> minString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str2 <span class="token operator">:</span> str1<span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> len <span class="token operator">-</span> i<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> subString <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxString<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        sBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subString <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token comment">//                System.out.println(sBuffer);</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> sBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">",$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> split<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMaxSameString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abcwerthello1yuiodefabcdef"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"cvhello1bnmabcdef"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxSameStrings <span class="token operator">=</span> <span class="token function">getMaxSameString1</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>maxSameStrings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="其他">其他</h4><p>6.4 与StringBuffer、StringBuilder之间的转换<br>String --&gt;StringBuffer、StringBuilder:调用StringBuffer、StringBuilder构造器<br>StringBuffer、StringBuilder --&gt;String:①调用String构造器；②StringBuffer、StringBuilder的toString()</p><ol start="7"><li><p>JVM中字符串常量池存放位置说明：<br>jdk 1.6 (jdk 6.0 ,java 6.0):字符串常量池存储在方法区（永久区）<br>jdk 1.7:字符串常量池存储在堆空间<br>jdk 1.8:字符串常量池存储在方法区（元空间）</p></li><li><p>常见算法题目的考查：<br>1）模拟一个trim方法，去除字符串两端的空格。</p></li></ol><p>2）将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</p><p>3）获取一个字符串在另一个字符串中出现的次数。<br>比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p><p>4）获取两个字符串中最大相同子串。比如：<br>str1 = "abcwerthelloyuiodef“;str2 = “cvhellobnm”<br>提示：将短的那个串进行长度依次递减的子串与较长的串比较。</p><p>5）对字符串中字符进行自然顺序排序。<br>提示：<br>1字符串变成字符数组。<br>2对数组排序，择，冒泡，Arrays.sort();<br>3将排序后的数组变成字符串。</p><h3 id="JDK-8之前的日期时间API">JDK 8之前的日期时间API</h3><h4 id="Date-，system-currentTimeMillis">Date()，system.currentTimeMillis()</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * JDK 8之前日期和时间的API测试 * * @author shkstart * @create 2019 下午 4:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>    <span class="token comment">/*    java.util.Date类           |---java.sql.Date类    1.两个构造器的使用        &gt;构造器一：Date()：创建一个对应当前时间的Date对象        &gt;构造器二：创建指定毫秒数的Date对象    2.两个方法的使用        &gt;toString():显示当前的年、月、日、时、分、秒        &gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）    3. java.sql.Date对应着数据库中的日期类型的变量        &gt;如何实例化        &gt;如何将java.util.Date对象转换为java.sql.Date对象     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1550306204104</span>        <span class="token comment">//构造器二：创建指定毫秒数的Date对象</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">155030620410L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建java.sql.Date对象</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token number">35235325345L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1971-02-13</span>        <span class="token comment">//如何将java.util.Date对象转换为java.sql.Date对象</span>        <span class="token comment">//情况一：</span><span class="token comment">//        Date date4 = new java.sql.Date(2343243242323L);</span><span class="token comment">//        java.sql.Date date5 = (java.sql.Date) date4;</span>        <span class="token comment">//情况二：</span>        <span class="token class-name">Date</span> date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date6<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//1.System类中的currentTimeMillis()</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span>        <span class="token comment">//称为时间戳</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="SimpleDateFormat，Calendar">SimpleDateFormat，Calendar</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * jdk 8之前的日期时间的API测试 * 1. System类中currentTimeMillis(); * 2. java.util.Date和子类java.sql.Date * 3. SimpleDateFormat * 4. Calendar * * @author shkstart * @create 2019 上午 11:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>    <span class="token comment">/*    SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析    1.两个操作：    1.1 格式化：日期 ---&gt;字符串    1.2 解析：格式化的逆过程，字符串 ---&gt; 日期    2.SimpleDateFormat的实例化     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token comment">//实例化SimpleDateFormat:使用默认的构造器</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化：日期 ---&gt;字符串</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解析：格式化的逆过程，字符串 ---&gt; 日期</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"19-12-18 上午11:43"</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span><span class="token comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa");</span>        <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> format1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18 11:48:27</span>        <span class="token comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span>        <span class="token comment">//否则，抛异常</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-02-18 11:48:27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    练习一：字符串"2020-09-08"转换为java.sql.Date    练习二："三天打渔两天晒网"   1990-01-01  xxxx-xx-xx 打渔？晒网？    举例：2020-09-08 ？ 总天数    总天数 % 5 == 1,2,3 : 打渔    总天数 % 5 == 4,0 : 晒网    总天数的计算？    方式一：( date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24) + 1    方式二：1990-01-01  --&gt; 2019-12-31  +  2020-01-01 --&gt;2020-09-08     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> birth <span class="token operator">=</span> <span class="token string">"2020-09-08"</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(date);</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> birthDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birthDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    Calendar日历类(抽象类）的使用     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.实例化</span>        <span class="token comment">//方式一：创建其子类（GregorianCalendar）的对象</span>        <span class="token comment">//方式二：调用其静态方法getInstance()</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(calendar.getClass());</span>        <span class="token comment">//2.常用方法</span>        <span class="token comment">//get()</span>        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//set()</span>        <span class="token comment">//calendar可变性</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//add()</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getTime():日历类---&gt; Date</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//setTime():Date ---&gt; 日历类</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="JDK-8中新日期时间API">JDK 8中新日期时间API</h3><h4 id="LocalDate、LocalTime、LocalDateTime、Instant、DateTimeFormatter">LocalDate、LocalTime、LocalDateTime、Instant、DateTimeFormatter</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928112143.png" alt="image-20210928112143640"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928160231.png" alt="image-20210928160231380"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">FormatStyle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span></span><span class="token class-name">TemporalAccessor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * jdk 8中日期时间API的测试 * * @author shkstart * @create 2019 下午 2:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDK8DateTimeTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//偏移量</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">-</span> <span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Sep 08 00:00:00 GMT+08:00 2020</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    LocalDate、LocalTime、LocalDateTime 的使用    说明：        1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高        2.类似于Calendar     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//now():获取当前的日期、时间、日期+时间</span>        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span>        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getXxx()：获取相关的属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//体现不可变性</span>        <span class="token comment">//withXxx():设置相关的属性</span>        <span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不可变性</span>        <span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    Instant的使用    类似于 java.util.Date类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//now():获取本初子午线对应的标准时间</span>        <span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T07:29:41.719Z</span>        <span class="token comment">//添加时间的偏移量</span>        <span class="token class-name">OffsetDateTime</span> offsetDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offsetDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T15:32:50.611+08:00</span>        <span class="token comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span>        <span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span>        <span class="token class-name">Instant</span> instant1 <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token number">1550475314878L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    DateTimeFormatter:格式化或解析日期、时间    类似于SimpleDateFormat     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span>        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">;</span>        <span class="token comment">//格式化:日期--&gt;字符串</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T15:42:18.797</span>        <span class="token comment">//解析：字符串 --&gt;日期</span>        <span class="token class-name">TemporalAccessor</span> parse <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18T15:42:18.797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        方式二：</span><span class="token comment">//        本地化相关的格式。如：ofLocalizedDateTime()</span><span class="token comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span>        <span class="token class-name">DateTimeFormatter</span> formatter1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> formatter1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019年2月18日 下午03时47分16秒</span><span class="token comment">//      本地化相关的格式。如：ofLocalizedDate()</span><span class="token comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span>        <span class="token class-name">DateTimeFormatter</span> formatter2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-2-18</span><span class="token comment">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span>        <span class="token class-name">DateTimeFormatter</span> formatter3 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str4 <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18 03:52:09</span>        <span class="token comment">//解析</span>        <span class="token class-name">TemporalAccessor</span> accessor <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18 03:52:09"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928112216.png" alt="image-20210928112216617"></p><p>其他：</p><h3 id="Java比较器">Java比较器</h3><ul><li><p>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间</p><p>的比较问题。</p></li><li><p>Java实现对象排序的方式有两种：</p><p> **自然排序：**<strong>java.lang.Comparable</strong></p><p> **定制排序：**<strong>java.util.Comparator</strong></p></li></ul><p>Goods类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 商品类 * @author shkstart * @create 2019 下午 4:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span>  <span class="token class-name">Comparable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Goods{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        System.out.println("**************");</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token comment">//方式一：</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&gt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//                return 0;</span>               <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//方式二：</span><span class="token comment">//           return Double.compare(this.price,goods.price);</span>        <span class="token punctuation">}</span><span class="token comment">//        return 0;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token comment">/** * 一、说明：Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的 *          但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。 *          如何实现？使用两个接口中的任何一个：Comparable 或 Comparator * * 二、Comparable接口与Comparator的使用的对比： *    Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。 *    Comparator接口属于临时性的比较。 * *thor shkstart * @create 2019 下午 4:41 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">{</span>    <span class="token comment">/*    Comparable接口的使用举例：  自然排序    1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。    2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列    3. 重写compareTo(obj)的规则：        如果当前对象this大于形参对象obj，则返回正整数，        如果当前对象this小于形参对象obj，则返回负整数，        如果当前对象this等于形参对象obj，则返回零。    4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。       在compareTo(obj)方法中指明如何排序     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    Comparator接口的使用：定制排序    1.背景：    当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，    或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，    那么可以考虑使用 Comparator 的对象来排序    2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：    如果方法返回正整数，则表示o1大于o2；    如果返回0，表示相等；    返回负整数，表示o1小于o2。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//按照字符串从大到小的顺序排列</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>                    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment">//                return 0;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">Goods</span> g1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>                    <span class="token class-name">Goods</span> g2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="System类">System类</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928152312.png" alt="image-20210928152312578"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928152329.png" alt="image-20210928152328657"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928152543.png" alt="image-20210928152543053"></p><h3 id="Math类">Math类</h3><p><strong>java.lang.Math****提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为</strong>double型**。</p><blockquote><p><strong>abs</strong> <strong>绝对值</strong></p><p><strong>acos,asin,atan,cos,sin,tan</strong>三角函数</p><p><strong>sqrt</strong> <strong>平方根</strong></p><p><strong>pow(double a,doble b)</strong> a的b次幂</p><p><strong>log</strong> <strong>自然对数</strong></p><p><strong>exp</strong> e为底指数</p><p><strong>max(double a,double b)</strong></p><p><strong>min(double a,double b)</strong></p><p><strong>random()</strong> 返回0.0到1.0的随机数</p><p>**long round(double a) **double型数据a转换为long型（四舍五入）</p><p><strong>toDegrees(double angrad)</strong> **弧度—&gt;角度</p><p><strong>toRadians(double angdeg)</strong> **角度—&gt;弧度</p></blockquote><h3 id="BigInteger与BigDecimal">BigInteger与BigDecimal</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928153029.png" alt="image-20210928153029234"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928153122.png" alt="image-20210928153122295"></p><p><strong>BigDecimal类</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210928153333.png" alt="image-20210928153332796"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span><span class="token punctuation">;</span><span class="token comment">/** * 其他常用类的使用 * 1.System * 2.Math * 3.BigInteger 和 BigDecimal * * @author shkstart * @create 2019 下午 6:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherClassTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> javaVersion <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java的version:"</span> <span class="token operator">+</span> javaVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> javaHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java的home:"</span> <span class="token operator">+</span> javaHome<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> osName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"os的name:"</span> <span class="token operator">+</span> osName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> osVersion <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"os的version:"</span> <span class="token operator">+</span> osVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user的name:"</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user的home:"</span> <span class="token operator">+</span> userHome<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userDir <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user的dir:"</span> <span class="token operator">+</span> userDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BigInteger</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"1243324112234324324325235245346567657653"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigDecimal</span> bd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"12435.351"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigDecimal</span> bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//         System.out.println(bd.divide(bd2));</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>ROUND_HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="枚举类-注解">枚举类&amp;注解</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(5)---面向对象(中篇)</title>
      <link href="/2021/09/25/java-ji-chu-5-mian-xiang-dui-xiang-zhong-pian/"/>
      <url>/2021/09/25/java-ji-chu-5-mian-xiang-dui-xiang-zhong-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="面向对象-中篇">面向对象(中篇)</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914191603.png" alt="image-20210914191542042"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914191847.png" alt="image-20210914191847452"></p><h3 id="面向对象特征之二：继承性">面向对象特征之二：继承性</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914193324.png" alt="image-20210914193323911"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914193339.png" alt="image-20210914193338945"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914193402.png" alt="image-20210914193401913"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914193421.png" alt="image-20210914193420831"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914195856.png" alt="image-20210914195856137"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914200021.png" alt="image-20210914200021523"></p><p>Creature类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Creature</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呼吸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Creature</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Student类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//String name;</span><span class="token comment">//int age;</span><span class="token class-name">String</span> major<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> major<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//this.age = age;</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//public void eat(){</span><span class="token comment">//System.out.println("吃饭");</span><span class="token comment">//}</span><span class="token comment">//public void sleep(){</span><span class="token comment">//System.out.println("睡觉");</span><span class="token comment">//}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age:"</span> <span class="token operator">+</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 面向对象的特征之二：继承性    why? *  * 一、继承性的好处： * ① 减少了代码的冗余，提高了代码的复用性 * ② 便于功能的扩展 * ③ 为之后多态性的使用，提供了前提 *  * 二、继承性的格式：  *    class A extends B{} *    A:子类、派生类、subclass *    B:父类、超类、基类、superclass *     *    2.1体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。 *    特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。 *    只有因为封装性的影响，使得子类不能直接调用父类的结构而已。 *    2.2 子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。 *    子类和父类的关系，不同于子集和集合的关系。 *    extends：延展、扩展 *  * 三、Java中关于继承性的规定： *   1.一个类可以被多个子类继承。 *    2.Java中类的单继承性：一个类只能有一个父类 *    3.子父类是相对的概念。 *    4.子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类 *    5.子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法 *     * 四、 1. 如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类 *    2. 所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类 *    3. 意味着，所有的java类具有java.lang.Object类声明的功能。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendsTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p1.age = 1;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s1.sleep();</span>s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 三，4</span>s1<span class="token punctuation">.</span><span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 四</span><span class="token class-name">Creature</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914200223.png" alt="image-20210914200223479">ManKind类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 定义一个ManKind类，包括成员变量int sex和int salary；方法void manOrWoman()：根据sex的值显示“man”(sex==1)或者“woman”(sex==0)；方法void employeed()：根据salary的值显示“no job”(salary==0)或者“ job”(salary!=0)。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManKind</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span><span class="token comment">//性别</span><span class="token keyword">private</span> <span class="token keyword">int</span> salary<span class="token punctuation">;</span><span class="token comment">//薪资</span><span class="token keyword">public</span> <span class="token class-name">ManKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">ManKind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">manOrWoman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">employeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//if(salary == 0){</span><span class="token comment">//System.out.println("no job");</span><span class="token comment">//}else{</span><span class="token comment">//System.out.println("job");</span><span class="token comment">//}</span><span class="token comment">//或</span><span class="token class-name">String</span> jobInfo <span class="token operator">=</span> <span class="token punctuation">(</span>salary <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token string">"no job"</span> <span class="token operator">:</span> <span class="token string">"job"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jobInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">int</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">int</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Kids类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 定义类Kids继承ManKind，并包括成员变量int yearsOld；方法printAge()打印yearsOld的值。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kids</span> <span class="token keyword">extends</span> <span class="token class-name">ManKind</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> yearsOld<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Kids</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Kids</span><span class="token punctuation">(</span><span class="token keyword">int</span> yearsOld<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>yearsOld <span class="token operator">=</span> yearsOld<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am "</span> <span class="token operator">+</span> yearsOld <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYearsOld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> yearsOld<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYearsOld</span><span class="token punctuation">(</span><span class="token keyword">int</span> yearsOld<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>yearsOld <span class="token operator">=</span> yearsOld<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * 修改练习1.2中定义的类Kids，在Kids中重新定义employeed()方法， * 覆盖父类ManKind中定义的employeed()方法， * 输出“Kids should study and no job.” */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">employeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Kids should study and no job."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>KidsTest类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 定义类KidsTest，在类的main方法中实例化Kids的对象someKid，用该对象访问其父类的成员变量及方法。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KidsTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Kids</span> someKid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Kids</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someKid<span class="token punctuation">.</span><span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someKid<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someKid<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someKid<span class="token punctuation">.</span><span class="token function">employeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>someKid<span class="token punctuation">.</span><span class="token function">manOrWoman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="debug中那个stepinto失灵问题的解决">debug中那个stepinto失灵问题的解决:</h3><p><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=271&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kb411W75N?p=271&amp;spm_id_from=pageDriver</a></p><h3 id="方法的重写-override-overwrite">方法的重写(override/overwrite)</h3><p>Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token keyword">int</span> distance<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"走路,走的距离是："</span> <span class="token operator">+</span> distance <span class="token operator">+</span> <span class="token string">"公里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">info1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Student类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> major<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> major<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习。专业是："</span> <span class="token operator">+</span> major<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对父类中的eat()进行了重写</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生应该多吃有营养的食物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//public int info1(){</span><span class="token comment">//return 1;</span><span class="token comment">//}</span><span class="token comment">//public void walk(int distance){</span><span class="token comment">//System.out.println("重写的方法");</span><span class="token comment">//}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token keyword">int</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 方法的重写(override / overwrite) *  * 1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作 *  * 2.应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。 *  * 3. 重写的规定： * 方法的声明： 权限修饰符  返回值类型  方法名(形参列表) throws 异常的类型{ * //方法体 * } * 约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法 * ① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同 *      ② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符 *      &gt;特殊情况：子类不能重写父类中声明为private权限的方法 *      ③ 返回值类型： *      &gt;父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void *      &gt;父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类 *      &gt;父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double) *④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候讲） *********************************************************************** *子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）。 * * 面试题：区分方法的重载与重写 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 学生应该多吃有营养的食物</span>s<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四种访问权限修饰符">四种访问权限修饰符</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914214918.png" alt="image-20210914214917905"></p><h3 id="关键词：super">关键词：super</h3><p>Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//身份证号</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我无处不在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Student类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> major<span class="token punctuation">;</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> major<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> major<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//this.name = name;</span><span class="token comment">//this.age = age;</span><span class="token comment">// 4.1</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生：多吃有营养的食物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生：学习知识"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age = "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SuperTest</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token comment">/* * super关键字的使用 * 1.super理解为：父类的 * 2.super可以用来调用：属性、方法、构造器 *  * 3.super的使用：调用属性和方法 *  *   3.1 我们可以在子类的方法或构造器中。通过使用"super.属性"或"super.方法"的方式，显式的调用 *   父类中声明的属性或方法。但是，通常情况下，我们习惯省略"super." *   3.2 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的 *   使用"super.属性"的方式，表明调用的是父类中声明的属性。 *   3.3 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的 *   使用"super.方法"的方式，表明调用的是父类中被重写的方法。 *  * 4.super调用构造器 *  4.1  我们可以在子类的构造器中显式的使用"super(形参列表)"的方式，调用父类中声明的指定的构造器 *   4.2 "super(形参列表)"的使用，必须声明在子类构造器的首行！ *   4.3 我们在类的构造器中，针对于"this(形参列表)"或"super(形参列表)"只能二选一，不能同时出现 *   4.4 在构造器的首行，没有显式的声明"this(形参列表)"或"super(形参列表)"，则默认调用的是父类中空参的构造器：super() *    如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错 *   4.5 在类的多个构造器中，至少有一个类的构造器中使用了"super(形参列表)"，调用父类中的构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.1 1001 1002</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4.3 我无处不在！</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实验题：银行账户取款">实验题：银行账户取款</h4><p>答案代码地址：<a href="https://gitee.com/beihai-yu/java/tree/master/OOP2_experiment_BankAccount">https://gitee.com/beihai-yu/java/tree/master/OOP2_experiment_BankAccount</a></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914223503.png" alt="image-20210914223503389"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914223528.png" alt="image-20210914223527936"></p><h3 id="子类对象实例化过程">子类对象实例化过程</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token comment">/* * 子类对象实例化的全过程 *  * 1. 从结果上来看：（继承性） * 子类继承父类以后，就获取了父类中声明的属性或方法。 *      创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。 *  * 2. 从过程上来看： * 当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，... *    直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有 *    父类中的结构，子类对象才可以考虑进行调用。 *     *   * 明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915204341.png" alt="image-20210915204341385"></p><h3 id="面向对象特征之三：多态性">面向对象特征之三：多态性</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915185214.png" alt="image-20210915185214329"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915200834.png" alt="image-20210915200834602"></p><p>、<img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915200902.png" alt="image-20210915200902099"></p><p>Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Man类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">boolean</span> isSmoking<span class="token punctuation">;</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人负责挣钱养家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人多吃肉，长肌肉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人霸气的走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Woman类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">boolean</span> isBeauty<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人喜欢购物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人少吃，为了减肥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人窈窕的走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java4</span><span class="token punctuation">;</span><span class="token comment">/* * 面向对象特征之三：多态性 *  * 1.理解多态性：可以理解为一个事物的多种形态。 * 2.何为多态性： *   对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用） *    * 3. 多态的使用：虚拟方法调用 *   有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。 *   总结：编译，看左边；运行，看右边。 *    * 4.多态性的使用前提：  ① 类的继承关系  ② 方法的重写 *  * 5.对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Man</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*************************************************</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象的多态性：父类的引用指向子类的对象</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person p3 = new Woman();</span><span class="token comment">//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法 ---虚拟方法调用</span>        <span class="token comment">// 但是不能调用子类特有的方法（不是从父类重写的）</span>p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p2.earnMoney();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1001</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="面试题1：多态是编译时行为还是运行时行为？">面试题1：多态是编译时行为还是运行时行为？</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java5</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">//面试题：多态是编译时行为还是运行时行为？</span><span class="token comment">//证明如下：</span><span class="token keyword">class</span> <span class="token class-name">Animal</span>  <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal eat food"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span>  <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat eat fish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span>  <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog eat bone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span>  <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sheep eat grass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Animal</span>  <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span>  animal <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 如果是编译时行为，那么在多次运行输出时只会输出animal eat food，然而事实并非如此，所以是运行时行为。</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="面试题2：区分方法的重写和重载？">面试题2：区分方法的重写和重载？</h4><p>答：<br>① 二者的概念：<br>② 重载和重写的具体规则<br>③ 重载：不表现为多态性。<br>重写：表现为多态性。<br>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。<br>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</p><p>而对于多态，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。</p><p>引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。”</p><h4 id="关键字：instanceof">关键字：instanceof</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915213704.png" alt="image-20210915213704432"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915213739.png" alt="image-20210915213739447"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915213815.png" alt="image-20210915213815651"></p><p>继续用上方多态性的案例写</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/* * 面向对象特征之三：多态性  * 1.理解多态性：可以理解为一个事物的多种形态。 * 2.何为多态性： *   对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用） *    * 3. 多态的使用：虚拟方法调用 *   有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。 *   总结：编译，看左边；运行，看右边。 *    * 4.多态性的使用前提：  ① 类的继承关系  ② 方法的重写 *  * 5.对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边） *  * ************************************************************* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Man</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*************************************************</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象的多态性：父类的引用指向子类的对象</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person p3 = new Woman();</span><span class="token comment">//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法 ---虚拟方法调用</span> <span class="token comment">// 但是不能调用子类特有的方法（不是从父类重写的）</span>p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p2.earnMoney();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1001</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能调用子类所特有的方法、属性：编译时，p2是Person类型。</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token comment">//p2.earnMoney();</span><span class="token comment">//p2.isSmoking = true;</span><span class="token comment">//有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致</span><span class="token comment">//编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</span><span class="token comment">//如何才能调用子类特有的属性和方法？</span><span class="token comment">//向下转型：使用强制类型转换符。</span><span class="token class-name">Man</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span>isSmoking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//使用强转时，可能出现ClassCastException的异常。</span><span class="token comment">//Woman w1 = (Woman)p2;</span><span class="token comment">//w1.goShopping();</span><span class="token comment">/* * instanceof关键字的使用 *  * a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。 *  *  使用情境：为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先 *  进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。 *   *  如果 a instanceof A返回true,则 a instanceof B也返回true. *  其中，类B是类A的父类。 */</span><span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Woman</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Woman</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>w1<span class="token punctuation">.</span><span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******Woman******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Man</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******Man******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******Person******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******Object******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//if(p2 instanceof String){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">//练习：</span><span class="token comment">//问题一：编译时通过，运行时不通过</span><span class="token comment">//举例一：woman不能转man</span><span class="token comment">//Person p3 = new Woman();</span><span class="token comment">//Man m3 = (Man)p3;</span><span class="token comment">//举例二：报错</span><span class="token comment">//Person p4 = new Person();</span><span class="token comment">//Man m4 = (Man)p4;</span><span class="token comment">//问题二：编译通过，运行时也通过</span><span class="token comment">//Object obj = new Woman();</span><span class="token comment">//Person p = (Person)obj;</span><span class="token comment">//问题三：编译不通过</span><span class="token comment">//Man m5 = new Woman();</span><span class="token comment">//String str = new Date();</span><span class="token comment">//Object o = new Date();</span><span class="token comment">//String str1 = (String)o;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//class Order{</span><span class="token comment">//</span><span class="token comment">//}</span></code></pre><h4 id="练习">练习</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 练习： * 1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法， * 系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边 *  * 2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量， * 这个实例变量依然不可能覆盖父类中定义的实例变量：编译运行都看左边 */</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldMethodTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token class-name">Base</span> b <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">//多态性</span><span class="token comment">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915225424.png" alt="image-20210915225424358"></p><p>练习5答案：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 建立InstanceTest 类，在类中定义方法method(Person e);在method中:(1)根据e的类型调用相应类的getInfo()方法。(2)根据e的类型执行：如果e为Person类的对象，输出：“a person”;如果e为Student类的对象，输出：“a student”“a person ” 如果e为Graduate类的对象，输出： “a graduated student”“a student”“a person”  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">InstanceTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Person</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//虚拟方法调用</span><span class="token class-name">String</span> info <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式一</span><span class="token comment">//if(e instanceof Graduate){</span><span class="token comment">//System.out.println("a graduated student");</span><span class="token comment">//System.out.println("a student");</span><span class="token comment">//System.out.println("a person");</span><span class="token comment">//}else if(e instanceof Student){</span><span class="token comment">//System.out.println("a student");</span><span class="token comment">//System.out.println("a person");</span><span class="token comment">//}else{</span><span class="token comment">//System.out.println("a person");</span><span class="token comment">//}</span><span class="token comment">//方式二</span><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Graduate</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a graduated student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"age: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token class-name">String</span> school <span class="token operator">=</span> <span class="token string">"pku"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\nage: "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"\nschool: "</span> <span class="token operator">+</span> school<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Graduate</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> major <span class="token operator">=</span> <span class="token string">"IT"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\nage: "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"\nschool: "</span> <span class="token operator">+</span> school <span class="token operator">+</span> <span class="token string">"\nmajor:"</span> <span class="token operator">+</span> major<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916170748.png" alt="image-20210916170742445"></p><p>GeometricObject类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">{</span><span class="token comment">//几何图形</span><span class="token keyword">protected</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Circle类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">,</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyRectangle类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRectangle</span> <span class="token keyword">extends</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyRectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">,</span><span class="token keyword">double</span> height<span class="token punctuation">,</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类GeometricTest</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer1</span><span class="token punctuation">;</span><span class="token comment">/* *  * 定义一个测试类GeometricTest， * 编写equalsArea方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术）， * 编写displayGeometricObject方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeometricTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">GeometricTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeometricTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Circle</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">displayGeometricObject</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多态性体现</span><span class="token class-name">Circle</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">displayGeometricObject</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多态性体现</span><span class="token keyword">boolean</span> isEquals <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">equalsArea</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1 和 c2的面积是否相等："</span> <span class="token operator">+</span> isEquals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MyRectangle</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRectangle</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">displayGeometricObject</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">displayGeometricObject</span><span class="token punctuation">(</span><span class="token class-name">GeometricObject</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//GeometricObject o = new Circle(...)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面积为："</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//测试两个对象的面积是否相等</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equalsArea</span><span class="token punctuation">(</span><span class="token class-name">GeometricObject</span> o1<span class="token punctuation">,</span><span class="token class-name">GeometricObject</span> o2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> o2<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916173123.png" alt="image-20210916173123166"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">//考查多态的笔试题目：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Base1</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sub_1</span><span class="token comment">//Sub1 s = (Sub1)base;</span><span class="token comment">//s.add(1,2,3);</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Base1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub1</span> <span class="token keyword">extends</span> <span class="token class-name">Base1</span> <span class="token punctuation">{</span>    <span class="token comment">// 这个才是真正覆写的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Object类的使用">Object类的使用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * java.lang.Object类 * 1.Object类是所有Java类的根父类 * 2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类  * 3.Object类中的功能(属性、方法)就具有通用性。 * 属性：无 *  方法：equals() / toString() / getClass() /hashCode() / clone() / finalize() *     wait() 、 notify()、notifyAll() *  * 4. Object类只声明了一个空参的构造器 *  * 面试题： * final、finally、finalize的区别？ * 垃圾回收之前会调用finalize()方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="和equals的区别">==和equals的区别</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916203703.png" alt="image-20210916203703010"></p><p>Customer类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//自动生成的equals()</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Customer</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> other<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//重写的原则：比较两个对象的实体内容(即：name和age)是否相同</span><span class="token comment">//手动实现equals()的重写</span><span class="token comment">//@Override</span><span class="token comment">//public boolean equals(Object obj) {</span><span class="token comment">////System.out.println("Customer equals()....");</span><span class="token comment">//if (this == obj) {</span><span class="token comment">//            return true;</span><span class="token comment">//        }</span><span class="token comment">//if(obj instanceof Customer){</span><span class="token comment">//Customer cust = (Customer)obj;</span><span class="token comment">////比较两个对象的每个属性是否都相同</span><span class="token comment">////if(this.age == cust.age &amp;&amp; this.name.equals(cust.name)){</span><span class="token comment">////return true;</span><span class="token comment">////}else{</span><span class="token comment">////return false;</span><span class="token comment">////}</span><span class="token comment">//</span><span class="token comment">////或</span><span class="token comment">//return this.age == cust.age &amp;&amp; this.name.equals(cust.name);</span><span class="token comment">//}else{</span><span class="token comment">//return false;</span><span class="token comment">//}</span><span class="token comment">//}</span><span class="token comment">//手动实现</span><span class="token comment">//@Override</span><span class="token comment">//public String toString() {</span><span class="token comment">//return "Customer[name = " + name + ",age = " + age + "]"; </span><span class="token comment">//}</span><span class="token comment">//自动实现</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Customer [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token operator">/</span> <span class="token operator">*</span> 面试题： <span class="token operator">==</span> 和 <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 区别 <span class="token operator">*</span>  <span class="token operator">*</span> 一、回顾 <span class="token operator">==</span> 的使用： <span class="token operator">*</span> <span class="token operator">==</span> ：运算符 <span class="token operator">*</span> <span class="token number">1.</span> 可以使用在基本数据类型变量和引用数据类型变量中 <span class="token operator">*</span> <span class="token number">2.</span> 如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同） <span class="token operator">*</span>    如果比较的是引用数据类型变量：比较两个对象的地址值是否相同<span class="token punctuation">.</span>即两个引用是否指向同一个对象实体 <span class="token operator">*</span> 补充： <span class="token operator">==</span> 符号使用时，必须保证符号左右两边的变量类型一致<span class="token punctuation">(</span>能类型转换<span class="token punctuation">)</span>。 <span class="token operator">*</span>  <span class="token operator">*</span> 二、<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法的使用： <span class="token operator">*</span> <span class="token number">1.</span> 是一个方法，而非运算符 <span class="token operator">*</span> <span class="token number">2.</span> 只能适用于引用数据类型 <span class="token operator">*</span> <span class="token number">3.</span> <span class="token class-name">Object</span>类中<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的定义： <span class="token operator">*</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token operator">*</span>    说明：<span class="token class-name">Object</span>类中定义的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token operator">==</span>的作用是相同的：比较两个对象的地址值是否相同<span class="token punctuation">.</span>即两个引用是否指向同一个对象实体 <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token number">4.</span> 像<span class="token class-name">String</span>、<span class="token class-name">Date</span>、<span class="token class-name">File</span>、包装类等都重写了<span class="token class-name">Object</span>类中的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。重写以后，比较的不是 <span class="token operator">*</span>    两个引用的地址是否相同，而是比较两个对象的<span class="token string">"实体内容"</span>是否相同。 <span class="token operator">*</span>     <span class="token operator">*</span> <span class="token number">5.</span> 通常情况下，我们自定义的类如果使用<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的话，也通常是比较两个对象的<span class="token string">"实体内容"</span>是否相同。那么，我们 <span class="token operator">*</span>    就需要对<span class="token class-name">Object</span>类中的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进行重写<span class="token punctuation">.</span> <span class="token operator">*</span>    重写的原则：比较两个对象的实体内容是否相同<span class="token punctuation">.</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//基本数据类型</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(i == b);// 直接报错</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//引用类型：</span>        <span class="token comment">// 3</span><span class="token class-name">Customer</span> cust1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Customer</span> cust2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust1 <span class="token operator">==</span> cust2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">// 4</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cust2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false---&gt;true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">// 5</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">32432525324L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">32432525324L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自动重写equals()方法（在Eclipse中）</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916205122.png" alt=""></p><h4 id="练习-2">练习</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916210125.png" alt="image-20210916210125447"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916210753.png" alt="image-20210916210753339"></p><p>1，Order类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token comment">/* * 编写Order类，有int型的orderId，String型的orderName， * 相应的getter()和setter()方法，两个参数的构造器， * 重写父类的equals()方法：public boolean equals(Object obj)， * 并判断测试类中创建的两个对象是否相等。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Order</span> order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> order2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> order3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String s1 = "BB";</span><span class="token comment">//String s2 = "BB";</span><span class="token comment">//System.out.println(s1 == s2);//true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> orderId<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> orderName<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> orderId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> orderName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderName</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span> <span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token comment">//正确的：</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">==</span> order<span class="token punctuation">.</span>orderId <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orderName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>orderName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误的：</span><span class="token comment">//return this.orderId == order.orderId &amp;&amp;</span><span class="token comment">//this.orderName == order.orderName;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDateTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyDate</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1976</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyDate</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1976</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m1 <span class="token operator">==</span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1==m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1!=m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m1 != m2</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 is equal to m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// m1 is equal to m2</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 is not equal to m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyDate</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> month<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 手写</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">MyDate</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">MyDate</span> myDate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyDate</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">==</span> myDate<span class="token punctuation">.</span>day <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">==</span> myDate<span class="token punctuation">.</span>month <span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">==</span> myDate<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 自动</span><span class="token comment">//@Override</span><span class="token comment">//public boolean equals(Object obj) {</span><span class="token comment">//if (this == obj)</span><span class="token comment">//return true;</span><span class="token comment">//if (obj == null)</span><span class="token comment">//return false;</span><span class="token comment">//if (getClass() != obj.getClass())</span><span class="token comment">//return false;</span><span class="token comment">//MyDate other = (MyDate) obj;</span><span class="token comment">//if (day != other.day)</span><span class="token comment">//return false;</span><span class="token comment">//if (month != other.month)</span><span class="token comment">//return false;</span><span class="token comment">//if (year != other.year)</span><span class="token comment">//return false;</span><span class="token comment">//return true;</span><span class="token comment">//}</span><span class="token punctuation">}</span></code></pre><h4 id="toString-方法">toString()方法</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916211411.png" alt="image-20210916211411476"></p><p>Customer类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//自动生成的equals()</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Customer</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> other<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//重写的原则：比较两个对象的实体内容(即：name和age)是否相同</span><span class="token comment">//手动实现equals()的重写</span><span class="token comment">//@Override</span><span class="token comment">//public boolean equals(Object obj) {</span><span class="token comment">////System.out.println("Customer equals()....");</span><span class="token comment">//if (this == obj) {</span><span class="token comment">//            return true;</span><span class="token comment">//        }</span><span class="token comment">//if(obj instanceof Customer){</span><span class="token comment">//Customer cust = (Customer)obj;</span><span class="token comment">////比较两个对象的每个属性是否都相同</span><span class="token comment">////if(this.age == cust.age &amp;&amp; this.name.equals(cust.name)){</span><span class="token comment">////return true;</span><span class="token comment">////}else{</span><span class="token comment">////return false;</span><span class="token comment">////}</span><span class="token comment">//</span><span class="token comment">////或</span><span class="token comment">//return this.age == cust.age &amp;&amp; this.name.equals(cust.name);</span><span class="token comment">//}else{</span><span class="token comment">//return false;</span><span class="token comment">//}</span><span class="token comment">//}</span><span class="token comment">//手动实现</span><span class="token comment">//@Override</span><span class="token comment">//public String toString() {</span><span class="token comment">//return "Customer[name = " + name + ",age = " + age + "]"; </span><span class="token comment">//}</span><span class="token comment">//自动实现</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Customer [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/* * Object类中toString()的使用： *  * 1. 当我们输出一个对象的引用时，实际上就是调用当前对象的toString() *  * 2. Object类中toString()的定义： *   public String toString() {        return getClass().getName() + "@" + Integer.toHexString(hashCode());     } *  * 3. 像String、Date、File、包装类等都重写了Object类中的toString()方法。 *    使得在调用对象的toString()时，返回"实体内容"信息 *     * 4. 自定义类也可以重写toString()方法，当调用此方法时，返回对象的"实体内容" */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Customer</span> cust1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//com.atguigu.java1.Customer@15db9742--&gt;Customer[name = Tom,age = 21]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cust1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//com.atguigu.java1.Customer@15db9742--&gt;Customer[name = Tom,age = 21]</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"MM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MM</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">4534534534543L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Sep 11 08:55:34 GMT+08:00 2113</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自动实现toString()重写</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916212255.png" alt="image-20210916212255557"></p><h4 id="练习-3">练习</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916212548.png" alt="image-20210916212548337"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916212642.png" alt="image-20210916212642546"></p><p>GeometricObject类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Circle类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>radius <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token comment">//color = "white";</span><span class="token comment">//weight = 1.0;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">,</span><span class="token class-name">String</span> color<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//求圆的面积</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//比较两个圆的半径是否相等，如相等，返回true。</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">==</span> c<span class="token punctuation">.</span>radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Circle [radius="</span> <span class="token operator">+</span> radius <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token comment">/* * 写一个测试类，创建两个Circle对象，判断其颜色是否相等； * 利用equals方法判断其半径是否相等；利用toString()方法输出其半径。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Circle</span> circle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Circle</span> circle2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"颜色是否相等："</span> <span class="token operator">+</span> circle1<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>circle2<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"半径是否相等："</span> <span class="token operator">+</span> circle1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>circle2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circle1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circle2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="单元测试方法">单元测试方法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * Java中的JUnit单元测试 *  * 步骤： * 1.选中当前工程 - 右键选择：build path - add libraries - JUnit 4 - 下一步 * 2.创建Java类，进行单元测试。 *   此时的Java类要求：① 此类是public的  ②此类提供公共的无参的构造器 * 3.此类中声明单元测试方法。 *   此时的单元测试方法：方法的权限是public,没有返回值，没有形参 *  * 4.此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test; *  * 5.声明好单元测试方法以后，就可以在方法体内测试相关的代码。 * 6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test *  * 说明： * 1.如果执行结果没有任何异常：绿条 * 2.如果执行结果出现异常：红条 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnitTest</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"MM"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"MM"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ClassCastException的异常</span><span class="token comment">//Object obj = new String("GG");</span><span class="token comment">//Date date = (Date)obj;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show()...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"MM"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="包装类的使用">包装类的使用</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916214230.png" alt="image-20210916214229865"></p><h4 id="基本数据类型，包装类，String类之间的相互转换">基本数据类型，包装类，String类之间的相互转换</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210916214710.png" alt="image-20210916214710062"></p><p>test1(包装类–&gt;基本数据类型)test2(基本数据类型–&gt;包装类)   test3(自动装箱，自动拆箱)</p><p>test4(基本数据类型，包装类–&gt;String类型) test5(String类型 —&gt;基本数据类型、包装类)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * 包装类的使用: * 1.java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征 *  * 2.掌握的：基本数据类型、包装类、String三者之间的相互转换  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperTest</span> <span class="token punctuation">{</span><span class="token comment">//String类型 ---&gt;基本数据类型、包装类：调用包装类的parseXxx(String s)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//错误的情况：</span><span class="token comment">//int num1 = (int)str1;</span><span class="token comment">//Integer in1 = (Integer)str1;</span><span class="token comment">//可能会报NumberFormatException</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"true1"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//基本数据类型、包装类---&gt;String类型：调用String重载的valueOf(Xxx xxx)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//方式1：连接运算</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//方式2：调用String的valueOf(Xxx xxx)</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">12.3f</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"12.3"</span><span class="token class-name">Double</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"12.4"</span><span class="token punctuation">}</span><span class="token comment">/* * JDK 5.0 新特性：自动装箱 与自动拆箱 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//int num1 = 10;</span><span class="token comment">////基本数据类型--&gt;包装类的对象</span><span class="token comment">//method(num1);</span><span class="token comment">//自动装箱：基本数据类型 ---&gt;包装类</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> num2<span class="token punctuation">;</span><span class="token comment">//自动装箱</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment">//自动装箱</span><span class="token comment">//自动拆箱：包装类---&gt;基本数据类型</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> in1<span class="token punctuation">;</span><span class="token comment">//自动拆箱</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//包装类---&gt;基本数据类型:调用包装类Xxx的xxxValue()</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Float</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//基本数据类型 ---&gt;包装类：调用包装类的构造器</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// Integer</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(num1.toString());</span><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> in2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报异常</span><span class="token comment">//Integer in3 = new Integer("123abc");</span><span class="token comment">//System.out.println(in3.toString());</span><span class="token comment">// Float</span><span class="token class-name">Float</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Float</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token string">"12.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Boolean</span><span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"TrUe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"true123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据源码可知，只要不是true就是false，所以这里不会报异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>isFemale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token class-name">Boolean</span> isFemale<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="练习-4">练习</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917012145.png" alt="image-20210917011820710"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917013050.png" alt="image-20210917013050234"></p><p>答案代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * 关于包装类使用的面试题 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 因为在编译时必须统一数据类型，所以会自动类型提升</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1.0</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> o2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span><span class="token comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span><span class="token comment">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//相当于new了一个Integer对象</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//相当于new了一个Integer对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习2</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917013752.png" alt="image-20210917013752692"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span><span class="token punctuation">;</span><span class="token comment">/* *  利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。而向量类java.util.Vector可以根据需要动态伸缩。创建Vector对象：Vector v=new Vector();给向量添加元素：v.addElement(Object obj);   //obj必须是对象取出向量中的元素：Object  obj=v.elementAt(0);注意第一个元素的下标是0，返回值是Object类型的。计算向量的长度：v.size();若与最高分相差10分内：A等；20分内：B等；      30分内：C等；其它：D等 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScoreTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1.实例化Scanner，用于从键盘获取学生成绩</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.创建Vector对象：Vector v=new Vector();相当于原来的数组</span><span class="token class-name">Vector</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过for(;;)或while(true)方式，给Vector中添加数组</span><span class="token keyword">int</span> maxScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生成绩（以负数代表输入结束）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.2 当输入是负数时，跳出循环</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据非法，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//3.1 添加操作：：v.addElement(Object obj)</span><span class="token comment">//jdk5.0之前：</span><span class="token comment">//Integer inScore = new Integer(score);</span><span class="token comment">//v.addElement(inScore);//多态</span><span class="token comment">//jdk5.0之后：</span>v<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动装箱</span><span class="token comment">//4.获取学生成绩的最大值</span><span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">&lt;</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span>maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//5.遍历Vector，得到每个学生的成绩，并与最大成绩比较，得到每个学生的等级。</span><span class="token keyword">char</span> level<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jdk 5.0之前：</span><span class="token comment">//Integer inScore = (Integer)obj;</span><span class="token comment">//int score = inScore.intValue();</span><span class="token comment">//jdk 5.0之后：</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student-"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> score <span class="token operator">+</span> <span class="token string">",level is "</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结-多态-object-包装类">总结(多态,object,包装类)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>多态性的理解：可以理解为一个事物的多种形态。<span class="token number">2.</span>何为多态性：对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）举例：<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>多态性的使用：虚拟方法调用<span class="token operator">&gt;</span> 有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。<span class="token operator">&gt;</span> 总结：编译，看左边；运行，看右边。<span class="token operator">&gt;</span> <span class="token number">4.</span>多态性的使用前提：<span class="token operator">&gt;</span> ① 类的继承关系  ② 方法的重写<span class="token operator">&gt;</span> <span class="token number">5.</span>多态性的应用举例：<span class="token operator">&gt;</span> 举例一：<span class="token operator">&gt;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Animal animal = new Dog();</span><span class="token operator">&gt;</span> animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span> animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> 举例二：<span class="token operator">&gt;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span>举例三：<span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doData</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//conn = new MySQlConnection(); / conn = new OracleConnection();</span><span class="token comment">//规范的步骤去操作数据</span><span class="token comment">//conn.method1();</span><span class="token comment">//conn.method2();</span><span class="token comment">//conn.method3();</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">6.</span>多态性使用的注意点：对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">7.</span>关于向上转型与向下转型：<span class="token number">7.1</span> 向上转型：多态<span class="token number">7.2</span> 向下转型：<span class="token number">7.2</span><span class="token number">.1</span> 为什么使用向下转型：有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。<span class="token number">7.2</span><span class="token number">.2</span> 如何实现向下转型：使用强制类型转换符：<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">7.2</span><span class="token number">.3</span> 使用时的注意点：① 使用强转时，可能出现<span class="token class-name">ClassCastException</span>的异常。② 为了避免在向下转型时出现<span class="token class-name">ClassCastException</span>的异常，我们在向下转型之前，先进行<span class="token keyword">instanceof</span>的判断，一旦返回<span class="token boolean">true</span>，就进行向下转型。如果返回<span class="token boolean">false</span>，不进行向下转型。<span class="token number">7.2</span><span class="token number">.4</span> <span class="token keyword">instanceof</span>的使用：① a <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token operator">:</span>判断对象a是否是类<span class="token class-name">A</span>的实例。如果是，返回<span class="token boolean">true</span>；如果不是，返回<span class="token boolean">false</span>。② 如果 a <span class="token keyword">instanceof</span> <span class="token class-name">A</span>返回<span class="token boolean">true</span><span class="token punctuation">,</span>则 a <span class="token keyword">instanceof</span> <span class="token class-name">B</span>也返回<span class="token boolean">true</span><span class="token punctuation">.</span>其中，类<span class="token class-name">B</span>是类<span class="token class-name">A</span>的父类。③ 要求a所属的类与类<span class="token class-name">A</span>必须是子类和父类的关系，否则编译错误。<span class="token number">7.2</span><span class="token number">.5</span> 图示：</code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210915213815.png" alt="image-20210915213815651"></p><pre class="language-java" data-language="java"><code class="language-java">面试题：<span class="token number">8.1</span> 谈谈你对多态性的理解？① 实现代码的通用性。② <span class="token class-name">Object</span>类中定义的<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  JDBC<span class="token operator">:</span>使用java程序操作<span class="token punctuation">(</span>获取数据库连接、CRUD<span class="token punctuation">)</span>数据库<span class="token punctuation">(</span><span class="token class-name">MySQL</span>、<span class="token class-name">Oracle</span>、DB2、SQL <span class="token class-name">Server</span><span class="token punctuation">)</span>③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）<span class="token number">8.2</span> 多态是编译时行为还是<span class="token operator">*</span><span class="token operator">*</span>运行时行为<span class="token operator">*</span><span class="token operator">*</span>？</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object类的说明： <span class="token operator">*</span> <span class="token number">1.</span>Object类是所<span class="token class-name">Java</span>类的根父类 <span class="token operator">*</span> <span class="token number">2.</span>如果在类的声明中未使用<span class="token keyword">extends</span>关键字指明其父类，则默认父类为<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span>类  <span class="token operator">*</span> <span class="token number">3.</span>Object类中的功能<span class="token punctuation">(</span>属性、方法<span class="token punctuation">)</span>就具通用性。 <span class="token operator">*</span> 属性：无 <span class="token operator">*</span>  方法：<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>     <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 、 <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token number">4.</span> <span class="token class-name">Object</span>类只声明了一个空参的构造器<span class="token number">2.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token number">2.1</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的使用：   <span class="token number">1.</span> 是一个方法，而非运算符 <span class="token operator">*</span> <span class="token number">2.</span> 只能适用于引用数据类型 <span class="token operator">*</span> <span class="token number">3.</span> <span class="token class-name">Object</span>类中<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的定义： <span class="token operator">*</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token operator">*</span>    说明：<span class="token class-name">Object</span>类中定义的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token operator">==</span>的作用是相同的：比较两个对象的地址值是否相同<span class="token punctuation">.</span>即两个引用是否指向同一个对象实体 <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token number">4.</span> 像<span class="token class-name">String</span>、<span class="token class-name">Date</span>、<span class="token class-name">File</span>、包装类等都重写了<span class="token class-name">Object</span>类中的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。重写以后，比较的不是 <span class="token operator">*</span>    两个引用的地址是否相同，而是比较两个对象的<span class="token string">"实体内容"</span>是否相同。 <span class="token operator">*</span>     <span class="token operator">*</span> <span class="token number">5.</span> 通常情况下，我们自定义的类如果使用<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的话，也通常是比较两个对象的<span class="token string">"实体内容"</span>是否相同。那么，我们 <span class="token operator">*</span>    就需要对<span class="token class-name">Object</span>类中的<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>进行重写<span class="token punctuation">.</span> <span class="token operator">*</span>    重写的原则：比较两个对象的实体内容是否相同<span class="token punctuation">.</span><span class="token number">2.2</span> 如何重写<span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2.2</span><span class="token number">.1</span> 手动重写举例：<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//重写其equals()方法</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> u<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">2.2</span><span class="token number">.2</span> 开发中如何实现：自动生成的<span class="token number">2.3</span> 回顾 <span class="token operator">==</span> 运算符的使用： <span class="token operator">*</span> <span class="token operator">==</span> ：运算符 <span class="token operator">*</span> <span class="token number">1.</span> 可以使用在基本数据类型变量和引用数据类型变量中 <span class="token operator">*</span> <span class="token number">2.</span> 如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同） <span class="token operator">*</span>    如果比较的是引用数据类型变量：比较两个对象的地址值是否相同<span class="token punctuation">.</span>即两个引用是否指向同一个对象实体 <span class="token operator">*</span> 补充： <span class="token operator">==</span> 符号使用时，必须保证符号左右两边的变量类型一致。<span class="token number">3.</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token number">3.1</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的使用：   <span class="token number">1.</span> 当我们输出一个对象的引用时，实际上就是调用当前对象的<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token number">2.</span> <span class="token class-name">Object</span>类中<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的定义： <span class="token operator">*</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token operator">*</span>  <span class="token operator">*</span> <span class="token number">3.</span> 像<span class="token class-name">String</span>、<span class="token class-name">Date</span>、<span class="token class-name">File</span>、包装类等都重写了<span class="token class-name">Object</span>类中的<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。 <span class="token operator">*</span>    使得在调用对象的<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时，返回<span class="token string">"实体内容"</span>信息 <span class="token operator">*</span>     <span class="token operator">*</span> <span class="token number">4.</span> 自定义类也可以重写<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，当调用此方法时，返回对象的<span class="token string">"实体内容"</span><span class="token number">3.2</span> 如何重写<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>举例：<span class="token comment">//自动实现</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Customer [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">4.</span>面试题：① <span class="token keyword">final</span>、<span class="token keyword">finally</span>、finalize的区别？②  <span class="token operator">==</span> 和 <span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 区别</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">Java</span>中的<span class="token class-name">JUnit</span>单元测试<span class="token operator">*</span> <span class="token operator">*</span> 步骤：<span class="token operator">*</span> <span class="token number">1.</span>中当前工程 <span class="token operator">-</span> 右键择：build path <span class="token operator">-</span> add libraries <span class="token operator">-</span> <span class="token class-name">JUnit</span> <span class="token number">4</span> <span class="token operator">-</span> 下一步<span class="token operator">*</span> <span class="token number">2.</span>创建<span class="token class-name">Java</span>类，进行单元测试。<span class="token operator">*</span>   此时的<span class="token class-name">Java</span>类要求：① 此类是<span class="token keyword">public</span>的  ②此类提供公共的无参的构造器<span class="token operator">*</span> <span class="token number">3.</span>此类中声明单元测试方法。<span class="token operator">*</span>   此时的单元测试方法：方法的权限是<span class="token keyword">public</span><span class="token punctuation">,</span>没返回值，没形参<span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">4.</span>此单元测试方法上需要声明注解：<span class="token annotation punctuation">@Test</span><span class="token punctuation">,</span>并在单元测试类中导入：<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">5.</span>声明好单元测试方法以后，就可以在方法体内测试相关的代码。<span class="token operator">*</span> <span class="token number">6.</span>写完代码以后，左键双击单元测试方法名，右键：run as <span class="token operator">-</span> <span class="token class-name">JUnit</span> <span class="token class-name">Test</span><span class="token operator">*</span> <span class="token operator">*</span> 说明：<span class="token operator">*</span> <span class="token number">1.</span>如果执行结果没任何异常：绿条<span class="token operator">*</span> <span class="token number">2.</span>如果执行结果出现异常：红条</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>为什么要有包装类<span class="token punctuation">(</span>或封装类）为了使基本数据类型的变量具有类的特征，引入包装类。<span class="token number">2.</span>基本数据类型与对应的包装类：<span class="token number">3.</span>需要掌握的类型间的转换：（基本数据类型、包装类、<span class="token class-name">String</span>）简易版：基本数据类型<span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-&gt;</span>包装类：JDK <span class="token number">5.0</span> 新特性：自动装箱 与自动拆箱基本数据类型、包装类<span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token class-name">String</span><span class="token operator">:</span>调用<span class="token class-name">String</span>重载的<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Xxx</span> xxx<span class="token punctuation">)</span><span class="token class-name">String</span><span class="token operator">--</span><span class="token operator">-&gt;</span>基本数据类型、包装类<span class="token operator">:</span>调用包装类的<span class="token function">parseXxx</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>     注意：转换时，可能会报<span class="token class-name">NumberFormatException</span>应用场景举例：① <span class="token class-name">Vector</span>类中关于添加元素，只定义了形参为<span class="token class-name">Object</span>类型的方法：v<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//基本数据类型 ---&gt;包装类 ---&gt;使用多态</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(6)---面向对象(下篇)</title>
      <link href="/2021/09/25/java-ji-chu-6-mian-xiang-dui-xiang-xia-pian/"/>
      <url>/2021/09/25/java-ji-chu-6-mian-xiang-dui-xiang-xia-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="面向对象-下篇">面向对象(下篇)</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917023634.png" alt="image-20210917023633815"></p><h3 id="关键字：static">关键字：static</h3><h4 id="基本知识">基本知识</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917091417.png" alt="image-20210917091417732"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * static关键字的使用 *  * 1.static:静态的 * 2.static可以用来修饰：属性、方法、代码块、内部类 *  * 3.使用static修饰属性：静态变量（或类变量） * 3.1 属性，按是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量) *    实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的 *              非静态属性时，不会导致其他对象中同样的属性值的修改。 *       静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致 *              其他对象调用此静态变量时，是修改过了的。 * 3.2 static修饰属性的其他说明： * ① 静态变量随着类的加载而加载。可以通过"类.静态变量"的方式进行调用 *          ② 静态变量的加载要早于对象的创建。 *          ③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。 *           *          ④类变量实例变量 *          类yesno *          对象yesyes *           *      3.3 静态属性举例：System.out; Math.PI; *  * 4.使用static修饰方法：静态方法 * ① 随着类的加载而加载，可以通过"类.静态方法"的方式进行调用 * ②静态方法非静态方法 *          类yesno *          对象yesyes * ③ 静态方法中，只能调用静态的方法或属性 *        非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性 *  * 5. static注意点： *    5.1 在静态的方法内，不能使用this关键字、super关键字 *    5.2 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。 *     * 6. 开发中，如何确定一个属性是否要声明为static的？ * &gt; 属性是可以被多个对象所共享的，不会随着对象的不同而不同的。 * &gt; 类中的常量也常常声明为static *  *    开发中，如何确定一个方法是否要声明为static的？ *    &gt; 操作静态属性的方法，通常设置为static的 *      &gt; 工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span><span class="token class-name">Chinese</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"姚明"</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">"CHN"</span><span class="token punctuation">;</span><span class="token class-name">Chinese</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"马龙"</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">"CHINA"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span class="token comment">//Chinese.name = "张继科";</span>c1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span class="token comment">//Chinese.eat();</span><span class="token comment">//Chinese.info();</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//中国人</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">String</span> nation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中国人吃中餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用非静态结构</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name :"</span> <span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态结构</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nation : "</span> <span class="token operator">+</span> nation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个中国人！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能调用非静态的结构</span><span class="token comment">//eat();</span><span class="token comment">//name = "Tom";</span><span class="token comment">//可以调用静态的结构</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name :"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">",age : "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917093741.png" alt="image-20210917093740867"></p><h4 id="练习">练习</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917101902.png" alt="image-20210917101902653"></p><p>Account类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”， * 定义封装这些属性的方法。账号要自动生成。编写主类，使用银行账户类，输入、输出3个储户的上述信息。考虑：哪些属性可以设计成static属性。  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token string">"000000"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> interestRate<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> minMoney <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> init <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//用于自动生成id使用的</span><span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">{</span>id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> interestRate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInterestRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> interestRate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Account</span><span class="token punctuation">.</span>interestRate <span class="token operator">=</span> interestRate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getMinMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> minMoney<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMinMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> minMoney<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Account</span><span class="token punctuation">.</span>minMoney <span class="token operator">=</span> minMoney<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Account [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", pwd="</span> <span class="token operator">+</span> pwd <span class="token operator">+</span> <span class="token string">", balance="</span> <span class="token operator">+</span> balance <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Account</span> acct1 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span> acct2 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"qwerty"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">setInterestRate</span><span class="token punctuation">(</span><span class="token number">0.012</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">setMinMoney</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>acct1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>acct2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>acct1<span class="token punctuation">.</span><span class="token function">getInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>acct1<span class="token punctuation">.</span><span class="token function">getMinMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="单例设计模式">单例设计模式</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * 单例设计模式： * 1. 所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。 *  * 2. 如何实现？ *  饿汉式  vs 懒汉式 *  * 3. 区分饿汉式 和 懒汉式 *   饿汉式： *   坏处：对象加载时间过长。 *   好处：饿汉式是线程安全的 *    *   懒汉式：好处：延迟对象的创建。 *   目前的写法坏处：线程不安全。---&gt;到多线程内容时，再修改 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//Bank bank1 = new Bank();</span><span class="token comment">//Bank bank2 = new Bank();</span><span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//饿汉式</span><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">{</span><span class="token comment">//1.私有化类的构造器</span><span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//2.内部创建类的对象</span><span class="token comment">//4.要求此对象也必须声明为静态的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.提供公共的静态的方法，返回类的对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>懒汉式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * 单例模式的懒汉式实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Order</span> order1 <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> order2 <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1 <span class="token operator">==</span> order2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token comment">//1.私有化类的构造器</span><span class="token keyword">private</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//2.声明当前类对象，没有初始化</span><span class="token comment">//4.此对象也必须声明为static的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//3.声明public、static的返回当前类对象的方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917105642.png" alt="image-20210917105642209"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917105719.png" alt="image-20210917105659198"></p><h3 id="理解main方法的语法">理解main方法的语法</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917112753.png" alt="image-20210917112753481"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * main()方法的使用说明： * 1. main()方法作为程序的入口 * 2. main()方法也是一个普通的静态方法 * 3. main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//入口</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MainTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MainTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"args_"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类的成员之四：代码块">类的成员之四：代码块</h3><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token comment">/* * 类的成员之四：代码块（或初始化块） *  * 1. 代码块的作用：用来初始化类、对象 * 2. 代码块如果有修饰的话，只能使用static. * 3. 分类：静态代码块  vs 非静态代码块 *  * 4. 静态代码块 *    &gt;内部可以有输出语句 *    &gt;随着类的加载而执行,而且只执行一次 *    &gt;作用：初始化类的信息 *    &gt;如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行 *    &gt;静态代码块的执行要优先于非静态代码块的执行 *    &gt;静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构 *  * 5. 非静态代码块 * &gt;内部可以有输出语句 * &gt;随着对象的创建而执行 * &gt;每创建一个对象，就执行一次非静态代码块 * &gt;作用：可以在创建对象时，对对象的属性等进行初始化 * &gt;如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行 * &gt;非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token string">"我是一个人"</span><span class="token punctuation">;</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//非static的代码块</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, block - 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, block - 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用非静态结构</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态结构</span>desc <span class="token operator">=</span> <span class="token string">"我是一个爱学习的人1"</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//static的代码块</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,static block-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,static block-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态结构</span>desc <span class="token operator">=</span> <span class="token string">"我是一个爱学习的人"</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不可以调用非静态结构</span><span class="token comment">//eat();</span><span class="token comment">//name = "Tom";</span><span class="token punctuation">}</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Person [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个快乐的人！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token comment">/**Root的静态初始化块    Mid的静态初始化块    Leaf的静态初始化块    Root的普通初始化块    Root的无参数的构造器    Mid的普通初始化块    Mid的无参数的构造器    Mid的带参数构造器，其参数值：尚硅谷    Leaf的普通初始化块    Leaf的构造器    Root的普通初始化块    Root的无参数的构造器    Mid的普通初始化块    Mid的无参数的构造器    Mid的带参数构造器，其参数值：尚硅谷    Leaf的普通初始化块    Leaf的构造器*/</span><span class="token comment">//总结：由父及子，静态先行</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Mid</span> <span class="token keyword">extends</span> <span class="token class-name">Root</span><span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过this调用同一类中重载的构造器</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的带参数构造器，其参数值："</span><span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Mid</span><span class="token punctuation">{</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过super调用父类中有一个字符串参数的构造器</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"尚硅谷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeafTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11111111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"22222222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"33333333333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"44444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"55555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"66666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 由父及子 静态先行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"77777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**111111111114444444444477777777777************************22222222222333333333335555555555566666666666************************22222222222333333333335555555555566666666666************************2222222222233333333333*/</span> </code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917163914.png" alt="image-20210917163914507"></p><h3 id="关键字：final">关键字：final</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917170450.png" alt="image-20210917170449922"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token comment">/* * final:最终的 *  * 1. final可以用来修饰的结构：类、方法、变量 *  * 2. final 用来修饰一个类:此类不能被其他类所继承。 *          比如：String类、System类、StringBuffer类 *  * 3. final 用来修饰方法：表明此方法不可以被重写 * 比如：Object类中getClass(); *  * 4. final 用来修饰变量：此时的"变量"就称为是一个常量 *     4.1 final修饰属性：可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化 * 4.2 final修饰局部变量： *           尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值 *           以后，就只能在方法体内使用此形参，但不能进行重新赋值。 *            *  static final 用来修饰属性：全局常量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTest</span> <span class="token punctuation">{</span><span class="token comment">// final修饰属性：可以考虑赋值的位置有：显式初始化</span><span class="token keyword">final</span> <span class="token keyword">int</span> WIDTH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> LEFT<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> RIGHT<span class="token punctuation">;</span><span class="token comment">//final int DOWN;</span><span class="token comment">// final修饰属性：可以考虑赋值的位置有：代码块中初始化</span><span class="token punctuation">{</span>LEFT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// final修饰属性：可以考虑赋值的位置有：构造器中初始化</span><span class="token keyword">public</span> <span class="token class-name">FinalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>RIGHT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">FinalTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>RIGHT <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//public void setDown(int down){</span><span class="token comment">//this.DOWN = down;</span><span class="token comment">//}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//width = 20;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//常量</span><span class="token comment">//NUM += 20;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//num = 20;//编译不通过</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">FinalTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test.setDown(3);</span>test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 2</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FinalA</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//class B extends FinalA{</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">//class C extends String{</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">// 3</span><span class="token keyword">class</span> AA<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> BB <span class="token keyword">extends</span> AA<span class="token punctuation">{</span><span class="token comment">//public void show(){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token punctuation">}</span></code></pre><p>练习</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917170730.png" alt="image-20210917170729896"></p><h4 id="总结-static，设计模式">总结(static，设计模式)</h4><p>static:静态的<br>1.可以用来修饰的结构：主要用来修饰类的内部结构<br>属性、方法、代码块、内部类<br>2.static修饰属性：静态变量（或类变量）<br>2.1 属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)</p><ul><li><pre><code>    实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</code></pre></li><li><pre><code>    静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</code></pre></li><li><pre><code>    2.2 static修饰属性的其他说明：</code></pre></li><li><pre><code>    ① 静态变量随着类的加载而加载。可以通过"类.静态变量"的方式进行调用</code></pre></li><li><pre><code>    ② 静态变量的加载要早于对象的创建。</code></pre></li><li><pre><code>    ③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</code></pre></li><li></li><li><pre><code>    ④类变量实例变量</code></pre></li><li><pre><code>    类yesno</code></pre></li><li><pre><code>    对象yesyes</code></pre></li><li></li><li><pre><code>    2.3 静态属性举例：System.out; Math.PI;</code></pre></li></ul><p>3.静态变量内存解析：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917093741.png" alt="image-20210917093740867"></p><p>4.static修饰方法：静态方法、类方法<br>① 随着类的加载而加载，可以通过"类.静态方法"的方式进行调用<br>②          静态方法非静态方法</p><ul><li><pre><code>     类    yesno</code></pre></li><li><pre><code>     对象yesyes       ③ 静态方法中，只能调用静态的方法或属性     非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</code></pre></li></ul><ol start="5"><li>static的注意点：<br>5.1 在静态的方法内，不能使用this关键字、super关键字<br>5.2 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</li></ol><p>6.如何判定属性和方法应该使用static关键字：<br>6.1 关于属性</p><blockquote><p>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。<br>类中的常量也常常声明为static</p></blockquote><p>6.2 关于方法</p><blockquote><p>操作静态属性的方法，通常设置为static的<br>工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections<br>7.使用举例：<br>举例一：Arrays、Math、Collections等工具类<br>举例二：单例模式<br>举例三</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//自动赋值</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span>total<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//id = init++;</span><span class="token comment">//total++;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token comment">//记录创建的圆的个数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> init <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//static声明的属性被所对象所共享</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.设计模式的说明<br>1.1 理解</p><p>设计模式是在大量的实践中总结和理论化之后优的代码结构、编程风格、以及解决问题的思考方式。</p><p>1.2 常用设计模式  — 23种经典的设计模式  GOF<br>创建型模式，共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>2.单例模式<br>2.1 要解决的问题：<br>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。<br>2.2 具体代码的实现：</p><pre class="language-java" data-language="java"><code class="language-java">饿汉式<span class="token number">1</span>：<span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">{</span><span class="token comment">//1.私化类的构造器</span><span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//2.内部创建类的对象</span><span class="token comment">//4.要求此对象也必须声明为静态的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.提供公共的静态的方法，返回类的对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>饿汉式2：使用了静态代码块</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token comment">//1.私化类的构造器</span><span class="token keyword">private</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//2.声明当前类对象，没初始化</span><span class="token comment">//4.此对象也必须声明为static的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">static</span><span class="token punctuation">{</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//3.声明public、static的返回当前类对象的方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>懒汉式：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token comment">//1.私化类的构造器</span><span class="token keyword">private</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//2.声明当前类对象，没初始化</span><span class="token comment">//4.此对象也必须声明为static的</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//3.声明public、static的返回当前类对象的方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Order</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.3 两种方式的对比：</p><ul><li>饿汉式：</li><li>坏处：对象加载时间过长。</li><li>好处：饿汉式是线程安全的</li><li></li><li>懒汉式：好处：延迟对象的创建。</li><li>目前的写法坏处：线程不安全。—&gt;到多线程内容时，再修改</li></ul><ol><li>main()方法作为程序的入口</li><li>main()方法也是一个普通的静态方法</li><li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li></ol><p>如何将控制台获取的数据传给形参：String[] args?<br>运行时：java 类名 “Tom” “Jerry” “123” “true”</p><p>sysout(args[0]);//“Tom”<br>sysout(args[3]);//“true”  --&gt;Boolean.parseBoolean(args[3]);<br>sysout(args[4]);//报异常</p><p>小结：一叶知秋<br>public static void main(String[] args){//方法体}</p><p>权限修饰符：private 缺省 protected pubilc ----&gt;封装性<br>修饰符：static \ final \ abstract \native 可以用来修饰方法<br>返回值类型： 无返回值 / 有返回值 --&gt;return<br>方法名：需要满足标识符命名的规则、规范；“见名知意”<br>形参列表：重载 vs 重写；参数的值传递机制；体现对象的多态性<br>方法体：来体现方法的功能<br>main(){<br>Person p = new Man();<br>p.eat();<br><a href="//p.earnMoney">//p.earnMoney</a>();</p><p>Man man = new Man();<br>man.eat();<br>man.earnMoney();<br>}</p><p>类的成员之四：代码块(初始化块)（重要性较属性、方法、构造器差一些）<br>1.代码块的作用：用来初始化类、对象的信息<br>2.分类：代码块要是使用修饰符，只能使用static<br>分类：静态代码块  vs 非静态代码块<br>3.<br>静态代码块：</p><blockquote><p>内部可以输出语句<br>随着类的加载而执行,而且只执行一次<br>作用：初始化类的信息<br>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行<br>静态代码块的执行要优先于非静态代码块的执行<br>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</p></blockquote><p>非静态代码块：</p><blockquote><p>内部可以输出语句<br>随着对象的创建而执行<br>每创建一个对象，就执行一次非静态代码块<br>作用：可以在创建对象时，对对象的属性等进行初始化<br>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行<br>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</p></blockquote><ol start="4"><li>实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序：<br>对应的练习：LeafTest.java / Son.java<br>由父及子，静态先行。</li></ol><ul><li>①默认初始化</li><li>②显式初始化/⑤在代码块中赋值</li><li>③构造器中初始化</li><li>④有了对象以后，可以通过"对象.属性"或"对象.方法"的方式，进行赋值</li><li>执行的先后顺序：① - ② / ⑤ - ③ - ④</li></ul><p>final：最终的<br>1.可以用来修饰：类、方法、变量<br>2.具体的：<br>2.1 final 用来修饰一个类:此类不能被其他类所继承。</p><ul><li><pre><code>     比如：String类、System类、StringBuffer类</code></pre></li><li><pre><code>     2.2 final 用来修饰方法：表明此方法不可以被重写</code></pre></li><li><pre><code>     比如：Object类中getClass();</code></pre></li><li><pre><code>     2.3 final 用来修饰变量：此时的"变量"就称为是一个常量</code></pre></li><li><pre><code>     1. final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</code></pre></li><li><pre><code>     2. final修饰局部变量：</code></pre></li><li><pre><code>     尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</code></pre></li><li></li></ul><p>static final 用来修饰属性：全局常量</p><h3 id="抽象类与抽象方法">抽象类与抽象方法</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917190828.png" alt="image-20210917190828380"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917192534.png" alt="image-20210917192534088"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * abstract关键字的使用 * 1.abstract:抽象的 * 2.abstract可以用来修饰的结构：类、方法 *  * 3. abstract修饰类：抽象类 * &gt; 此类不能实例化 *      &gt; 抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程） *      &gt; 开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 *  * 4. abstract修饰方法：抽象方法 * &gt; 抽象方法只有方法的声明，没有方法体 * &gt; 包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。 *      &gt; 若子类重写了父类中的所有的抽象方法后，此子类方可实例化 *        若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//一旦Person类抽象了，就不可实例化</span><span class="token comment">//Person p1 = new Person();</span><span class="token comment">//p1.eat();</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Creature</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Creature</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//不是抽象方法：</span><span class="token comment">//public void eat(){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">//抽象方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生多吃有营养的食物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生应该呼吸新鲜的没有雾霾的空气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917192352.png" alt="image-20210917192352399"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917192424.png" alt="image-20210917192424440"></p><h4 id="抽象类的匿名子类">抽象类的匿名子类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 抽象类的匿名子类 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象</span><span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">method1</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非匿名的类非匿名的对象</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非匿名的类匿名的对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了一匿名子类的对象：p</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好呼吸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">method1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建匿名子类的匿名对象</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃好吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好呼吸新鲜空气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="练习-2">练习</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917200803.png" alt="image-20210917200803289"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917201405.png" alt="image-20210917201405828"></p><p>Employee类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token comment">/* * 定义一个Employee类，该类包含：private成员变量name,number,birthday，其中birthday 为MyDate类的对象；abstract方法earnings()；toString()方法输出对象的name,number和birthday。  */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">MyDate</span> <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", number="</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday<span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MyDate类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token comment">/* * MyDate类包含:private成员变量year,month,day ；toDateString()方法返回日期对应的字符串：xxxx年xx月xx日 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDate</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> month<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SalariedEmployee类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token comment">/* * 定义SalariedEmployee类继承Employee类， * 实现按月计算工资的员工处理。该类包括：private成员变量monthlySalary；实现父类的抽象方法earnings(),该方法返回monthlySalary值；toString()方法输出员工类型信息及员工的name，number,birthday。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalariedEmployee</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> monthlySalary<span class="token punctuation">;</span><span class="token comment">//月工资</span><span class="token keyword">public</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">,</span><span class="token keyword">double</span> monthlySalary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthlySalary <span class="token operator">=</span> monthlySalary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getMonthlySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> monthl ySalary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonthlySalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> monthlySalary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthlySalary <span class="token operator">=</span> monthlySalary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> monthlySalary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"SalariedEmployee["</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HourlyEmployee类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token comment">/* * 参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的员工处理。该类包括：private成员变量wage和hour；实现父类的抽象方法earnings(),该方法返回wage*hour值；toString()方法输出员工类型信息及员工的name，number,birthday。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HourlyEmployee</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> wage<span class="token punctuation">;</span><span class="token comment">//每小时的工资</span><span class="token keyword">private</span> <span class="token keyword">int</span> hour<span class="token punctuation">;</span><span class="token comment">//月工作的小时数</span><span class="token keyword">public</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">,</span><span class="token keyword">int</span> wage<span class="token punctuation">,</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> hour<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> wage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWage</span><span class="token punctuation">(</span><span class="token keyword">int</span> wage<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> hour<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHour</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> hour<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> wage <span class="token operator">*</span> hour<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"HourlyEmployee["</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PayrollSystem类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/* * 定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。 * 利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday。 * 当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayrollSystem</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//方式一：</span><span class="token comment">//Scanner scanner = new Scanner(System.in);</span><span class="token comment">//System.out.println("请输入当月的月份：");</span><span class="token comment">//int month = scanner.nextInt();</span><span class="token comment">//方式二：</span><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前的月份</span><span class="token comment">//System.out.println(month);//一月份：0</span><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>emps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token string">"马森"</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">1992</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token string">"潘雨生"</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> emps<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> salary <span class="token operator">=</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月工资为："</span> <span class="token operator">+</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>month<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生日快乐！奖励100元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="模板方法设计模式-TemplateMethod">模板方法设计模式(TemplateMethod)</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917200148.png" alt="image-20210917200148675"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917200729.png" alt="image-20210917200729091"></p><h3 id="接口-interface">接口(interface)</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917204833.png" alt="image-20210917204833148"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917205541.png" alt="image-20210917205541798"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210917205602.png" alt="image-20210917205602451"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 接口的使用 * 1.接口使用interface来定义 * 2.Java中，接口和类是并列的两个结构 * 3.如何定义接口：定义接口中的成员 *  * 3.1 JDK7及以前：只能定义全局常量和抽象方法 * &gt;全局常量：public static final的.但是书写时，可以省略不写 * &gt;抽象方法：public abstract的 *  * 3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略） *  * 4. 接口中不能定义构造器的！意味着接口不可以实例化 *  * 5. Java开发中，接口通过让类去实现(implements)的方式来使用. *    如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化 *    如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类 *     * 6. Java类可以实现多个接口   ---&gt;弥补了Java单继承性的局限性 *   格式：class AA extends BB implements CC,DD,EE *    * 7. 接口与接口之间可以继承，而且可以多继承 *  * ******************************* * 8. 接口的具体使用，体现多态性 * 9. 接口，实际上可以看做是一种规范 *  * 面试题：抽象类与接口有哪些异同？ *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span>MAX_SPEED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span>MIN_SPEED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Flyable.MIN_SPEED = 2;</span><span class="token class-name">Plane</span> plane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plane<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span><span class="token comment">//全局常量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SPEED <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span><span class="token comment">//第一宇宙速度</span><span class="token keyword">int</span> MIN_SPEED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//省略了public static final</span><span class="token comment">//抽象方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略了public abstract</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Interfaces cannot have constructors</span><span class="token comment">//public Flyable(){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Attackable</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Plane</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过引擎起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"驾驶员减速停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Kite</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bullet</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">,</span><span class="token class-name">Attackable</span><span class="token punctuation">,</span>CC<span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//************************************</span><span class="token keyword">interface</span> AA<span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> BB<span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> CC <span class="token keyword">extends</span> AA<span class="token punctuation">,</span>BB<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 接口的使用 * 1.接口使用上也满足多态性 * 2.接口，实际上就是定义了一种规范 * 3.开发中，体会面向接口编程！ *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Computer</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.创建了接口的非匿名实现类的非匿名对象</span><span class="token class-name">Flash</span> flash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 创建了接口的非匿名实现类的匿名对象</span>com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 创建了接口的匿名实现类的非匿名对象</span><span class="token class-name">USB</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4. 创建了接口的匿名实现类的匿名对象</span>com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mp3开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mp3结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//USB usb = new Flash();</span>usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体传输数据的细节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> USB<span class="token punctuation">{</span><span class="token comment">//常量：定义了长、宽、最大最小的传输速度等</span><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Flash</span> <span class="token keyword">implements</span> USB<span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘开启工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> USB<span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印机开启工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印机结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="代理模式">代理模式</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210922151848.png" alt="image-20210922151847775"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 接口的应用：代理模式 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NetWorkTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//server.browse();</span><span class="token class-name">ProxyServer</span> proxyServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>proxyServer<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">NetWork</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//被代理类</span><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真实的服务器访问网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//代理类</span><span class="token keyword">class</span> <span class="token class-name">ProxyServer</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">NetWork</span> work<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">ProxyServer</span><span class="token punctuation">(</span><span class="token class-name">NetWork</span> work<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"联网之前的检查工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>work<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>拓展：<a href="https://gitee.com/beihai-yu/java/blob/master/%E6%8B%93%E5%B1%95%EF%BC%9A%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.pdf">工厂设计模式.pdf</a></p><h4 id="练习-3">练习</h4><p>1</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//编译不通过。因为x是不明确的</span><span class="token comment">// System.out.println(x);</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210922155444.png" alt="image-20210922155444458"></p><p>Circle类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token comment">/* * 定义一个Circle类，声明radius属性，提供getter和setter方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token class-name">Double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token class-name">Double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ComparableCircle类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token comment">/* * 定义一个ComparableCircle类，继承Circle类并且实现CompareObject接口。 * 在ComparableCircle类中给出接口中方法compareTo的实现体，用来比较两个圆的半径大小。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparableCircle</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">CompareObject</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">ComparableCircle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ComparableCircle</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span><span class="token comment">//错误的：</span><span class="token comment">//return (int) (this.getRadius() - c.getRadius());</span><span class="token comment">//正确的方式一：</span><span class="token comment">//if(this.getRadius() &gt; c.getRadius()){</span><span class="token comment">//return 1;</span><span class="token comment">//}else if(this.getRadius() &lt; c.getRadius()){</span><span class="token comment">//return -1;</span><span class="token comment">//}else{</span><span class="token comment">//return 0;</span><span class="token comment">//}</span><span class="token comment">//当属性radius声明为Double类型时，可以调用包装类的方法</span><span class="token comment">//正确的方式二：</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//return 0;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类InterfaceTest</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparableCircleTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ComparableCircle</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">(</span><span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ComparableCircle</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">(</span><span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> compareValue <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>compareValue <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1对象大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>compareValue <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c2对象大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1与c2一样大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> compareValue1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>compareValue1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Java-8中关于接口的改进"><strong>Java 8</strong>中关于接口的改进</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210922173310.png" alt="image-20210922173310484"></p><p>测试类SubClassTest</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java8</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClassTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SubClass</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s.method1();</span><span class="token comment">//SubClass.method1();</span><span class="token comment">//知识点1：接口中定义的静态方法，只能通过接口来调用。</span><span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span><span class="token comment">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span>s<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，</span><span class="token comment">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则</span><span class="token comment">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span><span class="token comment">//那么在实现类没有重写此方法的情况下，报错。--&gt;接口冲突。</span><span class="token comment">//这就需要我们必须在实现类中重写此方法</span>s<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span><span class="token punctuation">,</span><span class="token class-name">CompareB</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass：深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自己定义的重写的方法</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是父类中声明的</span><span class="token comment">//调用接口中的默认方法</span><span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CompareB</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SuperClass类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java8</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>CompareA类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java8</span><span class="token punctuation">;</span><span class="token comment">/* *  * JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法 *  */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">{</span><span class="token comment">//静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//默认方法</span><span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>CompareB类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java8</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareB</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareB：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类的成员之五：内部类">类的成员之五：内部类</h3><p>基础</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * 类的内部成员之五：内部类 * 1. Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类 *  * 2.内部类的分类：成员内部类（静态、非静态）  vs 局部内部类(方法内、代码块内、构造器内) *  * 3.成员内部类： * 一方面，作为外部类的成员： * &gt;调用外部类的结构 * &gt;可以被static修饰 * &gt;可以被4种不同的权限修饰 *  * 另一方面，作为一个类： * &gt; 类内可以定义属性、方法、构造器等 * &gt; 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承 * &gt; 可以被abstract修饰 *  *  * 4.关注如下的3个问题 *   4.1 如何实例化成员内部类的对象 *   4.2 如何在成员内部类中区分调用外部类的结构 *   4.3 开发中局部内部类的使用  见《InnerClassTest1.java》 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建Dog实例(静态的成员内部类):</span><span class="token class-name">Person<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建Bird实例(非静态的成员内部类):</span><span class="token comment">//Person.Bird bird = new Person.Bird();//错误的</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bird<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string">"黄鹂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//静态成员内部类</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡拉是条狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eat();</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//非静态成员内部类</span><span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"杜鹃"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只小小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用外部类的非静态属性</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法的形参</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类的属性</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部类的属性</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//局部内部类</span><span class="token keyword">class</span> AA<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token comment">//局部内部类</span><span class="token keyword">class</span> BB<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//局部内部类</span><span class="token keyword">class</span> CC<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开发中使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest1</span> <span class="token punctuation">{</span><span class="token comment">//开发中很少见</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//局部内部类</span><span class="token keyword">class</span> AA<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//返回一个实现了Comparable接口的类的对象</span><span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建一个实现了Comparable接口的类:局部内部类</span><span class="token comment">//方式一：</span><span class="token comment">//class MyComparable implements Comparable{</span><span class="token comment">//</span><span class="token comment">//@Override</span><span class="token comment">//public int compareTo(Object o) {</span><span class="token comment">//return 0;</span><span class="token comment">//}</span><span class="token comment">//}</span><span class="token comment">//</span><span class="token comment">//return new MyComparable();</span><span class="token comment">//方式二：</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>总结</p><ol><li>abstract 能修饰哪些结构？ 修饰以后，有什么特点？</li></ol><p>类、方法。</p><p>​类不能实例化，提供子类</p><p>​抽象方法，只定义了一种功能的标准。具体的执行，需要子类去实现。</p><ol start="2"><li><p>接口是否能继承接口? 抽象类是否能实现(implements)接口? 抽象类是否能继承非抽象的类?</p><p>能，能，能</p></li><li><p>声明抽象类，并包含抽象方法。测试类中创建一个继承抽象类的匿名子类的对象</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> AA<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">AA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>抽象类和接口有哪些共同点和区别？</li></ol><p>相同点：不能实例化，都可以被继承</p><p>不同点：抽象类：有构造器。 接口：不能声明构造器</p><p>多继承vs 单继承</p><ol start="5"><li>如何创建静态成员内部类和非静态成员内部类的对象？</li></ol><p>Person static Dog  Bird</p><p>Person.Dog dog = new Person.Dog();</p><p>Person p = new Person();</p><p>Person.Bird bird = p.new Bird();</p><p>abstract: 抽象的<br>1.可以用来修饰：类、方法<br>2.具体的：<br>abstract修饰类：抽象类</p><ul><li><blockquote><p>此类不能实例化</p></blockquote></li><li><blockquote><p>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</p></blockquote></li><li><blockquote><p>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</p></blockquote></li></ul><p>abstract修饰方法：抽象方法</p><ul><li><blockquote><p>抽象方法只方法的声明，没方法体</p></blockquote></li><li><blockquote><p>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</p></blockquote></li><li><blockquote><p>若子类重写了父类中的所的抽象方法后，此子类方可实例化</p></blockquote></li><li><p>若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰<br>3.注意点：</p></li><li><p>1.abstract不能用来修饰：属性、构造器等结构</p></li><li><p>2.abstract不能用来修饰私方法、静态方法、final的方法、final的类</p></li></ul><p>4.abstract的应用举例：<br>举例一：</p><p>举例二：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>举例三：IO流中设计到的抽象类：InputStream/OutputStream / Reader /Writer。在其内部<br>定义了抽象的read()、write()方法。</p><p>interface:接口<br>1.使用说明：<br>1.接口使用interface来定义</p><ul><li><p>2.Java中，接口和类是并列的两个结构</p></li><li><p>3.如何定义接口：定义接口中的成员</p></li><li></li><li><p>3.1 JDK7及以前：只能定义全局常量和抽象方法</p></li><li><blockquote><p>全局常量：public static final的.但是书写时，可以省略不写</p></blockquote></li><li><blockquote><p>抽象方法：public abstract的</p></blockquote></li><li></li><li><p>3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略</p></li><li></li><li><ol start="4"><li>接口中不能定义构造器的！意味着接口不可以实例化</li></ol></li><li></li><li><ol start="5"><li>Java开发中，接口通过让类去实现(implements)的方式来使用.</li></ol></li><li><p>如果实现类覆盖了接口中的所抽象方法，则此实现类就可以实例化</p></li><li><p>如果实现类没覆盖接口中所的抽象方法，则此实现类仍为一个抽象类</p></li><li></li><li><ol start="6"><li>Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</li></ol></li><li><p>格式：class AA extends BB implements CC,DD,EE</p></li><li></li><li><ol start="7"><li>接口与接口之间可以继承，而且可以多继承</li></ol></li></ul><hr><ul><li><ol start="8"><li>接口的具体使用，体现多态性</li></ol></li><li><ol start="9"><li>接口，实际上可以看做是一种规范</li></ol></li></ul><p>2.举例：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210922194103.png" alt="image-20210922194103647"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//USB usb = new Flash();</span>usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体传输数据的细节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> USB<span class="token punctuation">{</span><span class="token comment">//常量：定义了长、宽、最大最小的传输速度等</span><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Flash</span> <span class="token keyword">implements</span> USB<span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘开启工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> USB<span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印机开启工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印机结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>体会：</p><ul><li>1.接口使用上也满足多态性</li><li>2.接口，实际上就是定义了一种规范</li><li>3.开发中，体会面向接口编程！<br>3.体会面向接口编程的思想</li></ul><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210925201430.png" alt="image-20210922194138840"></p><p>面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个<br>数据库厂商的API。<br>4.Java8中关于接口的新规范</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//知识点1：接口中定义的静态方法，只能通过接口来调用。</span><span class="token comment">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span><span class="token comment">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span><span class="token comment">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则</span><span class="token comment">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span><span class="token comment">//那么在实现类没重写此方法的情况下，报错。--&gt;接口冲突。</span><span class="token comment">//这就需要我们必须在实现类中重写此方法</span><span class="token comment">//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自己定义的重写的方法</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是父类中声明的</span><span class="token comment">//调用接口中的默认方法</span><span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CompareB</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>5.面试题：<br>抽象类和接口的异同？<br>相同点：不能实例化；都可以包含抽象方法的。<br>不同点：<br>1）把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明<br>2）类：单继承性    接口：多继承<br>类与接口：多实现</p><p>内部类：类的第五个成员<br>1.定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.<br>2.内部类的分类：<br>成员内部类（静态、非静态 ） vs 局部内部类(方法内、代码块内、构造器内)<br>3.成员内部类的理解：<br>一方面，作为外部类的成员：</p><ul><li><blockquote><p>调用外部类的结构</p></blockquote></li><li><blockquote><p>可以被static修饰</p></blockquote></li><li><blockquote><p>可以被4种不同的权限修饰</p></blockquote></li><li><p>另一方面，作为一个类：</p></li><li><blockquote><p>类内可以定义属性、方法、构造器等</p></blockquote></li><li><blockquote><p>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</p></blockquote></li><li><blockquote><p>可以被abstract修饰<br>4.成员内部类：<br>4.1如何创建成员内部类的对象？(静态的，非静态的)</p><pre class="language-none"><code class="language-none"> * &gt; //创建静态的Dog内部类的实例(静态的成员内部类):   &gt; Person.Dog dog = new Person.Dog();//创建非静态的Bird内部类的实例(非静态的成员内部类)://Person.Bird bird = new Person.Bird();//错误的Person p = new Person();Person.Bird bird = p.new Bird();</code></pre></blockquote></li></ul><p>4.2如何在成员内部类中调用外部类的结构？</p><pre class="language-none"><code class="language-none">class Person{String name = "小明";public void eat(){}//非静态成员内部类class Bird{String name = "杜鹃";public void display(String name){System.out.println(name);//方法的形参System.out.println(this.name);//内部类的属性System.out.println(Person.this.name);//外部类的属性//Person.this.eat();}}}</code></pre><p>5.局部内部类的使用：</p><pre class="language-none"><code class="language-none">//返回一个实现了Comparable接口的类的对象public Comparable getComparable(){​//创建一个实现了Comparable接口的类:局部内部类​//方式一：//class MyComparable implements Comparable{////@Override//public int compareTo(Object o) {//return 0;//}////}////return new MyComparable();​//方式二：​return new Comparable(){​@Override​public int compareTo(Object o) {​return 0;​}​​};​}</code></pre><p>注意点：<br>在局部内部类的方法中（比如：show如果调用局部内部类所声明的方法(比如：method)中的局部变量(比如：num)的话,要求此局部变量声明为final的。<br>* jdk 7及之前版本：要求此局部变量显式的声明为final的<br>jdk 8及之后的版本：可以省略final的声明<br>总结：<br>成员内部类和局部内部类，在编译以后，都会生成字节码文件。<br>格式：成员内部类：外部类<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>内部类名</mtext><mi mathvariant="normal">.</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mtext>局部内部类：外部类</mtext></mrow><annotation encoding="application/x-tex">内部类名.class 局部内部类：外部类</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">内部类名</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">ss</span><span class="mord cjk_fallback">局部内部类：外部类</span></span></span></span>数字 内部类名.class</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(4)---面向对象(上篇)</title>
      <link href="/2021/09/25/java-ji-chu-4-mian-xiang-dui-xiang-shang-pian/"/>
      <url>/2021/09/25/java-ji-chu-4-mian-xiang-dui-xiang-shang-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="面向对象-上篇">面向对象(上篇)</h2><blockquote><p><strong>面向对象学习的三条主线：</strong></p><ul><li>1.Java类及类的成员：属性、方法、构造器；代码块、内部类</li><li>2.面向对象的大特征：封装性、继承性、多态性、(抽象性)</li><li>3.其它关键字：this、super、static、final、abstract、interface、package、import等</li><li>“大处着眼，小处着手”</li></ul></blockquote><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911110110.png" alt="image-20210911110110302"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911110143.png" alt="image-20210911110143821"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911110302.png" alt="image-20210911110302124"></p><h3 id="面向过程与面向对象">面向过程与面向对象</h3><p><strong>面向过程</strong>**(POP)** <strong>与 面向对象</strong>**(OOP)**</p><p>二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p><p>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</p><p>举例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* 二、“人把大象装进冰箱”* * 1.面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。* * ① 把冰箱门打开* ② 抬起大象，塞进冰箱* ② 把冰箱门关闭* * 2.面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。* * 人{* 打开(冰箱){* 冰箱.开开();* }* 抬起(大象){* 大象.进入(冰箱);* }* 关闭(冰箱){* 冰箱.闭合();* }* }* * 冰箱{* 开开(){}* 闭合(){}* }* * 大象{* 进入(冰箱){* }* }*/</span></code></pre><p><strong>面向对象的三大特征</strong></p><p>封装 (Encapsulation)</p><p>继承 (Inheritance)</p><p>多态 (Polymorphism)</p><p>面向对象：Object Oriented Programming面向过程：Procedure Oriented Programming</p><p><strong>面向对象的思想概述</strong></p><p>程序员从面向过程的执行者转化成了面向对象的指挥者</p><p>面向对象分析方法分析问题的思路和步骤：</p><p>​根据问题需要，选择问题所针对的<em>现实世界中的实体</em>。</p><p>​从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了<em>概念世界中的类</em>。</p><p>​把抽象的实体用计算机语言进行描述，形成<em>计算机世界中类的定义</em>。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</p><p>​将<em>类实例化成计算机世界中的对象</em>。对象是计算机世界中解决问题的最终工具。</p><h3 id="Java语言的基本元素：类和对象">Java语言的基本元素：类和对象</h3><blockquote><p>面向对象的两个要素：</p><ul><li><p>类：对一类事物的描述，是抽象的、概念上的定义</p></li><li><p>对象：是实际存在的该类事物的每个个体，因而也称为实例(instance)</p></li><li><blockquote><p>面向对象程序设计的重点是类的设计</p></blockquote></li><li><blockquote><p>设计类，就是设计类的成员。</p></blockquote></li></ul></blockquote><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911141632.png" alt="image-20210911141631871"></p><h3 id="对象的创建和使用">对象的创建和使用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 一、设计类，其实就是设计类的成员 *  *  属性 = 成员变量 = field = 域、字段 *  方法 = 成员方法 = 函数 = method *  *  创建类的对象 = 类的实例化 = 实例化类 *  * 二、类和对象的使用（面向对象思想落地的实现）： *  1.创建类，设计类的成员 *  2.创建类的对象 *  3.通过“对象.属性”或“对象.方法”调用对象的结构 *   * 三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static的） *   意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。 *    * 四、对象的内存解析 */</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//2. 创建Person类的对象</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Scanner scanner = new Scanner(System.in);</span><span class="token comment">//调用对象的结构：属性、方法</span>        <span class="token comment">//调用属性：“对象.属性”</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法：“对象.方法”</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*******************************</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*******************************</span><span class="token comment">//将p1变量保存的对象地址值赋给p3,导致p1和p3指向了堆空间中的同一个对象实体。</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tom</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//1.创建类，设计类的成员</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span>    <span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话,使用的是："</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911144324.png" alt="image-20210911144324716"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911143848.png" alt="image-20210911143848699"></p><h3 id="类的成员之一：属性">类的成员之一：属性</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911150856.png" alt="image-20210911150856300"></p><h4 id="成员变量VS局部变量">成员变量VS局部变量</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911151021.png" alt="image-20210911151021135"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911151430.png" alt="image-20210911151429878"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/*类中属性的使用 * 属性（成员变量）   vs  局部变量 * 1.相同点： * 1.1  定义变量的格式：数据类型  变量名 = 变量值 * 1.2 先声明，后使用 * 1.3 变量都有其对应的作用域  *  * 2.不同点： * 2.1 在类中声明的位置的不同 * 属性：直接定义在类的一对{}内 * 局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量 *  * 2.2 关于权限修饰符的不同 * 属性：可以在声明属性时，指明其权限，使用权限修饰符。 * 常用的权限修饰符：private、public、缺省、protected  ---&gt;封装性 * 目前，大家声明属性时，都使用缺省就可以了。 * 局部变量：不可以使用权限修饰符。 *  * 2.3 默认初始化值的情况： * 属性：类的属性，根据其类型，都有默认初始化值。 * 整型（byte、short、int、long）：0 * 浮点型（float、double）：0.0 * 字符型（char）：0  （或'\u0000'） * 布尔型（boolean）：false *  * 引用数据类型（类、数组、接口）：null *  * 局部变量：没有默认初始化值。 *  意味着，我们在调用局部变量之前，一定要显式赋值。 * 特别地：形参在调用时，我们赋值即可。 *  * 2.4 在内存中加载的位置： * 属性：加载到堆空间中   （非static） * 局部变量：加载到栈空间 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"韩语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token comment">//属性（或成员变量）</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//language:形参，也是局部变量</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们使用"</span> <span class="token operator">+</span> language <span class="token operator">+</span> <span class="token string">"进行交流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> food <span class="token operator">=</span> <span class="token string">"烙饼"</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北方人喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类的成员之二：方法">类的成员之二：方法</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911151511.png" alt="image-20210911151510965"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 类中方法的声明和使用 *  * 方法：描述类应该具有的功能。 * 比如：Math类：sqrt()\random() \... *     Scanner类：nextXxx() ... *     Arrays类：sort() \ binarySearch() \ toString() \ equals() \ ... *  * 1.举例： * public void eat(){} * public void sleep(int hour){} * public String getName(){} * public String getNation(String nation){} *  * 2. 方法的声明：权限修饰符  返回值类型  方法名(形参列表){ * 方法体 *   } *   注意：static、final、abstract 来修饰的方法，后面再讲。 *    * 3. 说明： * 3.1 关于权限修饰符：默认方法的权限修饰符先都使用public * Java规定的4种权限修饰符：private、public、缺省、protected  --&gt;封装性再细说 *  * 3.2 返回值类型： 有返回值  vs 没有返回值 * 3.2.1  如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 *                return关键字来返回指定类型的变量或常量：“return 数据”。 *   如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要 *               使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。 *  * 3.2.2 我们定义方法该不该有返回值？ * ① 题目要求 * ② 凭经验：具体问题具体分析 *  *      3.3 方法名：属于标识符，遵循标识符的规则和规范，“见名知意” *       *      3.4 形参列表： 方法可以声明0个，1个，或多个形参。 *         3.4.1 格式：数据类型1 形参1,数据类型2 形参2,... *          *         3.4.2 我们定义方法时，该不该定义形参？ *         ① 题目要求 *         ② 凭经验：具体问题具体分析 *       *      3.5 方法体：方法功能的体现。  *  *  4.return关键字的使用： *  1.使用范围：使用在方法体中 *  2.作用：① 结束方法 *            ② 针对于有返回值类型的方法，使用"return 数据"方法返回所要的数据。 *      3.注意点：return关键字后面不可以声明执行语句。 *       *  5. 方法的使用中，可以调用当前类的属性或方法 *  特殊的：方法A中又调用了方法A:递归方法。 *     方法中，不可以定义方法。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Customer</span> cust1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cust1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试形参是否需要设置的问题</span><span class="token comment">//int[] arr = new int[]{3,4,5,2,5};</span><span class="token comment">//cust1.sort();</span>cust1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//客户类</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// return后不可以声明表达式</span><span class="token comment">// System.out.println("hello");</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"休息了"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"个小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sleep(10);</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNation</span><span class="token punctuation">(</span><span class="token class-name">String</span> nation<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"我的国籍是："</span> <span class="token operator">+</span> nation<span class="token punctuation">;</span><span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//体会形参是否需要设置的问题</span>    <span class="token comment">//public void sort(int[] arr){</span>    <span class="token comment">//</span>    <span class="token comment">//}</span>    <span class="token comment">//public void sort(){</span>    <span class="token comment">//int[] arr = new int[]{3,4,5,2,5,63,2,5};</span>    <span class="token comment">////。。。。</span>    <span class="token comment">//}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//错误的</span>    <span class="token comment">//public void swim(){</span>    <span class="token comment">//</span>    <span class="token comment">//}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>练习1：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/*  * 4. 对象数组题目：定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。问题一：打印出3年级(state值为3）的学生信息。问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息提示：1) 生成随机数：Math.random()，返回值类型double;  2) 四舍五入取整：Math.round(double d)，返回值类型long。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//Student s1 = new Student();</span><span class="token comment">//Student s1 = new Student();</span><span class="token comment">//Student s1 = new Student();</span><span class="token comment">//Student s1 = new Student();</span><span class="token comment">//Student s1 = new Student();</span><span class="token comment">//Student s1 = new Student();</span><span class="token comment">//声明Student类型的数组</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//String[] arr = new String[10];</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//给数组元素赋值</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给Student对象的属性赋值</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//年级：[1,6]</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成绩：[0,100]</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//遍历学生数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//System.out.println(stus[i].number + "," + stus[i].state </span><span class="token comment">//+ "," + stus[i].score);</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问题一：打印出3年级(state值为3）的学生信息。</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&gt;</span> stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果需要换序，交换的是数组的元素：Student对象！！！</span><span class="token class-name">Student</span> temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//遍历学生数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment">//年级</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token comment">//成绩</span><span class="token comment">//显示学生信息的方法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"学号："</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">",年级："</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">",成绩："</span> <span class="token operator">+</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911173404.png" alt="image-20210911173404599"></p><p>练习优化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 4. 对象数组题目：定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。问题一：打印出3年级(state值为3）的学生信息。问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息提示：1) 生成随机数：Math.random()，返回值类型double;  2) 四舍五入取整：Math.round(double d)，返回值类型long。 *  *  * 此代码是对StudentTest.java的改进：将操作数组的功能封装到方法中。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//声明Student类型的数组</span><span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//给数组元素赋值</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给Student对象的属性赋值</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//年级：[1,6]</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成绩：[0,100]</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">StudentTest1</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历学生数组</span>test<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问题一：打印出3年级(state值为3）的学生信息。</span>test<span class="token punctuation">.</span><span class="token function">searchState</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span>test<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历学生数组</span>test<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** *  * @Description  遍历Student1[]数组的操作 * @author shkstart * @date 2019年1月15日下午5:10:19 * @param stus */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** *  * @Description 查找Stduent数组中指定年级的学生信息 * @author shkstart * @date 2019年1月15日下午5:08:08 * @param stus 要查找的数组 * @param state 要找的年级 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchState</span><span class="token punctuation">(</span><span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">,</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** *  * @Description 给Student1数组排序 * @author shkstart * @date 2019年1月15日下午5:09:46 * @param stus */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Student1</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&gt;</span> stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果需要换序，交换的是数组的元素：Student对象！！！</span><span class="token class-name">Student1</span> temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student1</span><span class="token punctuation">{</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment">//年级</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token comment">//成绩</span><span class="token comment">//显示学生信息的方法</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"学号："</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">",年级："</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">",成绩："</span> <span class="token operator">+</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>练习2：</strong></p><p>面向对象思想的体现一：类和对象的创建和执行操作有哪三步？</p><p>① 创建类② 类的实例化③ 调用对象的结构：”对象.属性” “对象.方法”。</p><p>类的方法内是否可以定义变量？是否可以调用属性？是否可以定义方法？是否可以调用方法？</p><p>是；是；否；是</p><h3 id="再谈方法">再谈方法</h3><h4 id="方法的重载">方法的重载</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 方法的重载（overload）  loading... *  * 1.定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。 *  *  "两同一不同":同一个类、相同方法名 *            参数列表不同：参数个数不同，参数类型不同 *  * 2. 举例： *    Arrays类中重载的sort() / binarySearch() *  * 3.判断是否是重载： *    跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！ *     * 4. 在通过对象调用方法时，如何确定某一个指定的方法： *      方法名 ---&gt; 参数列表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OverLoadTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverLoadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如下的4个方法构成了重载</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如下的3个方法不能与上述4个方法构成重载</span><span class="token comment">//public int getSum(int i,int j){</span><span class="token comment">//return 0;</span><span class="token comment">//}</span><span class="token comment">//public void getSum(int m,int n){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">//private void getSum(int i,int j){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token punctuation">}</span></code></pre><h4 id="可变形参的方法">可变形参的方法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 可变个数形参的方法 * 1.jdk 5.0新增的内容 * 2.具体使用： *   2.1 可变个数形参的格式：数据类型 ... 变量名 *   2.2 当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。 *   2.3 可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载 *   2.4 可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。 *   2.5 可变个数形参在方法的形参中，必须声明在末尾 *  2.6  可变个数形参在方法的形参中,最多只能声明一个可变形参。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodArgsTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">MethodArgsTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodArgsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test.show("hello");</span><span class="token comment">//test.show("hello","world");</span><span class="token comment">//test.show();</span>test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show(String)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show(String ... strs)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//2.4不能与上一个方法同时存在</span><span class="token comment">//public void show(String[] strs){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">// 2.5</span><span class="token comment">//The variable argument type String of the method </span><span class="token comment">//show must be the last parameter</span><span class="token comment">//public void show(String ...strs,int i){</span><span class="token comment">//}</span><span class="token punctuation">}</span></code></pre><h4 id="方法参数的值传递机制"><em>方法参数的值传递机制</em></h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/*关于变量的赋值： *  如果变量是基本数据类型，此时赋值的是变量所保存的数据值。 *  如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********基本数据类型：****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********引用数据类型：****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>orderId <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token class-name">Order</span> o2 <span class="token operator">=</span> o1<span class="token punctuation">;</span><span class="token comment">//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1.orderId = "</span> <span class="token operator">+</span> o1<span class="token punctuation">.</span>orderId <span class="token operator">+</span> <span class="token string">",o2.orderId = "</span> <span class="token operator">+</span>o2<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>o2<span class="token punctuation">.</span>orderId <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1.orderId = "</span> <span class="token operator">+</span> o1<span class="token punctuation">.</span>orderId <span class="token operator">+</span> <span class="token string">",o2.orderId = "</span> <span class="token operator">+</span>o2<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token keyword">int</span> orderId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不能交换的情况：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 方法的形参的传递机制：值传递 *  * 1.形参：方法定义时，声明的小括号内的参数 *   实参：方法调用时，实际传递给形参的数据 *  * 2.值传递机制： * 如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。 * 如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换两个变量的值的操作</span><span class="token comment">//int temp = m ;</span><span class="token comment">//m = n;   </span><span class="token comment">//n = temp;</span><span class="token class-name">ValueTransferTest1</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> m <span class="token punctuation">;</span>m <span class="token operator">=</span> n<span class="token punctuation">;</span>n <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911192957.png" alt="image-20210911192957256"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Data</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换m和n的值</span><span class="token comment">//int temp = data.m;</span><span class="token comment">//data.m = data.n;</span><span class="token comment">//data.n = temp;</span><span class="token class-name">ValueTransferTest2</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> data<span class="token punctuation">.</span>m<span class="token punctuation">;</span>data<span class="token punctuation">.</span>m <span class="token operator">=</span> data<span class="token punctuation">.</span>n<span class="token punctuation">;</span>data<span class="token punctuation">.</span>n <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911195321.png" alt="image-20210911195321183"></p><p>练习：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransferTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TransferTest3</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransferTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">Value</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token function">second</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 15 0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 20</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token class-name">Value</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token class-name">Value</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911204148.png" alt="image-20210911204147869"></p><p>练习：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址值</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//['a','b','c']</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911215158.png" alt="image-20210911215158463"></p><p>练习：</p><h4 id="递归方法">递归方法</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * 递归方法的使用（了解） * 1.递归方法：一个方法体内调用它自身。 * 2. 方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。 * 递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 例1：计算1-100之间所有自然数的和</span><span class="token comment">// 方式一：</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二：</span><span class="token class-name">RecursionTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecursionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum1 <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> value <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 例1：计算1-n之间所有自然数的和</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 3</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 例2：计算1-n之间所有自然数的乘积:n!</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">getSum1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//例3：已知有一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),</span><span class="token comment">//其中n是大于0的整数，求f(10)的值。</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//return f(n + 2) - 2 * f(n + 1);</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//例4：斐波那契数列</span><span class="token comment">//例5：汉诺塔问题</span><span class="token comment">//例6：快排</span><span class="token punctuation">}</span></code></pre><p><strong>复习：</strong></p><blockquote><p>\1. 什么是方法的重载？</p><p>“两同一不同”：同一个类、相同方法名；参数列表不同。如何调用确定的方法：方法–&gt;参数列表</p><p>\2. 说明Java方法中的参数传递机制的具体体现？</p><p>基本数据类型：数据值</p><p>引用数据类型：地址值 (含变量的数据类型)</p><p>Person p1 =  new Person();  eat();age</p><p>User u1 = p1;//编译错误  (逆向思维、反证法)</p><p>u1.eat()  u1.age</p><p>\3. 成员变量和局部变量在声明的位置上、是否有默认初始化值上、是否能有权限修饰符修饰上、内存分配的位置上有何不同？</p><p>\4. 谈谈return关键字的使用</p><p>① 结束方法 ② 针对于有返回值的方法，return + 返回数据</p><p>\5. 提供如下代码的内存解析</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911221154.jpg" alt="img"></p><p>\1. 内存结构：栈（局部变量）、堆(new出来的结构:对象(非static成员变量)、数组)</p><p>\2. 变量：成员变量 vs 局部变量（方法内、方法形参、构造器内、构造器形参、代码块内）</p></blockquote><h3 id="OOP特征一：封装与隐藏">OOP特征一：封装与隐藏</h3><h4 id="封装性what-why">封装性what why</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210912164911.png" alt="image-20210912164911259"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 面向对象的特征一：封装与隐藏     3W:what? why? how? * 一、问题的引入： *  当我们创建一个类的对象以后，我们可以通过"对象.属性"的方式，对对象的属性进行赋值。这里，赋值操作要受到 *  属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们往往需要给属性赋值 *  加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。（比如：setLegs()） *  同时，我们需要避免用户再使用"对象.属性"的方式对属性进行赋值。则需要将属性声明为私有的(private). *  --&gt;此时，针对于属性就体现了封装性。 *  * 二、封装性的体现： * 我们将类的属性xxx私有化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值 *  *  拓展：封装性的体现：① 如上  ② 不对外暴露的私有的方法  ③ 单例模式（将构造器私有化）...如果不希望类在包外被调用，可以将类设置为缺省的 *   * 三、封装性的体现，需要权限修饰符来配合。 * 1.Java规定的4种权限（从小到大排列）：private、缺省、protected 、public  * 2.4种权限可以用来修饰类及类的内部结构：属性、方法、构造器、内部类 * 3.具体的，4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类 *        修饰类的话，只能使用：缺省、public *  * 总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"大黄"</span><span class="token punctuation">;</span><span class="token comment">//a.age = 1;</span><span class="token comment">//a.legs = 4;//The field Animal.legs is not visible</span>a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a.legs = -4;</span><span class="token comment">//a.setLegs(6);</span>a<span class="token punctuation">.</span><span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a.legs = -4;//The field Animal.legs is not visible</span>a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span><span class="token comment">//腿的个数</span><span class="token comment">//对属性的设置</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>legs <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>legs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//抛出一个异常（暂时没有讲）</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//对属性的获取</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> legs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物进食"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age = "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">",legs = "</span> <span class="token operator">+</span> legs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//提供关于属性age的get和set方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//private class Dog{</span><span class="token comment">//</span><span class="token comment">//}</span></code></pre><h4 id="四种权限修饰符">四种权限修饰符</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210912171133.png" alt="image-20210912171133677"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913195705.png" alt="image-20210913195704977"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913204048.png" alt="image-20210913204047940"></p><p>Person类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 1.创建程序,在其中定义两个类：Person和PersonTest类。定义如下： * 用setAge()设置人的合法年龄(0~130)，用getAge()返回人的年龄。 *  * 2.练习2： * 2.1. 在前面定义的Person类中添加构造器，利用构造器设置所有人的age属性初始值都为18。 * 2.2. 修改上题中类和构造器，增加name属性,使得每次创建Person对象的同时初始化对象的age属性值和name属性值。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">&gt;</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//throw new RuntimeException("传入的数据非法！");</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传入的数据非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//绝对不要这样写！！</span><span class="token comment">//public int doAge(int a){</span><span class="token comment">//age = a;</span><span class="token comment">//return age;</span><span class="token comment">//}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PersonTest类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 在PersonTest类中实例化Person类的对象b， * 调用setAge()和getAge()方法，体会Java的封装性。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p1.age = 1;编译不通过</span>p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄为："</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p1.doAge(122);</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",age = "</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类的成员之三：构造器">类的成员之三：构造器</h3><h4 id="作用">作用</h4><p>1.创建对象 2.初始化对象的信息</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 类的结构之三：构造器（或构造方法、constructor）的使用 * construct：建设、建造。  construction:CCB    constructor:建设者 *  * 一、构造器的作用： * 1.创建对象 * 2.初始化对象的信息 *  * 二、说明： * 1.如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器 * 2.定义构造器的格式：权限修饰符  类名(形参列表){} * 3.一个类中定义的多个构造器，彼此构成重载 * 4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器 * 5.一个类中，至少会有一个构造器。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建类的对象:new + 构造器</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913204302.png" alt="image-20210913204302786"></p><p>TriAngle类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer1</span><span class="token punctuation">;</span><span class="token comment">/* * 编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。 * 此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TriAngle</span> <span class="token punctuation">{</span> <span class="token comment">//angle:角    angel:天使</span><span class="token keyword">private</span> <span class="token keyword">double</span> base<span class="token punctuation">;</span><span class="token comment">//底边长</span><span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token comment">//高</span><span class="token keyword">public</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token keyword">double</span> b<span class="token punctuation">,</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>base <span class="token operator">=</span> b<span class="token punctuation">;</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBase</span><span class="token punctuation">(</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>base <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> base<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>TriAngleTest类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TriAngleTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">TriAngle</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">setBase</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//t1.base = 2.5;//The field TriAngle.base is not visible</span><span class="token comment">//t1.height = 4.3;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base : "</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",height : "</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TriAngle</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">,</span><span class="token number">5.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base : "</span> <span class="token operator">+</span> t2<span class="token punctuation">.</span><span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",height : "</span> <span class="token operator">+</span> t2<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="属性赋值的先后">属性赋值的先后</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913205355.png" alt="image-20210913205355602"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/* * 总结：属性赋值的先后顺序 * ① 默认初始化 * ② 显式初始化 * ③ 构造器中初始化 * ④ 通过"对象.方法" 或 "对象.属性"的方式，赋值 * 以上操作的先后顺序：① - ② - ③ - ④   */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="拓展：javaBean">拓展：javaBean</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913205411.png" alt="image-20210913205411315"></p><h4 id="拓展：UML图">拓展：UML图</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913205941.png" alt="image-20210913205941011"></p><h3 id="关键字：this">关键字：this</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913210749.png" alt="image-20210913210749797"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * this关键字的使用： * 1.this可以用来修饰、调用：属性、方法、构造器 *  * 2.this修饰属性和方法： *   this理解为：当前对象  或 当前正在创建的对象 *  *  2.1  在类的方法中，我们可以使用"this.属性"或"this.方法"的方式，调用当前对象属性或方法。但是， *   通常情况下，我们都选择省略"this."。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式 *   的使用"this.变量"的方式，表明此变量是属性，而非形参。 *  *  2.2 在类的构造器中，我们可以使用"this.属性"或"this.方法"的方式，调用当前正在创建的对象属性或方法。 *  但是，通常情况下，我们都选择省略"this."。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式 *   的使用"this.变量"的方式，表明此变量是属性，而非形参。 *  * 3. this调用构造器 *   ① 我们在类的构造器中，可以显式的使用"this(形参列表)"方式，调用本类中指定的其他构造器 *    ② 构造器中不能通过"this(形参列表)"方式调用自己 *    ③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了"this(形参列表)" *    ④ 规定："this(形参列表)"必须声明在当前构造器的首行 *    ⑤ 构造器内部，最多只能声明一个"this(形参列表)"，用来调用其他的构造器 *  *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//this.eat();</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"Person初始化时，需要考虑如下的1,2,3,4...(共40行代码)"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//this.age = age;</span><span class="token comment">//Person初始化时，需要考虑如下的1,2,3,4...(共40行代码)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913212330.png" alt="image-20210913212330379"></p><p>Boys类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marry</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想娶"</span> <span class="token operator">+</span> girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你可以去合法登记结婚了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先多谈谈恋爱~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Girls类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marry</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> boy<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想嫁给"</span> <span class="token operator">+</span> boy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>boy<span class="token punctuation">.</span><span class="token function">marry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** *  * @Description 比较两个对象的大小 * @author shkstart * @date 2019年1月18日下午4:02:09 * @param girl * @return  正数：当前对象大；  负数：当前对象小  ； 0：当前对象与形参对象相等 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//if(this.age &gt; girl.age){</span><span class="token comment">//return 1;</span><span class="token comment">//}else if(this.age &lt; girl.age){</span><span class="token comment">//return -1;</span><span class="token comment">//}else{</span><span class="token comment">//return 0;</span><span class="token comment">//}</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> girl<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BoyGirlTest</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyGirlTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">"罗密欧"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>boy<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"朱丽叶"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>girl<span class="token punctuation">.</span><span class="token function">marry</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Girl</span> girl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"祝英台"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> compare <span class="token operator">=</span> girl<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>girl1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一样大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913214246.png" alt="image-20210913214246050"></p><h4 id="实验1：模拟银行账号">实验1：模拟银行账号</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913232516.png" alt="image-20210913232516246"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913232557.png" alt="image-20210913232557097"></p><p>Account类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//账号</span><span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token comment">//余额</span><span class="token keyword">private</span> <span class="token keyword">double</span> annualInterestRate<span class="token punctuation">;</span><span class="token comment">//年利率</span><span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">,</span> <span class="token keyword">double</span> annualInterestRate <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAnnualInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> annualInterestRate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAnnualInterestRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> annualInterestRate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。</span><span class="token keyword">public</span> <span class="token keyword">void</span> withdraw <span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//取钱</span><span class="token keyword">if</span><span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足，取款失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功取出："</span> <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> deposit <span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存钱</span><span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功存入："</span> <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Customer类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span><span class="token class-name">String</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>CustomerTest</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3</span><span class="token punctuation">;</span><span class="token comment">/* * 写一个测试程序。（1）创建一个Customer ，名字叫 Jane Smith, 他有一个账号为1000，余额为2000元，年利率为 1.23％ 的账户。（2）对Jane Smith操作。存入 100 元，再取出960元。再取出2000元。打印出Jane Smith 的基本信息成功存入 ：100.0成功取出：960.0余额不足，取款失败Customer [Smith, Jane] has a account: id is 1000, annualInterestRate is 1.23％, balance is 1140.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Customer</span> cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span> acct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0.0123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cust<span class="token punctuation">.</span><span class="token function">setAccount</span><span class="token punctuation">(</span>acct<span class="token punctuation">)</span><span class="token punctuation">;</span>cust<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cust<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cust<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Customer["</span> <span class="token operator">+</span> cust<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> cust<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] has a account: id is "</span> <span class="token operator">+</span> cust<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",annualInterestRate is "</span><span class="token operator">+</span>cust<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnualInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">"% ,balance is "</span> <span class="token operator">+</span> cust<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实验2：模拟银行账号">实验2：模拟银行账号</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913232700.png" alt="image-20210913232700023"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210913232730.png" alt="image-20210913232730727"></p><p>Account类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">double</span> init_balance<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> init_balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//存钱操作</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amt<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>amt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>balance <span class="token operator">+=</span> amt<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存钱成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//取钱操作</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amt<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> amt<span class="token punctuation">)</span><span class="token punctuation">{</span>balance <span class="token operator">-=</span> amt<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取钱成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Customer类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span> <span class="token class-name">String</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Bank类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Customer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> customers<span class="token punctuation">;</span><span class="token comment">// 存放多个客户的数组</span><span class="token keyword">private</span> <span class="token keyword">int</span> numberOfCustomers<span class="token punctuation">;</span><span class="token comment">// 记录客户的个数</span><span class="token keyword">public</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 此处要初始化数组，否则在调用addCustomer方法中的customers[numberOfCustomers++] = cust时，会出现// numberOfCustomers空指针异常</span>customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 添加客户</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span> <span class="token class-name">String</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Customer</span> cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// customers[numberOfCustomers] = cust;</span><span class="token comment">// numberOfCustomers++;</span><span class="token comment">// 或</span>customers<span class="token punctuation">[</span>numberOfCustomers<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cust<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取客户的个数</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> numberOfCustomers<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取指定位置上的客户</span><span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// return customers[index];//可能报异常</span><span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> numberOfCustomers<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> customers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BankTest类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bank<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连续操作</span>bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> balance <span class="token operator">=</span> bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户："</span> <span class="token operator">+</span> bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的账户余额为："</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bank<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token string">"万里"</span><span class="token punctuation">,</span> <span class="token string">"杨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"银行客户的个数为："</span> <span class="token operator">+</span> bank<span class="token punctuation">.</span><span class="token function">getNumOfCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="关键字：package、import">关键字：package、import</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914001931.png" alt="image-20210914001930779"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914002001.png" alt="image-20210914002001437"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914002137.png" alt="image-20210914002137297"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914002207.png" alt="image-20210914002206944"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4<span class="token punctuation">.</span></span><span class="token class-name">Account</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4<span class="token punctuation">.</span></span><span class="token class-name">Bank</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2<span class="token punctuation">.</span>java3<span class="token punctuation">.</span></span><span class="token class-name">Dog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment">/* * 一、package关键字的使用 * 1.为了更好的实现项目中类的管理，提供包的概念 * 2.使用package声明类或接口所属的包，声明在源文件的首行 * 3.包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意” * 4.每"."一次，就代表一层文件目录。 *  * 补充：同一个包下，不能命名同名的接口、类。 *     不同的包下，可以命名同名的接口、类。 *  * 二、import关键字的使用 * import:导入 * 1. 在源文件中显式的使用import结构导入指定包下的类、接口 * 2. 声明在包的声明和类的声明之间 * 3. 如果需要导入多个结构，则并列写出即可 * 4. 可以使用"xxx.*"的方式，表示可以导入xxx包下的所有结构 * 5. 如果使用的类或接口是java.lang包下定义的(如system，String等)，则可以省略import结构 * 6. 如果使用的类或接口是本包下定义的，则可以省略import结构 * 7. 如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。 * 8. 使用"xxx.*"方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入 * (如java.lang本不需要import，但是Field属于是java.lang下的子包reflect的类，所以也要童谣import显示导入) * 9. import static:导入指定类或接口中的静态结构:属性或方法。  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageImportTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span> acct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8全类名的方式显示</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3<span class="token punctuation">.</span></span>Account</span> acct1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3<span class="token punctuation">.</span></span>Account</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">0.0123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 7</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token number">5243523532535L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 8</span><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 9</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 9</span><span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">123.434</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Project2：客户信息管理软件">Project2：客户信息管理软件</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914151554.png" alt="image-20210914151554330"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210925200731.png" alt="image-20210914151701479"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914151720.png" alt="image-20210914151720821"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914151736.png" alt="image-20210914151735954"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210914152042.png" alt="image-20210914152042194"></p><p>项目地址：<a href="https://gitee.com/beihai-yu/java/tree/master/project2">https://gitee.com/beihai-yu/java/tree/master/project2</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(3)---数组</title>
      <link href="/2021/09/25/java-ji-chu-3-shu-zu/"/>
      <url>/2021/09/25/java-ji-chu-3-shu-zu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="数组">数组</h2><h3 id="数组的概述">数组的概述</h3><blockquote><ul><li><p>1.数组的理解：数组(Array)，是多个相同类型数据一定顺序排列的集合，并使用一个名字命名，</p></li><li><p>并通过编号的方式对这些数据进行统一管理。</p></li><li></li><li><p>2.数组相关的概念：</p></li><li><blockquote><p>数组名</p></blockquote></li><li><blockquote><p>元素</p></blockquote></li><li><blockquote><p>角标、下标、索引</p></blockquote></li><li><blockquote><p>数组的长度：元素的个数</p></blockquote></li><li></li><li><p>3.数组的特点：</p></li><li><p>1数组是序排列的</p></li><li><p>2数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</p></li><li><p>3创建数组对象会在内存中开辟一整块连续的空间</p></li><li><p>4<strong>数组的长度一旦确定，就不能修改</strong>。</p></li><li></li><li><ol start="4"><li>数组的分类：</li></ol></li><li><p>① 照维数：一维数组、二维数组、。。。</p></li><li><p>② 照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组</p></li></ul></blockquote><h3 id="一维数组的使用">一维数组的使用</h3><blockquote><p>一维数组的使用</p><ul><li>① 一维数组的声明和初始化</li><li>② 如何调用数组的指定位置的元素</li><li>③ 如何获取数组的长度</li><li>④ 如何遍历数组</li><li>⑤ 数组元素的默认初始化值 ：a</li><li>⑥ 数组的内存解析 ：</li></ul></blockquote><ul><li>①② ③ ④</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1. 一维数组的声明和初始化</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment">//声明</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//声明 + 初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">;</span><span class="token comment">//声明</span><span class="token comment">//1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行</span>ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token number">1004</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//错误的写法：</span><span class="token comment">//int[] arr1 = new int[];</span><span class="token comment">//int[5] arr2 = new int[5];</span><span class="token comment">//int[] arr3 = new int[3]{1,2,3};</span><span class="token comment">//也是正确的写法：</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//类型推断</span><span class="token comment">//总结：数组一旦初始化完成，其长度就确定了。</span><span class="token comment">//2.如何调用数组的指定位置的元素:通过角标的方式调用。</span><span class="token comment">//数组的角标（或索引）从0开始的，到数组的长度-1结束。</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"王铭"</span><span class="token punctuation">;</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"王赫"</span><span class="token punctuation">;</span>names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"张学良"</span><span class="token punctuation">;</span>names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"孙居龙"</span><span class="token punctuation">;</span>names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"王宏志"</span><span class="token punctuation">;</span><span class="token comment">//charAt(0)</span><span class="token comment">//names[5] = "周扬";</span><span class="token comment">//3.如何获取数组的长度。</span><span class="token comment">//属性:length</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.如何遍历数组</span><span class="token comment">/*System.out.println(names[0]);System.out.println(names[1]);System.out.println(names[2]);System.out.println(names[3]);System.out.println(names[4]);*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>⑤⑥</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210906114853.png" alt="image-20210906114853271"></p></li></ul><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210906214526.png" alt="image-20210906214526097"></p><h3 id="多维数组的使用">多维数组的使用</h3><blockquote><ul><li>二维数组的使用</li><li></li><li>1.理解：</li><li>对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。</li><li>其实，从数组底层的运行机制来看，其实没有多维数组。</li><li></li><li>2.二维数组的使用:</li><li>① 二维数组的声明和初始化</li><li>② 如何调用数组的指定位置的元素</li><li>③ 如何获取数组的长度</li><li>④ 如何遍历数组</li><li>⑤ 数组元素的默认初始化值 :</li><li>⑥ 数组的内存解析 :</li></ul></blockquote><p>①②③④</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1.二维数组的声明和初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//一维数组</span><span class="token comment">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//动态初始化1</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//动态初始化2</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//错误的情况 </span><span class="token comment">//String[][] arr4 = new String[][4];</span><span class="token comment">//String[4][3] arr5 = new String[][];</span><span class="token comment">//int[][] arr6 = new int[4][3]{{1,2,3},{4,5},{6,7,8}};</span><span class="token comment">//也是正确的写法：</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//2.如何调用数组的指定位置的元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.获取数组的长度</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">//4.如何遍历二维数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr4<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>⑤</p><p>​不同类型的一维数组元素的默认初始化值各是多少</p><p>​整型 :0 浮点型：0.0 char:0 boolean :false 引用类型：null</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*l * 二维数组的使用： * 规定：二维数组分为外层数组的元素，内层数组的元素 * int[][] arr = new int[4][3]; * 外层元素：arr[0],arr[1]等 * 内层元素：arr[0][0],arr[1][2]等 *  *   ⑤ 数组元素的默认初始化值  *   针对于初始化方式一：比如：int[][] arr = new int[4][3]; *      外层元素的初始化值为：地址值 *      内层元素的初始化值为：与一维数组初始化情况相同 *       *   针对于初始化方式二：比如：int[][] arr = new int[4][]; *   外层元素的初始化值为：null *      内层元素的初始化值为：不能调用，否则报错。 *    *   ⑥ 数组的内存解析  *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest3</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[I@15db9742 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token comment">//System.out.println(arr);//[[I@6d06d69c</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token comment">//System.out.println(arr3[1][0]);//报错</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>⑥</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909100601.png" alt="image-20210909100601130"></p><p><strong>练习：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 使用二维数组打印一个 10 行杨辉三角（元素上方+元素上方左边的值=元素值）。【提示】 1. 第一行有 1 个元素, 第 n 行有 n 个元素 2. 每一行的第一个元素和最后一个元素都是 1 3. 从第三行开始, 对于非第一个元素和最后一个元素的元素。即：yanghui[i][j] = yanghui[i-1][j-1] + yanghui[i-1][j]; *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YangHuiTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1.声明并初始化二维数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yangHui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2.给数组的元素赋值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> yangHui<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2.1 给首末元素赋值</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//2.2 给每行的非首末元素赋值</span><span class="token comment">//if(i &gt; 1){</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> yangHui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> yangHui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//}</span><span class="token punctuation">}</span><span class="token comment">//3.遍历二维数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> yangHui<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>yangHui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数组中涉及到的常见算法">数组中涉及到的常见算法</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909110652.png" alt="image-20210909110652270"></p><h4 id="回形数">回形数</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*回形数格式方阵的实现从键盘输入一个整数（1~20） 则以该数字为矩阵的大小，把1,2,3…n*n 的数字按照顺时针螺旋的形式填入其中。例如： 输入数字2，则程序输出： 1 2 4 3 输入数字3，则程序输出： 1 2 3 8 9 4 7 6 5 输入数字4， 则程序输出： 1   2   3   4 12  13  14  5 11  16  15  6 10   9  8   7*/</span><span class="token comment">// 方式一：</span><span class="token keyword">class</span> <span class="token class-name">RectangleTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s <span class="token operator">=</span> len <span class="token operator">*</span> len<span class="token punctuation">;</span><span class="token comment">/* * k = 1:向右 k = 2:向下 k = 3:向左 k = 4:向上 */</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> s<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>k <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 方式二</span><span class="token keyword">class</span> <span class="token class-name">RectangleTest1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 要显示的数据</span><span class="token keyword">int</span> maxX <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// x轴的最大下标</span><span class="token keyword">int</span> maxY <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Y轴的最大下标</span><span class="token keyword">int</span> minX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// x轴的最小下标</span><span class="token keyword">int</span> minY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Y轴的最小下标</span><span class="token keyword">while</span> <span class="token punctuation">(</span>minX <span class="token operator">&lt;=</span> maxX<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> minX<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> maxX<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>minY<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span>minY<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> minY<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> maxY<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>maxX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>                <span class="token punctuation">}</span>maxX<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> maxX<span class="token punctuation">;</span> x <span class="token operator">&gt;=</span> minX<span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>maxY<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span>maxY<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> maxY<span class="token punctuation">;</span> y <span class="token operator">&gt;=</span> minY<span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>minX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span>minX<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>space <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="数值型数组的最大值，最小值，总和，平均数">数值型数组的最大值，最小值，总和，平均数</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 算法的考查：求数值型数组中元素的最大值、最小值、平均数、总和等 *  * 定义一个int型的一维数组，包含10个元素，分别赋一些随机整数， * 然后求出所有元素的最大值，最小值，和值，平均值，并输出出来。 * 要求：所有随机数都是两位数。 *  * [10,99] * 公式：(int)(Math.random() * (99 - 10 + 1) + 10) *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">99</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求数组元素的最大值</span><span class="token keyword">int</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>maxValue <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span> <span class="token operator">+</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求数组元素的最小值</span><span class="token keyword">int</span> minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>minValue <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值为："</span> <span class="token operator">+</span> minValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求数组元素的总和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求数组元素的平均数</span><span class="token keyword">int</span> avgValue <span class="token operator">=</span> sum <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数为："</span> <span class="token operator">+</span> avgValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="数组的复制，反转，查找">数组的复制，反转，查找</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 使用简单数组(1)创建一个名为ArrayExer2的类，在main()方法中声明array1和array2两个变量，他们是int[]类型的数组。(2)使用大括号{}，把array1初始化为8个素数：2,3,5,7,11,13,17,19。(3)显示array1的内容。(4)赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值(如array[0]=0,array[2]=2)。打印出array1。 *  * 思考：array1和array2是什么关系？array1和array2地址值相同，都指向了堆空间的唯一的一个数组实体。 * 拓展：修改题目，实现array2对array1数组的复制 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayExer2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//alt + /</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">,</span>array2<span class="token punctuation">;</span>array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//显示array1的内容</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//赋值array2变量等于array1</span><span class="token comment">//不能称作数组的复制。</span>array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span><span class="token comment">//修改array2中的偶索引元素，使其等于索引值(如array[0]=0,array[2]=2)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出array1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>赋值：</strong><br>array2 = array1;<br>如何理解：将array1保存的数组的地址值赋给了array2，使得array1和array2共同指向堆空间中的同一个数组实体。</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911105032.png" alt="image-20210911105032468"></p><p><strong>复制：</strong><br>array2 = new int[array1.length];<br>for(int i = 0;i &lt; array2.length;i++){<br>array2[i] = array1[i];<br>}</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210911105014.png" alt="image-20210911105014463"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * 算法的考查：数组的复制、反转、查找(线性查找、二分法查找) *  *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数组的复制(区别于数组变量的赋值：arr1 = arr)</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//数组的反转</span><span class="token comment">//方法一：</span><span class="token comment">//for(int i = 0;i &lt; arr.length / 2;i++){</span><span class="token comment">//String temp = arr[i];</span><span class="token comment">//arr[i] = arr[arr.length - i -1];</span><span class="token comment">//arr[arr.length - i -1] = temp;</span><span class="token comment">//}</span><span class="token comment">//方法二：</span><span class="token comment">//for(int i = 0,j = arr.length - 1;i &lt; j;i++,j--){</span><span class="token comment">//String temp = arr[i];</span><span class="token comment">//arr[i] = arr[j];</span><span class="token comment">//arr[j] = temp;</span><span class="token comment">//}</span><span class="token comment">//遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找（或搜索）</span><span class="token comment">//线性查找：</span><span class="token class-name">String</span> dest <span class="token operator">=</span> <span class="token string">"BB"</span><span class="token punctuation">;</span>dest <span class="token operator">=</span> <span class="token string">"CC"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了指定的元素，位置为："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，没有找到的啦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//二分法查找：(熟悉)</span><span class="token comment">//前提：所要查找的数组必须有序。</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dest1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">;</span>dest1 <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始的首索引</span><span class="token keyword">int</span> end <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始的末索引</span><span class="token keyword">boolean</span> isFlag1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dest1 <span class="token operator">==</span> arr2<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了指定的元素，位置为："</span> <span class="token operator">+</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>isFlag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dest1<span class="token punctuation">)</span><span class="token punctuation">{</span>end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//arr2[middle] &lt; dest1</span>head <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>isFlag1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，没有找到的啦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="数组元素的排序算法">数组元素的排序算法</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909115037.png" alt="image-20210909115037180"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909115118.png" alt="image-20210909115118248"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909115419.png" alt="image-20210909115419034"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909120034.png" alt="image-20210909120033911"></p><p><strong>冒泡排序</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909161827.png" alt="image-20210909161827355"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 数组的冒泡排序的实现 * 将内层循环找出最大值，第二大值，然后再通过外层循环依次放在最后 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSortTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//冒泡排序</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>快速排序</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909161855.png" alt="image-20210909161855444"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909161947.png" alt="image-20210909161946988"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909165221.png" alt="image-20210909165221573"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909162033.png" alt="image-20210909162033201"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * 快速排序 * 通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小， * 则分别对这两部分继续进行排序，直到整个序列有序。 * @author shkstart * 2018-12-17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> base <span class="token operator">=</span> data<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> low <span class="token operator">=</span> start<span class="token punctuation">;</span><span class="token keyword">int</span> high <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token operator">++</span>low<span class="token punctuation">]</span> <span class="token operator">-</span> base <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token operator">--</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> base <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> start<span class="token punctuation">,</span> high <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归调用</span><span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">subSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之前：\n"</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序之后：\n"</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="十大排序算法对比">十大排序算法对比</h4><p><strong>此表不用记，记住冒泡和快排的时间复杂度即可</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909164808.png" alt="image-20210909164808511"></p><h3 id="Arrays工具类的使用">Arrays工具类的使用</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909165520.png" alt="image-20210909165520761"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/* * java.util.Arrays:操作数组的工具类，里面定义了很多操作数组的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1.boolean equals(int[] a,int[] b):判断两个数组是否相等。</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isEquals <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isEquals<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token comment">//2.String toString(int[] a):输出数组信息。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,2,3,4]</span><span class="token comment">//3.void fill(int[] a,int val):将指定值填充到数组之中。</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[10,10,10,10]</span><span class="token comment">//4.void sort(int[] a):对数组进行排序。</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,4]</span><span class="token comment">//5.int binarySearch(int[] a,int key) 二分查找某数</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数组使用中的常见异常">数组使用中的常见异常</h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210909175228.png" alt="image-20210909175228382"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* 数组中的常见异常： * 1. 数组角标越界的异常：ArrayIndexOutOfBoundsExcetion * 2. 空指针异常：NullPointerException // 小知识：一旦程序出现异常，未处理时，就终止执行。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayExceptionTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1. 数组角标越界的异常：ArrayIndexOutOfBoundsExcetion</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//for(int i = 0;i &lt;= arr.length;i++){</span><span class="token comment">//System.out.println(arr[i]);</span><span class="token comment">//}</span><span class="token comment">//System.out.println(arr[-2]);</span><span class="token comment">//System.out.println("hello");</span><span class="token comment">//2.2. 空指针异常：NullPointerException</span><span class="token comment">//情况一：</span><span class="token comment">//int[] arr1 = new int[]{1,2,3};</span><span class="token comment">//arr1 = null;</span><span class="token comment">//System.out.println(arr1[0]);</span><span class="token comment">//情况二：</span><span class="token comment">//int[][] arr2 = new int[4][];</span><span class="token comment">//System.out.println(arr2[0][0]);</span><span class="token comment">//情况三：</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(7)---异常处理</title>
      <link href="/2021/09/24/java-ji-chu-7-yi-chang-chu-li/"/>
      <url>/2021/09/24/java-ji-chu-7-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如下教程若有错误之处或者因为新版本更新导致用法过时，欢迎在评论区评论或私信给我(点击右侧发私信)！！！我会尽快更新</p></blockquote><h2 id="异常处理">异常处理</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210922184724.png" alt="image-20210922184724044"></p><h3 id="异常概述与异常体系结构">异常概述与异常体系结构</h3><ul><li><p>异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。</p><p>(开发过程中的语法错误和逻辑错误不是异常)</p></li><li><p>Java程序在执行过程中所发生的异常事件可分为两类：</p><p><strong>Error</strong>**：**Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。</p><p><strong>Exception:</strong> 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：</p><p>空指针访问</p><p>试图读取不存在的文件</p><p>网络连接中断</p><p>数组角标越界</p></li></ul><h3 id="常见异常">常见异常</h3><p>Error</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/* * Error: * Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。 *  * 一般不编写针对性的代码进行处理。 *  *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//1.栈溢出：java.lang.StackOverflowError</span><span class="token comment">//main(args);</span><span class="token comment">//2.堆溢出：java.lang.OutOfMemoryError </span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Exception</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * 一、异常体系结构 *  * java.lang.Throwable * |-----java.lang.Error:一般不编写针对性的代码进行处理。 * |-----java.lang.Exception:可以进行异常的处理 * |------编译时异常(checked) * |-----IOException * |-----FileNotFoundException * |-----ClassNotFoundException * |------运行时异常(unchecked,RuntimeException) * |-----NullPointerException * |-----ArrayIndexOutOfBoundsException * |-----ClassCastException * |-----NumberFormatException * |-----InputMismatchException * |-----ArithmeticException *  * 面试题：常见的异常都有哪些？举例说明 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span> <span class="token punctuation">{</span><span class="token comment">//******************以下是编译时异常***************************</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//File file = new File("hello.txt");</span><span class="token comment">//FileInputStream fis = new FileInputStream(file);</span><span class="token comment">//</span><span class="token comment">//int data = fis.read();</span><span class="token comment">//while(data != -1){</span><span class="token comment">//System.out.print((char)data);</span><span class="token comment">//data = fis.read();</span><span class="token comment">//}</span><span class="token comment">//</span><span class="token comment">//fis.close();</span><span class="token punctuation">}</span><span class="token comment">//******************以下是运行时异常***************************</span><span class="token comment">//ArithmeticException</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//InputMismatchException</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//NumberFormatException</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//ClassCastException</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//IndexOutOfBoundsException</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//ArrayIndexOutOfBoundsException</span><span class="token comment">//int[] arr = new int[10];</span><span class="token comment">//System.out.println(arr[10]);</span><span class="token comment">//StringIndexOutOfBoundsException</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//NullPointerException</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//int[] arr = null;</span><span class="token comment">//System.out.println(arr[3]);</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="异常处理机制一：try-catch-finally">异常处理机制一：try-catch-finally</h3><p>在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。</p><p><strong>Java</strong>异常处理：Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * 一、异常的处理：抓抛模型 *  * 过程一："抛"：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。 *           并将此对象抛出。 *           一旦抛出对象以后，其后的代码就不再执行。 *  * 关于异常对象的产生：① 系统自动生成的异常对象 *  ② 手动的生成一个异常对象，并抛出（throw） *  * 过程二："抓"：可以理解为异常的处理方式：① try-catch-finally  ② throws *  *  * 二、try-catch-finally的使用 *  * try{ * //可能出现异常的代码 *  * }catch(异常类型1 变量名1){ * //处理异常的方式1 * }catch(异常类型2 变量名2){ * //处理异常的方式2 * }catch(异常类型3 变量名3){ * //处理异常的方式3 * } * .... * finally{ * //一定会执行的代码 * } *  * 说明： * 1. finally是可选的。 * 2. 使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象 *    的类型，去catch中进行匹配 * 3. 一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的 *    try-catch结构（在没有写finally的情况）。继续执行其后的代码 * 4. catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。 *    catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错 * 5. 常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace() * 6. 在try结构中声明的变量，再出了try结构以后，就不能再被调用 * 7. try-catch-finally结构可以嵌套 *  * 体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。 *     相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。 *      * 体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。 *      针对于编译时异常，我们说一定要考虑异常的处理。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest1</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello-----1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//System.out.println("出现数值转换异常了，不要着急....");</span><span class="token comment">//String getMessage():</span><span class="token comment">//System.out.println(e.getMessage());</span><span class="token comment">//printStackTrace():</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现空指针异常了，不要着急...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现异常了，不要着急...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello-----2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * try-catch-finally中finally的使用： *  * 1.finally是可选的 *  * 2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有 * return语句等情况。 *  * 3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的 *   释放。此时的资源释放，就需要声明在finally中。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinallyTest</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我一定会被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int[] arr = new int[10];</span><span class="token comment">//System.out.println(arr[10]);</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//System.out.println("我好帅啊！！！~~");</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我好帅啊~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="异常处理机制二：throws">异常处理机制二：throws</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/* * 异常处理的方式二：throws + 异常类型 *  * 1. "throws + 异常类型"写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。 *     一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常 *     类型时，就会被抛出。异常代码后续的代码，就不再执行！ *      * 2. 体会：try-catch-finally:真正的将异常给处理掉了。 *        throws的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。   *  * 3. 开发中如何选择使用try-catch-finally 还是使用throws？ *   3.1 如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果 *       子类重写的方法中有异常，必须使用try-catch-finally方式处理。 *   3.2 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws *       的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//method3();</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span><span class="token class-name">IOException</span><span class="token punctuation">{</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hahaha!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/* * 方法重写的规则之一： * 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OverrideTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverrideTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">SuperClass</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="手动抛出异常：throw">手动抛出异常：throw</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//e.printStackTrace();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">// 手动抛出异常</span><span class="token comment">//System.out.println("您输入的数据非法！");</span><span class="token comment">//手动抛出异常对象</span><span class="token comment">//throw new RuntimeException("您输入的数据非法！");</span><span class="token comment">//throw new Exception("您输入的数据非法！");</span><span class="token comment">// 抛出自定义异常类</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"不能输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误的</span><span class="token comment">//throw new String("不能输入负数");</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="用户自定义异常类">用户自定义异常类</h3><p>MyException类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">/* * 如何自定义异常类？ * 1. 继承于现有的异常结构：RuntimeException 、Exception * 2. 提供全局常量：serialVersionUID * 3. 提供重载的构造器 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7034897193246939L</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="练习">练习</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/* * 编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。对数据类型不一致(NumberFormatException)、缺少命令行参数(ArrayIndexOutOfBoundsException、  除0(ArithmeticException)及输入负数(EcDef 自定义的异常)进行异常处理。提示： (1)在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。(2)在main()方法中使用异常处理语句进行异常处理。(3)在程序中，自定义对应输入负数的异常类(EcDef)。(4)运行时接受参数 java EcmDef 20 10   //args[0]=“20” args[1]=“10”(5)Interger类的static方法parseInt(String s)将s转换成对应的int值。        如：int a=Interger.parseInt(“314”);//a=314; */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EcmDef</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">ecm</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缺少命令行参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">EcDef</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ecm</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">EcDef</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EcDef</span><span class="token punctuation">(</span><span class="token string">"分子或分母为负数了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义异常类EcDef</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">//自定义异常类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EcDef</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">33875164229948L</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">EcDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">EcDef</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923145751.png" alt="image-20210923145751441"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923145900.png" alt="image-20210923145900437"></p><p>总结：如何看待代码中的编译时异常和运行时异常？</p><p>体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。</p><p>体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，我们说一定要考虑异常的处理。</p><p>2.2：finally的再说明：</p><p>1.finally是可的</p><p>2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中return语句，catch中return语句等情况。</p><p>3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</p><p>2.3：[面试题]</p><p>final、finally、finalize三者的区别？</p><p>类似：<br>throw 和 throws<br>Collection 和 Collections<br>String 、StringBuffer、StringBuilder<br>ArrayList 、 LinkedList<br>HashMap 、LinkedHashMap<br>重写、重载</p><p>结构不相似的：<br>抽象类、接口<br>== 、 equals()<br>sleep()、wait()</p><h2 id="Project3-开发团队调度软件">Project3-开发团队调度软件</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923153003.png" alt="image-20210923153003472"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923152905.png" alt="image-20210923152905313"></p><p>需求说明</p><p>该软件实现以下功能：<br>软件启动时，根据给定的数据创建公司部分成员列表（数组）<br>根据菜单提示，基于现有的公司成员，组建一个开发团队以开发一个新的项目<br>组建过程包括将成员插入到团队中，或从团队中删除某成员，还可以列出团队中现有成员的列表<br>开发团队成员包括架构师、设计师和程序员</p><p>本软件采用单级菜单方式工作。当软件运行时，主界面显示公司成员的列表，如下：</p><p>-------------------------------------开发团队调度软件--------------------------------------</p><p>ID     姓名      年龄    工资         职位      状态      奖金        股票     领用设备<br>1      马 云      22      3000.0<br>2      马化腾   32       18000.0  架构师   FREE    15000.0   2000    联想T4(6000.0)<br>3      李彦宏   23       7000.0    程序员   FREE                                戴尔(NEC17寸)<br>4      刘强东   24       7300.0    程序员   FREE                                戴尔(三星 17寸)<br>5      雷军      28       10000.0  设计师   FREE    5000.0                 佳能 2900(激光)</p><p>……</p><p>1-团队列表  2-添加团队成员  3-删除团队成员 4-退出   请选择(1-4)： _</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923153456.png" alt="image-20210923153456100"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923153521.png" alt="image-20210923153520897"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923153550.png" alt="image-20210923153550041"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923153603.png" alt="image-20210923153602845"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923154535.png" alt="image-20210923154535477"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210923154720.png" alt="image-20210923154720199"></p><p>项目代码地址：<a href="https://gitee.com/beihai-yu/java/tree/master/project3">https://gitee.com/beihai-yu/java/tree/master/project3</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA在-&gt;Settings-&gt;plugin中搜索不到插件的解决办法</title>
      <link href="/2021/09/24/idea-sou-suo-bu-dao-cha-jian-de-jie-jue-ban-fa/"/>
      <url>/2021/09/24/idea-sou-suo-bu-dao-cha-jian-de-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h1>IDEA在-&gt;Settings-&gt;plugin中搜索不到插件的解决办法</h1><h2 id="问题详情：">问题详情：</h2><p>可以按住Ctrl+Alt+S弹出Settings界面或者在file中找到找到Settings，进入Settings页面后找到Plugins页面后，<strong>如图搜不到任何插件</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924183606.png" alt=""></p><h2 id="解决办法">解决办法</h2><h3 id="方式一">方式一</h3><p>可以通过以下设置</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924183545.png" alt=""></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924183551.png" alt=""></p><p>这样就可以搜到插件了</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924184423.png" alt="image-20210924184423084"></p><h3 id="方式二（终极解决办法）">方式二（终极解决办法）</h3><p>如果这样还不能解决的话可以通过导入插件的压缩包来解决</p><p><strong>先通过浏览器进入<a href="https://plugins.jetbrains.com/">idea官网下载离线插件</a>，然后由idea工具导入我们所下载的插件即可！</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924185617.png" alt="image-20210924185617278"></p><p>查看你的idea版本</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924185759.png" alt="image-20210924185759502"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924190208.png" alt="image-20210924190208419"></p><p>在网站中输入插件名称后进入version history看版本号</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924190351.png" alt="image-20210924190351344"></p><p>找到对应版本下载后，在刚才的插件页面找到install plugin from disk</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924191049.png" alt="image-20210924191049876"></p><p>导入</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924191320.png" alt="image-20210924191320038"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210924191351.png" alt="image-20210924191351654"></p><p>应用之后重启生效了。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(2)---变量与运算符</title>
      <link href="/2021/09/04/java-yu-fa-bian-liang-yu-yun-suan-fu/"/>
      <url>/2021/09/04/java-yu-fa-bian-liang-yu-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="Java语法-变量与运算符">Java语法(变量与运算符)</h2><p>java基础知识图解</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901200411.png" alt="image-20210901200411273"></p><h3 id="关键字和保留字">关键字和保留字</h3><h4 id="关键字">关键字</h4><p>​定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>​特点：关键字中所字母都为小写<br>​具体哪些关键字：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901201305.png" alt="image-20210901201305704"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901201509.png" alt="image-20210901201509527"></p><h4 id="保留字">保留字</h4><p>​现Java版本尚未使用，但以后版本可能会作为关键字使用。</p><p>​具体哪些保留字：goto 、const<br>​注意：自己命名标识符时要避免使用这些保留字</p><h3 id="标识符">标识符</h3><p>​定义：凡是自己可以起名字的地方都叫标识符。<br>​涉及到的结构： 包名、类名、接口名、变量名、方法名、常量名<br>​规则：(必须要遵守。否则，编译不通过)</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901201553.png" alt="image-20210901201553013"></p><p>规范：（可以不遵守，不影响编译和运行。但是要求大家遵守）</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901201615.png" alt="image-20210901201615188"></p><p>注意点：<br>在起名字时，为了提高阅读性，要尽量意义，“见名知意”。</p><h3 id="变量">变量</h3><h3 id="运算符">运算符</h3><h4 id="算术运算符">算术运算符</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901204448.png" alt="image-20210901204448873"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// %:取余运算</span><span class="token comment">//结果的符号与被模数的符号相同</span><span class="token comment">//开发中，经常使用%来判断能否被除尽的情况。</span></code></pre><h4 id="赋值运算符">赋值运算符</h4><p>符号：=</p><p>​当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</p><p>​支持连续赋值。</p><p>扩展赋值运算符： +=, -=, *=, /=, %=</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 【特别说明的】</span><span class="token comment">// 1.运算的结果不会改变变量本身的数据类型</span><span class="token comment">// 2.</span><span class="token comment">//开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num = 10;)</span><span class="token comment">//方式一：num = num + 2;</span><span class="token comment">//方式二：num += 2; (推荐)</span><span class="token comment">//开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num = 10;)</span><span class="token comment">//方式一：num = num + 1;</span><span class="token comment">//方式二：num += 1; </span><span class="token comment">//方式三：num++; (推荐)</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 思考：</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 34</span></code></pre><h4 id="比较运算符（关系运算符）">比较运算符（关系运算符）</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901205211.png" alt="image-20210901205211318"></p><ol start="3"><li><pre><code class="language-java">1.比较运算符的结果是boolean类型  2.&gt;  &lt;  &gt;=  &lt;= :只能使用在数值类型的数据之间。<pre class="language-none"><code class="language-none">3. == 和 !=: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。   Account acct1 = new Account(1000);   Account acct2 = new Account(1000);   boolean b1 = (acct1 == acct2);//比较两个Account是否是同一个账户。   boolean b2 = (acct1 != acct2);//</code></pre></code></pre></li></ol><h4 id="逻辑运算符">逻辑运算符</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901210924.png" alt="image-20210901210924481"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901211918.png" alt="image-20210901211918478"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 面试题</span><span class="token number">1.</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token number">2.</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">3</span>． <span class="token keyword">boolean</span> x<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token number">4</span>． <span class="token keyword">boolean</span> y<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token number">5</span>． <span class="token keyword">short</span> z<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span><span class="token number">6</span>． <span class="token comment">//if(y == true)</span><span class="token number">7.</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">++</span><span class="token operator">==</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>z<span class="token operator">++</span><span class="token punctuation">;</span><span class="token number">8.</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>z<span class="token operator">==</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> z<span class="token operator">++</span><span class="token punctuation">;</span><span class="token number">9</span>．<span class="token number">10.</span> <span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“z<span class="token operator">=</span>”<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11.</span> <span class="token punctuation">}</span><span class="token number">12.</span> <span class="token punctuation">}</span>结果为：<span class="token number">46</span></code></pre><h4 id="位运算符">位运算符</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901212616.png" alt="image-20210901212616784"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901215230.png" alt="image-20210901215229983"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;&lt;</span> ：在一定范围内，每向左移<span class="token number">1</span>位，相当于 <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span> <span class="token operator">:</span>在一定范围内，每向右移<span class="token number">1</span>位，相当于 <span class="token operator">/</span> <span class="token number">2</span><span class="token comment">// 【面试题】 你能否写出最高效的2 * 8的实现方式？ </span><span class="token comment">//  答案：2 &lt;&lt; 3  或  8 &lt;&lt; 1</span></code></pre><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901215028.png" alt="image-20210901215028235"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901215045.png" alt="image-20210901215045451"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//练习：交换两个变量的值</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num1 = "</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">",num2 = "</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式一：定义临时变量的方式</span><span class="token comment">//推荐的方式</span><span class="token keyword">int</span> temp <span class="token operator">=</span> num1<span class="token punctuation">;</span>num1 <span class="token operator">=</span> num2<span class="token punctuation">;</span>num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">//方式二：好处：不用定义临时变量  </span><span class="token comment">//弊端：① 相加操作可能超出存储范围 ② 有局限性：只能适用于数值类型</span><span class="token comment">//num1 = num1 + num2;</span><span class="token comment">//num2 = num1 - num2;</span><span class="token comment">//num1 = num1 - num2;</span><span class="token comment">//方式三：使用位运算符</span><span class="token comment">//有局限性：只能适用于数值类型</span><span class="token comment">//num1 = num1 ^ num2;</span><span class="token comment">//num2 = num1 ^ num2;</span><span class="token comment">//num1 = num1 ^ num2;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 如何求一个0~255范围内的整数的十六进制值，例如60的十六进制表示形式3C</span><span class="token comment">//方式一：自动实现</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式二：手动实现</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">String</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i2 <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i2<span class="token operator">-</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span> <span class="token operator">:</span> i2<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> i1 <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i2 <span class="token operator">=</span> temp <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">String</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i2 <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i2<span class="token operator">-</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span> <span class="token operator">:</span> i2<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="三元运算符">三元运算符</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210902100943.png" alt="image-20210902100942951"></p><p>凡是可以使用三元运算符的地方，都可以改写为if-else。反之，不成立。</p><p>如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//获取两个整数的较大值</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取三个数的最大值</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">&gt;</span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> <span class="token punctuation">(</span>max1 <span class="token operator">&gt;</span> n3<span class="token punctuation">)</span><span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数中的最大值为："</span> <span class="token operator">+</span> max2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="运算符的优先级">运算符的优先级</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210902101622.png" alt="image-20210902101622891"></p><h3 id="程序流程控制">程序流程控制</h3><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p><p>其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：</p><p><strong>顺序结构</strong></p><p>​程序从上到下逐行地执行，中间没有任何判断和跳转。</p><p><strong>分支结构</strong></p><p>​根据条件，选择性地执行某段代码。</p><p>​有if…else和switch-case两种分支语句。</p><p><strong>循环结构</strong></p><p>​根据循环条件，重复性的执行某段代码。</p><p>​有while、do…while、for三种循环语句。</p><p>​注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。</p><h4 id="顺序结构">顺序结构</h4><p>Java中定义成员变量时采用合法的前向引用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 如</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>错误形式：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">2</span>；<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">}</span>执行语句<span class="token number">1</span><span class="token operator">|</span>执行语句<span class="token number">2</span><span class="token operator">|</span>执行语句n</code></pre><h4 id="分支语句">分支语句</h4><h5 id="if-else">if-else</h5><h6 id="基本结构">基本结构</h6><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210902102655.png" alt="image-20210902102655353"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210902102723.png" alt="image-20210902102723107"></p><h6 id="练习-包含面试题">练习(包含面试题)</h6><p><strong>如何从键盘获取不同类型的变量：需要使用Scanner类。</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*如何从键盘获取不同类型的变量：需要使用Scanner类具体实现步骤：1.导包：import java.util.Scanner;2.Scanner的实例化:Scanner scan = new Scanner(System.in);3.调用Scanner类的相关方法（next() / nextXxx()），来获取指定类型的变量注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常：InputMisMatchException导致程序终止。*/</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*课后练习1岳小鹏参加Java考试，他和父亲岳不群达成承诺：如果：成绩为100分时，奖励一辆BMW；成绩为(80，99]时，奖励一台iphone xs max；当成绩为[60,80]时，奖励一个 iPad；其它时，什么奖励也没有。请从键盘输入岳小鹏的期末成绩，并加以判断说明：1. else 结构是可选的。2. 针对于条件表达式：   &gt; 如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。   &gt; 如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。   &gt; 如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IfTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入岳小鹏期末成绩：(0-100)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一辆BMW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//be my wife!  BMW &lt;---&gt; MSN</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span>  score <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一台iphone xs max"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奖励一个 iPad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"什么奖励也没有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 课后练习2</span><span class="token comment">// 1)对下列代码，若有输出，指出输出结果。</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x is "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出atguigu 相当于</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x is "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2)变形（没有括号的情形）：</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// System.out.println("atguigu");</span><span class="token keyword">else</span> <span class="token comment">// 就近原则，与最近的if配对</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x is "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 x is 4</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//课后练习3：测算狗的年龄</span><span class="token keyword">int</span> dogAge <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dogAge <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dogAge <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相当于人的年龄："</span> <span class="token operator">+</span> dogAge <span class="token operator">*</span> <span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> dogAge <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相当于人的年龄："</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">10.5</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dogAge <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗狗还没出生呢！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//课后练习4：如何获取一个随机数：10 - 99</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">90</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0.0,1.0) --&gt; [0.0,90.0) ---&gt;[10.0, 100.0) --&gt;[10,99]</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//公式：[a,b]  :  (int)(Math.random() * (b - a + 1) )+ a</span></code></pre><h5 id="switch-case">switch-case</h5><h6 id="基本结构-2">基本结构</h6><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210902121518.png" alt="image-20210902121518629"></p><p>注意</p><p>① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。<br>当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构<br>末尾结束为止。<br>② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构<br>③ switch结构中的表达式，只能是如下的6种数据类型之一：byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)<br>④ case 之后只能声明常量。不能声明范围。<br>⑤ break关键字是可选的。<br>⑥ default:相当于if-else结构中的else.<br>default结构是可选的，而且位置是灵活的。<br>3.如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 例：</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//更优的解决方案：</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.break在switch-case中是可选的</p><h6 id="练习">练习</h6><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 一三五七八十腊（都是31天）</span><span class="token comment">// 闰年二月是28天，不是闰年二月是29天</span><span class="token comment">/*从键盘分别输入年、月、日，判断这一天是当年的第几天    注：判断一年是否是闰年的标准：       1）可以被4整除，但不可被100整除或       2）可以被400整除说明：1. 凡是可以使用switch-case的结构，都可以转换为if-else。反之，不成立。2. 我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），  又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SwitchCaseExer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入year："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入month："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入day："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义一个变量来保存总天数</span><span class="token keyword">int</span> sumDays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token comment">//sumDays += 28;</span><span class="token comment">//判断year是否是闰年</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sumDays <span class="token operator">+=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>sumDays <span class="token operator">+=</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日是当年的第"</span> <span class="token operator">+</span> sumDays <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="循环结构">循环结构</h4><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210903172839.png" alt="image-20210903172839084"></p><h5 id="for循环">for循环</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*For循环结构的使用一、循环结构的4个要素① 初始化条件② 循环条件  ---&gt;是boolean类型③ 循环体④ 迭代条件二、for循环的结构for(①;②;④){③}执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②*/</span><span class="token keyword">class</span> <span class="token class-name">ForTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//例题：遍历100以内的偶数,输出所有偶数的和,输出偶数的个数</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录所有偶数的和</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录偶数的个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//i:在for循环内有效。出了for循环就失效了。</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//System.out.println("总和为：" + sum);</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"个数为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*题目：输入两个正整数m和n，求其最大公约数和最小公倍数。比如：12和20的最大公约数是4，最小公倍数是60。说明：break关键字的使用：一旦在循环中执行到break，就跳出循环*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ForTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第一个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第二个正整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取最大公约数</span><span class="token comment">//1.获取两个数中的较小值</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span><span class="token comment">//2.遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大公约数为："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//一旦在循环中执行到break，就跳出循环</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//获取最小公倍数</span><span class="token comment">//1.获取两个数中的较大值</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span><span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span><span class="token comment">//2.遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小公倍数："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="while循环">while循环</h5><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210903192112.png" alt="image-20210903192112831"></p><p>区别：for循环和while循环的初始化条件部分的作用范围不同。</p><h5 id="do-while循环">do-while循环</h5><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210903193947.png" alt="image-20210903193947082"></p><h5 id="练习-2">练习</h5><pre class="language-java" data-language="java"><code class="language-java"> <span class="token comment">/*题目：从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。说明：1. 不在循环条件部分限制次数的结构：for(;;) 或 while(true)2. 结束循环有几种方式？     方式一：循环条件部分返回false 方式二：在循环体中，执行break*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ForWhileTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> positiveNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录正数的个数</span><span class="token keyword">int</span> negativeNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录负数的个数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//while(true){</span><span class="token keyword">int</span> number <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断number的正负情况</span><span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>positiveNumber<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>negativeNumber<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//一旦执行break，跳出循环</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的正数个数为："</span> <span class="token operator">+</span> positiveNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的负数个数为："</span> <span class="token operator">+</span> negativeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="嵌套循环">嵌套循环</h5><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210903201521.png" alt="image-20210903201521223"></p><p>练习</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*打印如下的图形*    * *   * * *  * * * * * * * * *  * * * *   * * *    * *     * */</span><span class="token comment">// 上半部分</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 输出“-”</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token comment">// 输出“* ”</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 下半部分</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*嵌套循环的应用1：九九乘法表1 * 1 = 12 * 1 = 2  2 * 2 = 4。。。9 * 1 = 9 。。。 9 * 9 = 81*/</span><span class="token keyword">class</span> <span class="token class-name">NineNineTable</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" * "</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*100000以内的所有质数的输出。实现方式二质数：素数，只能被1和它本身整除的自然数。--&gt;从2开始，到这个数-1结束为止，都不能被这个数本身整除。对PrimeNumberTest.java文件中质数输出问题的优化*/</span><span class="token keyword">class</span> <span class="token class-name">PrimeNumberTest2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录质数的个数</span><span class="token comment">//获取当前时间距离1970-01-01 00:00:00 的毫秒数</span><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历100000以内的自然数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//j:被i去除</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//i被j除尽</span><span class="token keyword">continue</span> label<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//能执行到此步骤的，都是质数</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取当前时间距离1970-01-01 00:00:00 的毫秒数</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"质数的个数为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//17110 - 优化一：break:1546 - 优化二：13</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="break、continue">break、continue</h5><p>break和continue关键字的使用：</p><table><thead><tr><th></th><th>使用范围</th><th>循环中使用的作用(不同点)</th><th>相同点</th></tr></thead><tbody><tr><td>break</td><td>switch-case循环结构中</td><td>结束当前循环</td><td>关键字后面不能声明执行语句</td></tr><tr><td>continue</td><td>循环结构中</td><td>结束当次循环</td><td>关键字后面不能声明执行语句</td></tr></tbody></table><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210903220559.png" alt="image-20210903220559885"></p><p>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</p><p>很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它。但使程序容易出错。Java中的break和continue是不同于goto的。</p><h5 id="项目一：家庭记账软件">项目一：家庭记账软件</h5><p>需求说明：</p><p>假设家庭起始的生活基本金为10000元。</p><p>每次登记收入（菜单2）后，收入的金额应累加到基本金上，并记录本次收入明细，以便后续的查询。</p><p>每次登记支出（菜单3）后，支出的金额应从基本金中扣除，并记录本次支出明细，以便后续的查询。</p><p>查询收支明细（ 菜单1）时，将显示所有的收入、支出名细列表</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210903222720.png" alt="image-20210903222720351"></p><p>答案代码：<a href="https://gitee.com/beihai-yu/java/tree/master/project1">https://gitee.com/beihai-yu/java/tree/master/project1</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础(1)---语言概述</title>
      <link href="/2021/09/01/java-yu-yan-gai-shu/"/>
      <url>/2021/09/01/java-yu-yan-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1>Java概述</h1><h2 id="概述">概述</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901183441.png" alt="image-20210901183441012"></p><h2 id="简史">简史</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901183517.png" alt="image-20210901183516911"></p><h2 id="各领域的运用">各领域的运用</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901183536.png" alt="image-20210901183536836"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901183847.png" alt="image-20210901183847357"></p><h2 id="诞生">诞生</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901184025.png" alt="image-20210901184025276"></p><h2 id="主要特性">主要特性</h2><p><strong>Java语言是易学的</strong>。Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用Java。</p><p><strong>Java语言是强制面向对象的</strong>。Java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，但支持接口之间的多承，并支持类与接口之间的实现机制（关键字为implements）。</p><p><strong>Java语言是分布式的</strong>。Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p><p><strong>Java语言是健壮的</strong>。Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。</p><p><strong>Java语言是安全的</strong>。Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。如：安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查。</p><p><strong>Java语言是体系结构中立的</strong>。Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。</p><p><strong>Java语言是解释型的</strong>。如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统的解释器中运行。</p><p><strong>Java是性能略高的</strong>。与那些解释型的高级脚本语言相比，Java的性能还是较优的。</p><p><strong>Java语言是原生支持多线程的</strong>。**在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。</p><h2 id="Java程序运行机制及运行过程">Java程序运行机制及运行过程</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901184838.png" alt="image-20210901184838524"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901184929.png" alt="image-20210901184928899"></p><p>Java两种核心机制</p><p>Java虚拟机 (Java Virtal Machine)</p><p>垃圾收集机制 (Garbage Collection)</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901185334.png" alt="image-20210901185334202"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901185410.png" alt="image-20210901185410300"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901190445.png" alt="image-20210901190444798"></p><h2 id="Java语言的环境搭建">Java语言的环境搭建</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901190538.png" alt="image-20210901190538284"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901190559.png" alt="image-20210901190559385"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901190624.png" alt="image-20210901190624700"></p><h3 id="JDK、JRE、JVM关系-面！"><strong>JDK、JRE、JVM关系(面！)</strong></h3><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901190926.png" alt="image-20210901190925732"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191003.png" alt="image-20210901191003498"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191121.png" alt="image-20210901191121084"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191147.png" alt="image-20210901191147525"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191204.png" alt="image-20210901191204641"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191521.png" alt="image-20210901191520939"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191537.png" alt="image-20210901191537450"></p><h2 id="第一个程序—HelloWorld">第一个程序—HelloWorld</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191652.png" alt="image-20210901191652132"></p><p><strong>显示后缀名</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191717.png" alt="image-20210901191716951"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191736.png" alt="image-20210901191736292"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191751.png" alt="image-20210901191751652"></p><h2 id="注释">注释</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191850.png" alt="image-20210901191850586"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191929.png" alt="image-20210901191929691"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901191944.png" alt="image-20210901191944737"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901192012.png" alt="image-20210901192012378"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">*</span>对第一个java程序进行总结<span class="token number">1.</span> java程序编写<span class="token operator">-</span>编译<span class="token operator">-</span>运行的过程编写：我们将编写的java代码保存在以<span class="token string">".java"</span>结尾的源文件中编译：使用javac<span class="token punctuation">.</span>exe命令编译我们的java源文件。格式：javac 源文件名<span class="token punctuation">.</span>java运行：使用java<span class="token punctuation">.</span>exe命令解释运行我们的字节码文件。 格式：java 类名<span class="token number">2.</span>在一个java源文件中可以声明多个<span class="token keyword">class</span>。但是，只能最多有一个类声明为<span class="token keyword">public</span>的。而且要求声明为<span class="token keyword">public</span>的类的类名必须与源文件名相同。<span class="token number">3.</span> 程序的入口是<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。格式是固定的。<span class="token number">4.</span> 输出语句：<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>先输出数据，然后换行<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>只输出数据<span class="token number">5.</span>每一行执行语句都以<span class="token string">";"</span>结束。<span class="token number">6.</span>编译的过程：编译以后，会生成一个或多个字节码文件。字节码文件的文件名与java源文件中的类名相同。<span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//public static void main(String a[]) {//arguments:参数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="Java-API文档">Java API文档</h2><p><strong>API</strong> （Application Programming Interface,应用程序编程接口）是 Java 提供的基本编程接口。</p><p>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的API文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。</p><p><strong>下载API：</strong></p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>​Additional Resources-Java SE 8 Documentation下载。</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901192204.png" alt="image-20210901192204276"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901192153.png" alt="image-20210901192153029"></p><h2 id="良好的编程风格">良好的编程风格</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210901192243.png" alt="image-20210901192243082"></p><h2 id="常用的Java开发工具">常用的Java开发工具</h2><p><strong>文本编辑工具：</strong></p><p>记事本UltraEditEditPlus TextPad NotePad</p><p><strong>Java集成开发环境（IDE)：</strong></p><p>JBuilderNetBeans<strong>Eclipse</strong> MyEclipse<strong>IntelliJ IDEA</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo发文章的终极办法：码云+PicGo+Typora(三)</title>
      <link href="/2021/08/03/hexo-fa-wen-zhang-de-zhong-ji-ban-fa-ma-yun-picgo-typora/"/>
      <url>/2021/08/03/hexo-fa-wen-zhang-de-zhong-ji-ban-fa-ma-yun-picgo-typora/</url>
      
        <content type="html"><![CDATA[<p>Hexo发文章的终极办法：码云+PicGo+Typora</p><p>Gitee码云+PicGo+Typora+snipaste<br>这三个组合是用来写博客笔记的，在使用的时候十分方便。推荐大家使用，笔者在安装过程中出现了些许的错误，于是整理并记录，希望能帮到大家。</p><h1>环境搭建</h1><p>snipaste贴图神器<br><a href="https://www.snipaste.com/">官网地址</a>，傻瓜式安装即可。</p><p>Typora<br>经常写博客的人都知道，就是一个markdown编辑器，我就不多说了。</p><p>觉得好用的，可以去<a href="https://typora.io/">官网</a>下载，傻瓜式安装即可。</p><p>安装node.js<br>后面安装插件的时候需要用到node.js，于是我这里先把它安装。</p><p>安装非常简单：</p><p>直接去<a href="https://nodejs.org/en/">官网</a>，点击下图左侧版本下载最新即可。下载完成后，傻瓜式安装，就没有它的事了。</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803223011.png" alt="image-20210803223011085"></p><h1>Gitee码云配置</h1><p>这是一个跟github有点类似的代码托管服务器，首先去<a href="https://gitee.com/">官网</a>注册一下。</p><p><strong>建立图床库</strong></p><p><strong>点击右上角+号</strong>，新建仓库</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803223151.png" alt="image-20210803223151374"></p><p>弹出如下界面：根据图中提示选择，最后点击创建。</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803223548.png" alt="image-20210803223548779"></p><h1>获取token</h1><p>码云中，点击设置，再点击左下方的私人令牌，再点击生成新令牌</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803224054.png" alt="image-20210803224054904"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803224255.png" alt="image-20210803224255421"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803224322.png" alt="image-20210803224321920"></p><p>按图操作，这里可能需要输入密码，输入密码后直接出来一串数字，把它复制。</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803224540.png" alt="image-20210803224540173"></p><blockquote><p>这里只会显示一次，一会需要用到，最好先保存在记事本中。</p></blockquote><h1>PicGo配置</h1><p>首先可以到<a href="https://github.com/Molunerfinn/PicGo">官网</a>下载，但是由于国内的下载速度实在是太慢了，所以这里提供一个<a href="https://j-s-wang.lanzous.com/iccxrdc">下载地址</a>，（<strong>如果自己有其他版本的话，需要保证大于2.2</strong>）</p><p>安装完成后的界面</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803223637.png" alt="image-20210803223637116"></p><p>点击左下角<strong>插件设置</strong>，输入 gitee，安装左侧插件</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803223833.png" alt="image-20210803223833466"></p><h1>gitee 2.0.3配置</h1><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803224730.png" alt="image-20210803224730399"></p><ul><li><p>url：图床<a href="https://gitee.com/">网站</a>，这里是码云的主页即可</p></li><li><p>owner：所有者，自己码云的账号名</p></li><li><p>repo：仓库名称</p></li><li><p>path：写上路径，如果不确定就写img</p><blockquote><p>这里几个项都没有 “/” 符号</p></blockquote></li><li><p>token：刚刚获取的个人令牌</p></li><li><p>message：无关紧要</p></li></ul><p><strong>设置Server</strong></p><p>点击picgo设置-&gt;设置server    (待会儿在typera会用到，一般默认就好)</p><p>如图配置就好：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803224952.png" alt="image-20210803224952015"></p><p><strong>设置时间戳</strong></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803225024.png" alt="image-20210803225024540"></p><h1>在Typora中使用PicGo上传图片</h1><p>完成以上配置后，进入typera中点击左上角 文件-&gt;偏好设置</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803225545.png" alt="image-20210803225545203"></p><h1>使用</h1><p>直接用snipaste截图，然后ctrl+v负值进来就可以了，Typera会自动帮你上传你复制过来的图片，且图片路径是在线的，不再是本地的了。特别是对于Hexo搭建的博客，我们可以把需要的</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803225847.png" alt="image-20210803225847613"></p><p>这些参数中必须的一些输入进Typera，这样建立一个Typera的模板，以后写文章就可以直接在Typera中写，需要发布的话，直接拖到 /source/_post路径下，然后使用命令编译就可以了，或者你直接传到你部署的博客码云或github的路径中。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitee </tag>
            
            <tag> Typera </tag>
            
            <tag> picGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+picGo搭建图床</title>
      <link href="/2021/08/03/github-picgo-da-jian-tu-chuang/"/>
      <url>/2021/08/03/github-picgo-da-jian-tu-chuang/</url>
      
        <content type="html"><![CDATA[<p>Github+picGo搭建图床</p><blockquote><p>图床是什么？<br>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。<br>　　　　　　　　　　　　　　　　　　　　　　　　　----来自百度百科</p></blockquote><p>具体过程：</p><h1>Github相关</h1><h2 id="建一个github仓库">建一个github仓库</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215525.png" alt="11"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215625.png" alt="12"></p><h2 id="生成Token">生成Token</h2><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215651.png" alt="13"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215710.png" alt="14"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215737.png" alt="15"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215742.png" alt="16"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215811.png" alt="17"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215816.png" alt="18"></p><h1>picGo相关</h1><h2 id="下载配置picgo">下载配置picgo</h2><p>首先下载安装 PicGo，图片上传工具 PicGo 下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>如果下载速度非常慢的话，备用地址：<a href="https://pan.baidu.com/s/1PKH75ICwlLQqgr3UW565Bg">传送门</a> 密钥：388t</p><p>下载完成后进行安装，安装完毕后开始配置，先上图：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215844.png" alt="19"></p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215848.png" alt="20"></p><p>设定仓库名：这个是刚刚第一步所新建仓库的名称，我的为 xiaoxin-images，此处填写格式 username/repo。<br>设定分支名：master，采用默认分支即可<br>设定 Token：此处填写上一步得到的 Token，添加到输入框即可。<br>指定存储路径：自定义，例：images/，相当于在刚刚新建的仓库下新建了一个文件夹。<br>设定自定义域名：格式：<a href="https://cdn.jsdelivr.net/gh/username/repo%EF%BC%8Cusername">https://cdn.jsdelivr.net/gh/username/repo，username</a> 为 GitHub 用户名，repo 为新建的仓库，用于存储图片<br>注意：配置完成后，别忘记点击确定哦！</p><p>完成以上步骤，图床就算配置好了。</p><h2 id="使用">使用</h2><p>上传方式有三种，一种是复制图片到剪贴板后，点击剪贴板图片上传，另一种是直接拖图片上传，最后一种是选择文件上传。</p><p>注：上传前注意选择链接格式，当然也可以不选择，可以去相册选择图片的链接格式，如下图所示：</p><p><img src="https://xin--images.oss-cn-hongkong.aliyuncs.com/images/20210803215903.png" alt="21"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/31/hello-world/"/>
      <url>/2021/07/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="/2019/08/05/404/"/>
      <url>/2019/08/05/404/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
